
Projekt_JS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800828c  0800828c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008294  08008294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800829c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000074  08008310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  08008310  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014277  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1c  00000000  00000000  0003435e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd4  00000000  00000000  00037f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002797c  00000000  00000000  00038d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156b2  00000000  00000000  00060690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f453c  00000000  00000000  00075d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054a4  00000000  00000000  0016a280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0016f724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080c8 	.word	0x080080c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080080c8 	.word	0x080080c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_13 // Pin i port obsługujący pin TRIGGER sensora
#define TRIG_PORT GPIOF

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	// Obługa systemu pomiaru. Flaga Is_First_Captured jest ustawiana na 1 i zapisywany jest pierwszy czas impulsu.
	// Następny pomiar ustawia flagę na 0 i zapisuję drugi pomiar.
	// Wynikiem pożądanym (odległośc od wagonika) oblicza się jako różnica zczytanych pomiarów razy 0.034/2
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 8083 	bne.w	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0)
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11a      	bne.n	8000dd8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f003 fdab 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020a 	bic.w	r2, r2, #10
 8000dc4:	621a      	str	r2, [r3, #32]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0202 	orr.w	r2, r2, #2
 8000dd4:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000dd6:	e063      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d15f      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f003 fd8c 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d907      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00f      	b.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d909      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e30:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2;
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb7c 	bl	8000534 <__aeabi_ui2d>
 8000e3c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ea8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbf1 	bl	8000628 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f7ff fd11 	bl	800087c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fdf3 	bl	8000a4c <__aeabi_d2uiz>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e6c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020a 	bic.w	r2, r2, #10
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a12      	ldr	r2, [r2, #32]
 8000e8e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0202 	bic.w	r2, r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	b020c49c 	.word	0xb020c49c
 8000eac:	3fa16872 	.word	0x3fa16872
 8000eb0:	20000710 	.word	0x20000710
 8000eb4:	20000704 	.word	0x20000704
 8000eb8:	20000708 	.word	0x20000708
 8000ebc:	2000070c 	.word	0x2000070c
 8000ec0:	20000711 	.word	0x20000711
 8000ec4:	20000090 	.word	0x20000090

08000ec8 <delay>:

void delay(uint8_t time){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <delay+0x30>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eda:	bf00      	nop
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <delay+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <delay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000090 	.word	0x20000090

08000efc <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	// Impuls pinu TRIGGER; uruchamia system pomiaru
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HCSR04_Read+0x38>)
 8000f08:	f001 fb60 	bl	80025cc <HAL_GPIO_WritePin>
	delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f7ff ffdb 	bl	8000ec8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HCSR04_Read+0x38>)
 8000f1a:	f001 fb57 	bl	80025cc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	60da      	str	r2, [r3, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021400 	.word	0x40021400
 8000f38:	20000090 	.word	0x20000090

08000f3c <__io_putchar>:

int __io_putchar(int ch)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d102      	bne.n	8000f50 <__io_putchar+0x14>
		__io_putchar('\r');
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f7ff fff6 	bl	8000f3c <__io_putchar>
	}

	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <__io_putchar+0x2c>)
 8000f5a:	f004 fb15 	bl	8005588 <HAL_UART_Transmit>

	return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000174 	.word	0x20000174

08000f6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	// Komunikacjka z portem szeregowym, odbiór wartości zadanej.
	if(huart == &huart3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <HAL_UART_RxCpltCallback+0x48>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d116      	bne.n	8000faa <HAL_UART_RxCpltCallback+0x3e>
	{
		p1 = 300; // Restart silników;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_RxCpltCallback+0x4c>)
 8000f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f82:	601a      	str	r2, [r3, #0]
		p2 = 300;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_UART_RxCpltCallback+0x50>)
 8000f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f8a:	601a      	str	r2, [r3, #0]

		int Target = strtol((char*)&tx_buffer, 0, 10);
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	2100      	movs	r1, #0
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_UART_RxCpltCallback+0x54>)
 8000f92:	f006 f8fd 	bl	8007190 <strtol>
 8000f96:	60f8      	str	r0, [r7, #12]
			Target_value = Target;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_UART_RxCpltCallback+0x58>)
 8000f9e:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart3, tx_buffer, 2);
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <HAL_UART_RxCpltCallback+0x54>)
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <HAL_UART_RxCpltCallback+0x48>)
 8000fa6:	f004 fb72 	bl	800568e <HAL_UART_Receive_IT>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000174 	.word	0x20000174
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000714 	.word	0x20000714
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	//Stała częstotliwość próbkowania: 15Hz ; wywołanie systemu pomiaru
  if (htim->Instance == htim4.Instance)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8087 	bne.w	80010ec <HAL_TIM_PeriodElapsedCallback+0x124>
  {
	  HCSR04_Read(); // Wywołanie pomiaru
 8000fde:	f7ff ff8d 	bl	8000efc <HCSR04_Read>

	  ////////////ograniczenie prędkości ze względu na zacinanie się śmigieł/////////////////
	  if(p1>1900){
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f240 726c 	movw	r2, #1900	; 0x76c
 8000fea:	4293      	cmp	r3, r2
 8000fec:	dd03      	ble.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  p1= 1900;
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ff0:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ff4:	601a      	str	r2, [r3, #0]
	  }

	  if(p2>1900){
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ffe:	4293      	cmp	r3, r2
 8001000:	dd03      	ble.n	800100a <HAL_TIM_PeriodElapsedCallback+0x42>
		  p2= 1900;
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001004:	f240 726c 	movw	r2, #1900	; 0x76c
 8001008:	601a      	str	r2, [r3, #0]
	  }

	  if(p1<300){
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001012:	da03      	bge.n	800101c <HAL_TIM_PeriodElapsedCallback+0x54>
		  p1 = 300;
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800101a:	601a      	str	r2, [r3, #0]
	  }

	  if(p2<300){
 800101c:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001024:	da03      	bge.n	800102e <HAL_TIM_PeriodElapsedCallback+0x66>
		  p2 = 300;
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001028:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102c:	601a      	str	r2, [r3, #0]
	  }
	  ////////////////////////////////

	  // Główny algorymt sterowania, położenie wagonika zwiększa/zmniejsza wypełnienie PWM kontrolujące śmigła.
	  if(Distance < Target_value){
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d21f      	bcs.n	800107a <HAL_TIM_PeriodElapsedCallback+0xb2>
		  p1 = p1-1;
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001042:	6013      	str	r3, [r2, #0]
		  p2 = p2+1;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800104c:	6013      	str	r3, [r2, #0]

		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,p1);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,p2);
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001068:	f001 fab0 	bl	80025cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001074:	f001 faaa 	bl	80025cc <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,250);
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
	  }
  }
}
 8001078:	e038      	b.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x124>
	  }else if(Distance > Target_value){
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d91f      	bls.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0xfe>
		  p1 = p1+1;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800108e:	6013      	str	r3, [r2, #0]
		  p2 = p2-1;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001098:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,p1);
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,p2);
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4816      	ldr	r0, [pc, #88]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010b4:	f001 fa8a 	bl	80025cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010c0:	f001 fa84 	bl	80025cc <HAL_GPIO_WritePin>
}
 80010c4:	e012      	b.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x124>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,250);
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	22fa      	movs	r2, #250	; 0xfa
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,250);
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	22fa      	movs	r2, #250	; 0xfa
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010de:	f001 fa75 	bl	80025cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010e8:	f001 fa70 	bl	80025cc <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000128 	.word	0x20000128
 80010f8:	20000004 	.word	0x20000004
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000711 	.word	0x20000711
 8001104:	20000000 	.word	0x20000000
 8001108:	200000dc 	.word	0x200000dc
 800110c:	40020400 	.word	0x40020400

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fe89 	bl	8001e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f860 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fa50 	bl	80015c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001120:	f000 f9f0 	bl	8001504 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001124:	f000 fa1e 	bl	8001564 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001128:	f000 f8c0 	bl	80012ac <MX_TIM1_Init>
  MX_TIM3_Init();
 800112c:	f000 f918 	bl	8001360 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001130:	f000 f99a 	bl	8001468 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001134:	2100      	movs	r1, #0
 8001136:	481b      	ldr	r0, [pc, #108]	; (80011a4 <main+0x94>)
 8001138:	f002 fef8 	bl	8003f2c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, tx_buffer, 2);
 800113c:	2202      	movs	r2, #2
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <main+0x98>)
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <main+0x9c>)
 8001142:	f004 faa4 	bl	800568e <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <main+0xa0>)
 800114a:	f002 fd9d 	bl	8003c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800114e:	2104      	movs	r1, #4
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <main+0xa0>)
 8001152:	f002 fd99 	bl	8003c88 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <main+0xa4>)
 8001158:	f002 fcbc 	bl	8003ad4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Nadanie komunikacji z systemem.
	  HAL_Delay(2000);
 800115c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001160:	f000 fec0 	bl	8001ee4 <HAL_Delay>
	  printf("------------------------\n");
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0xa8>)
 8001166:	f006 f945 	bl	80073f4 <puts>
	  printf("Current distance = %u\n", Distance);
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <main+0xac>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <main+0xb0>)
 8001172:	f006 f8d9 	bl	8007328 <iprintf>
	  printf("Target value: = %u\n", Target_value);
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <main+0xb4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <main+0xb8>)
 800117e:	f006 f8d3 	bl	8007328 <iprintf>
	  printf("p1 = %u\n", p1);
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <main+0xbc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <main+0xc0>)
 800118a:	f006 f8cd 	bl	8007328 <iprintf>
	  printf("p2 = %u\n", p2);
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <main+0xc4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	4810      	ldr	r0, [pc, #64]	; (80011d8 <main+0xc8>)
 8001196:	f006 f8c7 	bl	8007328 <iprintf>
	  printf("------------------------\n");
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <main+0xa8>)
 800119c:	f006 f92a 	bl	80073f4 <puts>
	  HAL_Delay(2000);
 80011a0:	e7dc      	b.n	800115c <main+0x4c>
 80011a2:	bf00      	nop
 80011a4:	20000090 	.word	0x20000090
 80011a8:	20000714 	.word	0x20000714
 80011ac:	20000174 	.word	0x20000174
 80011b0:	200000dc 	.word	0x200000dc
 80011b4:	20000128 	.word	0x20000128
 80011b8:	080080e0 	.word	0x080080e0
 80011bc:	20000711 	.word	0x20000711
 80011c0:	080080fc 	.word	0x080080fc
 80011c4:	20000000 	.word	0x20000000
 80011c8:	08008114 	.word	0x08008114
 80011cc:	20000004 	.word	0x20000004
 80011d0:	08008128 	.word	0x08008128
 80011d4:	20000008 	.word	0x20000008
 80011d8:	08008134 	.word	0x08008134

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 f9e2 	bl	80075b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001200:	f001 fb46 	bl	8002890 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <SystemClock_Config+0xc8>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <SystemClock_Config+0xc8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <SystemClock_Config+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <SystemClock_Config+0xcc>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <SystemClock_Config+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800123c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001250:	2348      	movs	r3, #72	; 0x48
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001258:	2303      	movs	r3, #3
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fb25 	bl	80028b0 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800126c:	f000 fabc 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2102      	movs	r1, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fdb3 	bl	8002df8 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001298:	f000 faa6 	bl	80017e8 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	; 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_TIM1_Init+0xac>)
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <MX_TIM1_Init+0xb0>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM1_Init+0xac>)
 80012d2:	2247      	movs	r2, #71	; 0x47
 80012d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_TIM1_Init+0xac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM1_Init+0xac>)
 80012de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM1_Init+0xac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_TIM1_Init+0xac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM1_Init+0xac>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM1_Init+0xac>)
 80012f8:	f002 fdc0 	bl	8003e7c <HAL_TIM_IC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001302:	f000 fa71 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <MX_TIM1_Init+0xac>)
 800131a:	f004 f83b 	bl	8005394 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001324:	f000 fa60 	bl	80017e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800132c:	2301      	movs	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM1_Init+0xac>)
 8001340:	f003 f863 	bl	800440a <HAL_TIM_IC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800134a:	f000 fa4d 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000090 	.word	0x20000090
 800135c:	40010000 	.word	0x40010000

08001360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <MX_TIM3_Init+0x100>)
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <MX_TIM3_Init+0x104>)
 8001396:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <MX_TIM3_Init+0x100>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_TIM3_Init+0x100>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <MX_TIM3_Init+0x100>)
 80013a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MX_TIM3_Init+0x100>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM3_Init+0x100>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b8:	4829      	ldr	r0, [pc, #164]	; (8001460 <MX_TIM3_Init+0x100>)
 80013ba:	f002 fb33 	bl	8003a24 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013c4:	f000 fa10 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4822      	ldr	r0, [pc, #136]	; (8001460 <MX_TIM3_Init+0x100>)
 80013d6:	f003 f9c9 	bl	800476c <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013e0:	f000 fa02 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <MX_TIM3_Init+0x100>)
 80013e6:	f002 fbed 	bl	8003bc4 <HAL_TIM_PWM_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013f0:	f000 f9fa 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <MX_TIM3_Init+0x100>)
 8001404:	f003 ffc6 	bl	8005394 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800140e:	f000 f9eb 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001412:	2360      	movs	r3, #96	; 0x60
 8001414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_TIM3_Init+0x100>)
 800142a:	f003 f88b 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001434:	f000 f9d8 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM3_Init+0x100>)
 8001444:	f003 f87e 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800144e:	f000 f9cb 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM3_Init+0x100>)
 8001454:	f000 fa80 	bl	8001958 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200000dc 	.word	0x200000dc
 8001464:	40000400 	.word	0x40000400

08001468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM4_Init+0x94>)
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <MX_TIM4_Init+0x98>)
 800148a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_TIM4_Init+0x94>)
 800148e:	221f      	movs	r2, #31
 8001490:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM4_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_TIM4_Init+0x94>)
 800149a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_TIM4_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_TIM4_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_TIM4_Init+0x94>)
 80014ae:	f002 fab9 	bl	8003a24 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014b8:	f000 f996 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM4_Init+0x94>)
 80014ca:	f003 f94f 	bl	800476c <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80014d4:	f000 f988 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM4_Init+0x94>)
 80014e6:	f003 ff55 	bl	8005394 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80014f0:	f000 f97a 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000128 	.word	0x20000128
 8001500:	40000800 	.word	0x40000800

08001504 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_USART3_UART_Init+0x58>)
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <MX_USART3_UART_Init+0x5c>)
 800150c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART3_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART3_UART_Init+0x58>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART3_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001548:	f003 ffd0 	bl	80054ec <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001552:	f000 f949 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000174 	.word	0x20000174
 8001560:	40004800 	.word	0x40004800

08001564 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800156e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2206      	movs	r2, #6
 8001574:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	2202      	movs	r2, #2
 800157a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2202      	movs	r2, #2
 8001586:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2201      	movs	r2, #1
 800158c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2201      	movs	r2, #1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	f001 f829 	bl	80025fe <HAL_PCD_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 f919 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001fc 	.word	0x200001fc

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a7d      	ldr	r2, [pc, #500]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b7b      	ldr	r3, [pc, #492]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <MX_GPIO_Init+0x210>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a71      	ldr	r2, [pc, #452]	; (80017d0 <MX_GPIO_Init+0x210>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a6b      	ldr	r2, [pc, #428]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <MX_GPIO_Init+0x210>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <MX_GPIO_Init+0x210>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <MX_GPIO_Init+0x210>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a59      	ldr	r2, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x210>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a53      	ldr	r2, [pc, #332]	; (80017d0 <MX_GPIO_Init+0x210>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <MX_GPIO_Init+0x210>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f244 0181 	movw	r1, #16513	; 0x4081
 800169c:	484d      	ldr	r0, [pc, #308]	; (80017d4 <MX_GPIO_Init+0x214>)
 800169e:	f000 ff95 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a8:	484b      	ldr	r0, [pc, #300]	; (80017d8 <MX_GPIO_Init+0x218>)
 80016aa:	f000 ff8f 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	484a      	ldr	r0, [pc, #296]	; (80017dc <MX_GPIO_Init+0x21c>)
 80016b4:	f000 ff8a 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4844      	ldr	r0, [pc, #272]	; (80017e0 <MX_GPIO_Init+0x220>)
 80016d0:	f000 fdd0 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016d4:	2332      	movs	r3, #50	; 0x32
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e4:	230b      	movs	r3, #11
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	483c      	ldr	r0, [pc, #240]	; (80017e0 <MX_GPIO_Init+0x220>)
 80016f0:	f000 fdc0 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016f4:	2386      	movs	r3, #134	; 0x86
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001704:	230b      	movs	r3, #11
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4835      	ldr	r0, [pc, #212]	; (80017e4 <MX_GPIO_Init+0x224>)
 8001710:	f000 fdb0 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001714:	f244 0381 	movw	r3, #16513	; 0x4081
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	4829      	ldr	r0, [pc, #164]	; (80017d4 <MX_GPIO_Init+0x214>)
 800172e:	f000 fda1 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <MX_GPIO_Init+0x218>)
 800174c:	f000 fd92 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001762:	230b      	movs	r3, #11
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4819      	ldr	r0, [pc, #100]	; (80017d4 <MX_GPIO_Init+0x214>)
 800176e:	f000 fd81 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001772:	2340      	movs	r3, #64	; 0x40
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4814      	ldr	r0, [pc, #80]	; (80017dc <MX_GPIO_Init+0x21c>)
 800178a:	f000 fd73 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_GPIO_Init+0x21c>)
 80017a2:	f000 fd67 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b8:	230b      	movs	r3, #11
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_GPIO_Init+0x21c>)
 80017c4:	f000 fd56 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c8:	bf00      	nop
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_TIM_IC_MspInit+0x8c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d130      	bne.n	80018c0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_TIM_IC_MspInit+0x90>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_TIM_IC_MspInit+0x94>)
 80018ac:	f000 fce2 	bl	8002274 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	201b      	movs	r0, #27
 80018b6:	f000 fc14 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018ba:	201b      	movs	r0, #27
 80018bc:	f000 fc2d 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_TIM_Base_MspInit+0x78>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d114      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	201d      	movs	r0, #29
 8001904:	f000 fbed 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001908:	201d      	movs	r0, #29
 800190a:	f000 fc06 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800190e:	e018      	b.n	8001942 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_TIM_Base_MspInit+0x80>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d113      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_TIM_Base_MspInit+0x7c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201e      	movs	r0, #30
 8001938:	f000 fbd3 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800193c:	201e      	movs	r0, #30
 800193e:	f000 fbec 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40000400 	.word	0x40000400
 8001950:	40023800 	.word	0x40023800
 8001954:	40000800 	.word	0x40000800

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <HAL_TIM_MspPostInit+0x9c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d137      	bne.n	80019ea <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_TIM_MspPostInit+0xa0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <HAL_TIM_MspPostInit+0xa4>)
 80019c6:	f000 fc55 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019da:	2302      	movs	r3, #2
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <HAL_TIM_MspPostInit+0xa8>)
 80019e6:	f000 fc45 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020800 	.word	0x40020800

08001a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0aa      	sub	sp, #168	; 0xa8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2284      	movs	r2, #132	; 0x84
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 fdc5 	bl	80075b4 <memset>
  if(huart->Instance==USART3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_UART_MspInit+0xc4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d144      	bne.n	8001abe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fbfe 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a4e:	f7ff fecb 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_UART_MspInit+0xc8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <HAL_UART_MspInit+0xcc>)
 8001aaa:	f000 fbe3 	bl	8002274 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2027      	movs	r0, #39	; 0x27
 8001ab4:	f000 fb15 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ab8:	2027      	movs	r0, #39	; 0x27
 8001aba:	f000 fb2e 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	37a8      	adds	r7, #168	; 0xa8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40004800 	.word	0x40004800
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020c00 	.word	0x40020c00

08001ad4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ac      	sub	sp, #176	; 0xb0
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	2284      	movs	r2, #132	; 0x84
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fd5d 	bl	80075b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b02:	d159      	bne.n	8001bb8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fb95 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b20:	f7ff fe62 	bl	80017e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b56:	230a      	movs	r3, #10
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b60:	4619      	mov	r1, r3
 8001b62:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <HAL_PCD_MspInit+0xf0>)
 8001b64:	f000 fb86 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <HAL_PCD_MspInit+0xf0>)
 8001b84:	f000 fb76 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b92:	6353      	str	r3, [r2, #52]	; 0x34
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001baa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_PCD_MspInit+0xec>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	37b0      	adds	r7, #176	; 0xb0
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 f946 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_CC_IRQHandler+0x10>)
 8001c22:	f002 fad3 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000090 	.word	0x20000090

08001c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM3_IRQHandler+0x10>)
 8001c36:	f002 fac9 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200000dc 	.word	0x200000dc

08001c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM4_IRQHandler+0x10>)
 8001c4a:	f002 fabf 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000128 	.word	0x20000128

08001c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <USART3_IRQHandler+0x10>)
 8001c5e:	f003 fd5b 	bl	8005718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000174 	.word	0x20000174

08001c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
  }

  return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f93b 	bl	8000f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
  }
  return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:

int _close(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
  return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f005 fc6a 	bl	8007650 <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20050000 	.word	0x20050000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000734 	.word	0x20000734
 8001db0:	20000888 	.word	0x20000888

08001db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dde:	490e      	ldr	r1, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df4:	4c0b      	ldr	r4, [pc, #44]	; (8001e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e02:	f7ff ffd7 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f005 fc29 	bl	800765c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0a:	f7ff f981 	bl	8001110 <main>
  bx  lr    
 8001e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e1c:	0800829c 	.word	0x0800829c
  ldr r2, =_sbss
 8001e20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e24:	20000888 	.word	0x20000888

08001e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC_IRQHandler>

08001e2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2e:	2003      	movs	r0, #3
 8001e30:	f000 f94c 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 f805 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3a:	f7ff fcdb 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f967 	bl	8002136 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f92f 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000000c 	.word	0x2000000c
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000014 	.word	0x20000014
 8001ec8:	20000738 	.word	0x20000738

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000738 	.word	0x20000738

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000014 	.word	0x20000014

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <__NVIC_SetPriorityGrouping+0x40>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x40>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	05fa0000 	.word	0x05fa0000

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb6 	bl	8001ecc <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d008      	beq.n	8002180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e052      	b.n	8002226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0216 	bic.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_DMA_Abort+0x62>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fe7b 	bl	8001ecc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e175      	b.n	8002580 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8164 	bne.w	800257a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d005      	beq.n	80022ca <HAL_GPIO_Init+0x56>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d130      	bne.n	800232c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0201 	and.w	r2, r3, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b03      	cmp	r3, #3
 8002336:	d017      	beq.n	8002368 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d123      	bne.n	80023bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	69b9      	ldr	r1, [r7, #24]
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80be 	beq.w	800257a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_GPIO_Init+0x324>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_GPIO_Init+0x324>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_GPIO_Init+0x324>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002416:	4a61      	ldr	r2, [pc, #388]	; (800259c <HAL_GPIO_Init+0x328>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x32c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d037      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a55      	ldr	r2, [pc, #340]	; (80025ac <HAL_GPIO_Init+0x338>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d025      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x33c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a53      	ldr	r2, [pc, #332]	; (80025b4 <HAL_GPIO_Init+0x340>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x22a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_GPIO_Init+0x344>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x226>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_GPIO_Init+0x348>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x222>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_GPIO_Init+0x34c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x21e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x21a>
 800248a:	2309      	movs	r3, #9
 800248c:	e012      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800248e:	230a      	movs	r3, #10
 8002490:	e010      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 8002492:	2308      	movs	r3, #8
 8002494:	e00e      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 8002496:	2307      	movs	r3, #7
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800249a:	2306      	movs	r3, #6
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_GPIO_Init+0x328>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_GPIO_Init+0x354>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <HAL_GPIO_Init+0x354>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <HAL_GPIO_Init+0x354>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <HAL_GPIO_Init+0x354>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_GPIO_Init+0x354>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <HAL_GPIO_Init+0x354>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_GPIO_Init+0x354>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_GPIO_Init+0x354>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae86 	bls.w	8002294 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40021c00 	.word	0x40021c00
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40022400 	.word	0x40022400
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002600:	b08f      	sub	sp, #60	; 0x3c
 8002602:	af0a      	add	r7, sp, #40	; 0x28
 8002604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e116      	b.n	800283e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fa52 	bl	8001ad4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fa80 	bl	8006b54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	687e      	ldr	r6, [r7, #4]
 800265c:	466d      	mov	r5, sp
 800265e:	f106 0410 	add.w	r4, r6, #16
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002672:	1d33      	adds	r3, r6, #4
 8002674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f004 fa14 	bl	8006aa4 <USB_CoreInit>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0d7      	b.n	800283e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fa6e 	bl	8006b76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e04a      	b.n	8002736 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	333d      	adds	r3, #61	; 0x3d
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	b298      	uxth	r0, r3
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3344      	adds	r3, #68	; 0x44
 80026dc:	4602      	mov	r2, r0
 80026de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3340      	adds	r3, #64	; 0x40
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3348      	adds	r3, #72	; 0x48
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	334c      	adds	r3, #76	; 0x4c
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3354      	adds	r3, #84	; 0x54
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	3301      	adds	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d3af      	bcc.n	80026a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e044      	b.n	80027d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3b5      	bcc.n	8002746 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	687e      	ldr	r6, [r7, #4]
 80027e2:	466d      	mov	r5, sp
 80027e4:	f106 0410 	add.w	r4, r6, #16
 80027e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f8:	1d33      	adds	r3, r6, #4
 80027fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	f004 fa07 	bl	8006c10 <USB_DevInit>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e014      	b.n	800283e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f80b 	bl	8002848 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f004 fbc5 	bl	8006fc6 <USB_DevDisconnect>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002848 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_PCDEx_ActivateLPM+0x44>)
 8002878:	4313      	orrs	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	10000003 	.word	0x10000003

08002890 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40007000 	.word	0x40007000

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e291      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d4:	4b96      	ldr	r3, [pc, #600]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d00c      	beq.n	80028fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e0:	4b93      	ldr	r3, [pc, #588]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d112      	bne.n	8002912 <HAL_RCC_OscConfig+0x62>
 80028ec:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f8:	d10b      	bne.n	8002912 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d06c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x130>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d168      	bne.n	80029e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e26b      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x7a>
 800291c:	4b84      	ldr	r3, [pc, #528]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a83      	ldr	r2, [pc, #524]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e02e      	b.n	8002988 <HAL_RCC_OscConfig+0xd8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x9c>
 8002932:	4b7f      	ldr	r3, [pc, #508]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7e      	ldr	r2, [pc, #504]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b7c      	ldr	r3, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7b      	ldr	r2, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xd8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0xc0>
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a75      	ldr	r2, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xd8>
 8002970:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6b      	ldr	r2, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff fa9c 	bl	8001ecc <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff fa98 	bl	8001ecc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e21f      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xe8>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff fa88 	bl	8001ecc <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7ff fa84 	bl	8001ecc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e20b      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x110>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d069      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x190>
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x17a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1df      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	493d      	ldr	r1, [pc, #244]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e040      	b.n	8002ac2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a38      	ldr	r2, [pc, #224]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff fa3a 	bl	8001ecc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fa36 	bl	8001ecc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1bd      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4929      	ldr	r1, [pc, #164]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fa16 	bl	8001ecc <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fa12 	bl	8001ecc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e199      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d038      	beq.n	8002b40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d019      	beq.n	8002b0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7ff f9f3 	bl	8001ecc <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aea:	f7ff f9ef 	bl	8001ecc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e176      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x23a>
 8002b08:	e01a      	b.n	8002b40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_RCC_OscConfig+0x280>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7ff f9d9 	bl	8001ecc <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff f9d5 	bl	8001ecc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d903      	bls.n	8002b34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e15c      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
 8002b30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b91      	ldr	r3, [pc, #580]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a4 	beq.w	8002c96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a87      	ldr	r2, [pc, #540]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b76:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b82:	4b7f      	ldr	r3, [pc, #508]	; (8002d80 <HAL_RCC_OscConfig+0x4d0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7e      	ldr	r2, [pc, #504]	; (8002d80 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff f99d 	bl	8001ecc <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7ff f999 	bl	8001ecc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e120      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba8:	4b75      	ldr	r3, [pc, #468]	; (8002d80 <HAL_RCC_OscConfig+0x4d0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x31a>
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e02d      	b.n	8002c26 <HAL_RCC_OscConfig+0x376>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x33c>
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a69      	ldr	r2, [pc, #420]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a66      	ldr	r2, [pc, #408]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e01c      	b.n	8002c26 <HAL_RCC_OscConfig+0x376>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x35e>
 8002bf4:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a60      	ldr	r2, [pc, #384]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0x376>
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a5a      	ldr	r2, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d015      	beq.n	8002c5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f94d 	bl	8001ecc <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7ff f949 	bl	8001ecc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ce      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ee      	beq.n	8002c36 <HAL_RCC_OscConfig+0x386>
 8002c58:	e014      	b.n	8002c84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7ff f937 	bl	8001ecc <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7ff f933 	bl	8001ecc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b3c      	ldr	r3, [pc, #240]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80a4 	beq.w	8002de8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d06b      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d149      	bne.n	8002d48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f904 	bl	8001ecc <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7ff f900 	bl	8001ecc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff f8d4 	bl	8001ecc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff f8d0 	bl	8001ecc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e057      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x478>
 8002d46:	e04f      	b.n	8002de8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7ff f8ba 	bl	8001ecc <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7ff f8b6 	bl	8001ecc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e03d      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4ac>
 8002d7a:	e035      	b.n	8002de8 <HAL_RCC_OscConfig+0x538>
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x544>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d0      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	4965      	ldr	r1, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d040      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e073      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4936      	ldr	r1, [pc, #216]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eec:	f7fe ffee 	bl	8001ecc <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe ffea 	bl	8001ecc <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e053      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d210      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 020f 	bic.w	r2, r3, #15
 8002f32:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1d4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe ff4a 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08008140 	.word	0x08008140
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	20000010 	.word	0x20000010

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b094      	sub	sp, #80	; 0x50
 8002fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	647b      	str	r3, [r7, #68]	; 0x44
 8002fdc:	2300      	movs	r3, #0
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe8:	4b79      	ldr	r3, [pc, #484]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d00d      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x40>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	f200 80e1 	bhi.w	80031bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x3a>
 8003002:	e0db      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003008:	e0db      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300a:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300e:	e0d8      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800301a:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d063      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	2200      	movs	r2, #0
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003030:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
 800303a:	2300      	movs	r3, #0
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
 800303e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4621      	mov	r1, r4
 800305c:	1a51      	subs	r1, r2, r1
 800305e:	6139      	str	r1, [r7, #16]
 8003060:	4629      	mov	r1, r5
 8003062:	eb63 0301 	sbc.w	r3, r3, r1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003074:	4659      	mov	r1, fp
 8003076:	018b      	lsls	r3, r1, #6
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800307e:	4651      	mov	r1, sl
 8003080:	018a      	lsls	r2, r1, #6
 8003082:	4651      	mov	r1, sl
 8003084:	ebb2 0801 	subs.w	r8, r2, r1
 8003088:	4659      	mov	r1, fp
 800308a:	eb63 0901 	sbc.w	r9, r3, r1
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800309a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030a2:	4690      	mov	r8, r2
 80030a4:	4699      	mov	r9, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	eb18 0303 	adds.w	r3, r8, r3
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	462b      	mov	r3, r5
 80030b0:	eb49 0303 	adc.w	r3, r9, r3
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030c2:	4629      	mov	r1, r5
 80030c4:	024b      	lsls	r3, r1, #9
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030cc:	4621      	mov	r1, r4
 80030ce:	024a      	lsls	r2, r1, #9
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d6:	2200      	movs	r2, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e0:	f7fd fcd4 	bl	8000a8c <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ec:	e058      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	2200      	movs	r2, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	4611      	mov	r1, r2
 80030fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	2300      	movs	r3, #0
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	f04f 0000 	mov.w	r0, #0
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	0159      	lsls	r1, r3, #5
 8003116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800311a:	0150      	lsls	r0, r2, #5
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4641      	mov	r1, r8
 8003122:	ebb2 0a01 	subs.w	sl, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb63 0b01 	sbc.w	fp, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800313c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003140:	ebb2 040a 	subs.w	r4, r2, sl
 8003144:	eb63 050b 	sbc.w	r5, r3, fp
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	00eb      	lsls	r3, r5, #3
 8003152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003156:	00e2      	lsls	r2, r4, #3
 8003158:	4614      	mov	r4, r2
 800315a:	461d      	mov	r5, r3
 800315c:	4643      	mov	r3, r8
 800315e:	18e3      	adds	r3, r4, r3
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	464b      	mov	r3, r9
 8003164:	eb45 0303 	adc.w	r3, r5, r3
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003176:	4629      	mov	r1, r5
 8003178:	028b      	lsls	r3, r1, #10
 800317a:	4621      	mov	r1, r4
 800317c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003180:	4621      	mov	r1, r4
 8003182:	028a      	lsls	r2, r1, #10
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318a:	2200      	movs	r2, #0
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	61fa      	str	r2, [r7, #28]
 8003190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003194:	f7fd fc7a 	bl	8000a8c <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3750      	adds	r7, #80	; 0x50
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	007a1200 	.word	0x007a1200

080031dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f8:	f7ff fff0 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0a9b      	lsrs	r3, r3, #10
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	08008150 	.word	0x08008150

0800321c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003220:	f7ff ffdc 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0b5b      	lsrs	r3, r3, #13
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	08008150 	.word	0x08008150

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800326c:	4b69      	ldr	r3, [pc, #420]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003276:	6093      	str	r3, [r2, #8]
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	4964      	ldr	r1, [pc, #400]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800329e:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	4959      	ldr	r1, [pc, #356]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032da:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	494a      	ldr	r1, [pc, #296]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d101      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 808b 	beq.w	800343e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6413      	str	r3, [r2, #64]	; 0x40
 8003334:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a34      	ldr	r2, [pc, #208]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe fdbe 	bl	8001ecc <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe fdba 	bl	8001ecc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e357      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d035      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	429a      	cmp	r2, r3
 800338e:	d02e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d114      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fd82 	bl	8001ecc <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe fd7e 	bl	8001ecc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e319      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fa:	d111      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800340a:	400b      	ands	r3, r1
 800340c:	4901      	ldr	r1, [pc, #4]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
 8003412:	e00b      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000
 800341c:	0ffffcff 	.word	0x0ffffcff
 8003420:	4baa      	ldr	r3, [pc, #680]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4aa9      	ldr	r2, [pc, #676]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800342a:	6093      	str	r3, [r2, #8]
 800342c:	4ba7      	ldr	r3, [pc, #668]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	49a4      	ldr	r1, [pc, #656]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	4313      	orrs	r3, r2
 800343c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800344a:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003450:	4a9e      	ldr	r2, [pc, #632]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800345a:	4b9c      	ldr	r3, [pc, #624]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	4999      	ldr	r1, [pc, #612]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003478:	4b94      	ldr	r3, [pc, #592]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	4991      	ldr	r1, [pc, #580]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800349a:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	4988      	ldr	r1, [pc, #544]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034bc:	4b83      	ldr	r3, [pc, #524]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ca:	4980      	ldr	r1, [pc, #512]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034de:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4977      	ldr	r1, [pc, #476]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003500:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	496f      	ldr	r1, [pc, #444]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003522:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 020c 	bic.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	4966      	ldr	r1, [pc, #408]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	495e      	ldr	r1, [pc, #376]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	4955      	ldr	r1, [pc, #340]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035aa:	4b48      	ldr	r3, [pc, #288]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4944      	ldr	r1, [pc, #272]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	493c      	ldr	r1, [pc, #240]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	4933      	ldr	r1, [pc, #204]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	492b      	ldr	r1, [pc, #172]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003632:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003640:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	4912      	ldr	r1, [pc, #72]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a4:	4909      	ldr	r1, [pc, #36]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d006      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80d9 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a01      	ldr	r2, [pc, #4]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d2:	f7fe fbfb 	bl	8001ecc <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036da:	f7fe fbf7 	bl	8001ecc <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e194      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d021      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	019a      	lsls	r2, r3, #6
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	071b      	lsls	r3, r3, #28
 8003740:	4957      	ldr	r1, [pc, #348]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02e      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003772:	d129      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003788:	0f1b      	lsrs	r3, r3, #28
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	071b      	lsls	r3, r3, #28
 80037a8:	493d      	ldr	r1, [pc, #244]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b6:	f023 021f 	bic.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	3b01      	subs	r3, #1
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	0e1b      	lsrs	r3, r3, #24
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e8:	0f1b      	lsrs	r3, r3, #28
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	019a      	lsls	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4925      	ldr	r1, [pc, #148]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	019a      	lsls	r2, r3, #6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	071b      	lsls	r3, r3, #28
 8003838:	4919      	ldr	r1, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fe fb3e 	bl	8001ecc <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003854:	f7fe fb3a 	bl	8001ecc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 80cd 	bne.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fe fb21 	bl	8001ecc <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800388e:	f7fe fb1d 	bl	8001ecc <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d903      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0ba      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d0ed      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e8:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4944      	ldr	r1, [pc, #272]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003916:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	493d      	ldr	r1, [pc, #244]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003944:	d11d      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	0f1b      	lsrs	r3, r3, #28
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	019a      	lsls	r2, r3, #6
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	431a      	orrs	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	4929      	ldr	r1, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d028      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	4917      	ldr	r1, [pc, #92]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4911      	ldr	r1, [pc, #68]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fe fa6e 	bl	8001ecc <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f4:	f7fe fa6a 	bl	8001ecc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e007      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a12:	d1ef      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e049      	b.n	8003aca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd ff42 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 ffae 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e054      	b.n	8003b96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d01d      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	; (8003bac <HAL_TIM_Base_Start_IT+0xd8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HAL_TIM_Base_Start_IT+0xe8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d115      	bne.n	8003b80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xec>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d015      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d011      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	e008      	b.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e000      	b.n	8003b94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40001800 	.word	0x40001800
 8003bc0:	00010007 	.word	0x00010007

08003bc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e049      	b.n	8003c6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f841 	bl	8003c72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fede 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_TIM_PWM_Start+0x24>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e03c      	b.n	8003d26 <HAL_TIM_PWM_Start+0x9e>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d109      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x3e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e02f      	b.n	8003d26 <HAL_TIM_PWM_Start+0x9e>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x58>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e022      	b.n	8003d26 <HAL_TIM_PWM_Start+0x9e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d109      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x72>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e015      	b.n	8003d26 <HAL_TIM_PWM_Start+0x9e>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start+0x8c>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e008      	b.n	8003d26 <HAL_TIM_PWM_Start+0x9e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e092      	b.n	8003e54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0xb6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e023      	b.n	8003d86 <HAL_TIM_PWM_Start+0xfe>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0xc6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e01b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xfe>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xd6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_PWM_Start+0xfe>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0xe6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xfe>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xf6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_PWM_Start+0xfe>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fada 	bl	8005348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	; (8003e5c <HAL_TIM_PWM_Start+0x1d4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_PWM_Start+0x120>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <HAL_TIM_PWM_Start+0x1d8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_PWM_Start+0x124>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_TIM_PWM_Start+0x126>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <HAL_TIM_PWM_Start+0x1d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_TIM_PWM_Start+0x1dc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <HAL_TIM_PWM_Start+0x1e0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <HAL_TIM_PWM_Start+0x1e4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_TIM_PWM_Start+0x1d8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_TIM_PWM_Start+0x1e8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x18a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <HAL_TIM_PWM_Start+0x1ec>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d115      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_TIM_PWM_Start+0x1f0>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d015      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x1c8>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2a:	d011      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	e008      	b.n	8003e50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40001800 	.word	0x40001800
 8003e78:	00010007 	.word	0x00010007

08003e7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e049      	b.n	8003f22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fcca 	bl	800183c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f000 fd82 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_IC_Start_IT+0x1e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	e023      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0x66>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_IC_Start_IT+0x2e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e01b      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0x66>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_IC_Start_IT+0x3e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e013      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0x66>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_IC_Start_IT+0x4e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	e00b      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0x66>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_IC_Start_IT+0x5e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e003      	b.n	8003f92 <HAL_TIM_IC_Start_IT+0x66>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_TIM_IC_Start_IT+0x78>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e013      	b.n	8003fcc <HAL_TIM_IC_Start_IT+0xa0>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d104      	bne.n	8003fb4 <HAL_TIM_IC_Start_IT+0x88>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e00b      	b.n	8003fcc <HAL_TIM_IC_Start_IT+0xa0>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d104      	bne.n	8003fc4 <HAL_TIM_IC_Start_IT+0x98>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e003      	b.n	8003fcc <HAL_TIM_IC_Start_IT+0xa0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fce:	7bbb      	ldrb	r3, [r7, #14]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fd4:	7b7b      	ldrb	r3, [r7, #13]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e2      	b.n	80041a4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start_IT+0xc2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	e023      	b.n	8004036 <HAL_TIM_IC_Start_IT+0x10a>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_IC_Start_IT+0xd2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	e01b      	b.n	8004036 <HAL_TIM_IC_Start_IT+0x10a>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d104      	bne.n	800400e <HAL_TIM_IC_Start_IT+0xe2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	e013      	b.n	8004036 <HAL_TIM_IC_Start_IT+0x10a>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d104      	bne.n	800401e <HAL_TIM_IC_Start_IT+0xf2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800401c:	e00b      	b.n	8004036 <HAL_TIM_IC_Start_IT+0x10a>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b10      	cmp	r3, #16
 8004022:	d104      	bne.n	800402e <HAL_TIM_IC_Start_IT+0x102>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800402c:	e003      	b.n	8004036 <HAL_TIM_IC_Start_IT+0x10a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_TIM_IC_Start_IT+0x11a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	e013      	b.n	800406e <HAL_TIM_IC_Start_IT+0x142>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d104      	bne.n	8004056 <HAL_TIM_IC_Start_IT+0x12a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004054:	e00b      	b.n	800406e <HAL_TIM_IC_Start_IT+0x142>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d104      	bne.n	8004066 <HAL_TIM_IC_Start_IT+0x13a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004064:	e003      	b.n	800406e <HAL_TIM_IC_Start_IT+0x142>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d841      	bhi.n	80040f8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <HAL_TIM_IC_Start_IT+0x150>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080040f9 	.word	0x080040f9
 8004084:	080040f9 	.word	0x080040f9
 8004088:	080040f9 	.word	0x080040f9
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040f9 	.word	0x080040f9
 8004094:	080040f9 	.word	0x080040f9
 8004098:	080040f9 	.word	0x080040f9
 800409c:	080040d5 	.word	0x080040d5
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	080040f9 	.word	0x080040f9
 80040ac:	080040e7 	.word	0x080040e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0202 	orr.w	r2, r2, #2
 80040be:	60da      	str	r2, [r3, #12]
      break;
 80040c0:	e01d      	b.n	80040fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0204 	orr.w	r2, r2, #4
 80040d0:	60da      	str	r2, [r3, #12]
      break;
 80040d2:	e014      	b.n	80040fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	60da      	str	r2, [r3, #12]
      break;
 80040e4:	e00b      	b.n	80040fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0210 	orr.w	r2, r2, #16
 80040f4:	60da      	str	r2, [r3, #12]
      break;
 80040f6:	e002      	b.n	80040fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      break;
 80040fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d14e      	bne.n	80041a2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f91b 	bl	8005348 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <HAL_TIM_IC_Start_IT+0x280>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d01d      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <HAL_TIM_IC_Start_IT+0x284>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_TIM_IC_Start_IT+0x288>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_TIM_IC_Start_IT+0x290>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_TIM_IC_Start_IT+0x294>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIM_IC_Start_IT+0x236>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_TIM_IC_Start_IT+0x298>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d115      	bne.n	800418e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_TIM_IC_Start_IT+0x29c>)
 800416a:	4013      	ands	r3, r2
 800416c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b06      	cmp	r3, #6
 8004172:	d015      	beq.n	80041a0 <HAL_TIM_IC_Start_IT+0x274>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417a:	d011      	beq.n	80041a0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e008      	b.n	80041a0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e000      	b.n	80041a2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40010400 	.word	0x40010400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40001800 	.word	0x40001800
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0202 	mvn.w	r2, #2
 80041f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fdba 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fbb6 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fbbd 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0204 	mvn.w	r2, #4
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fd90 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fb8c 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb93 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b08      	cmp	r3, #8
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0208 	mvn.w	r2, #8
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2204      	movs	r2, #4
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fd66 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fb62 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb69 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0210 	mvn.w	r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2208      	movs	r2, #8
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc fd3c 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fb38 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fb3f 	bl	800499c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0201 	mvn.w	r2, #1
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fe3c 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 f8a4 	bl	80054c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d10e      	bne.n	80043aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d107      	bne.n	80043aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 f897 	bl	80054d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d10e      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 faed 	bl	80049b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d107      	bne.n	8004402 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0220 	mvn.w	r2, #32
 80043fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 f857 	bl	80054b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004424:	2302      	movs	r3, #2
 8004426:	e088      	b.n	800453a <HAL_TIM_IC_ConfigChannel+0x130>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11b      	bne.n	800446e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004446:	f000 fdbb 	bl	8004fc0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 020c 	bic.w	r2, r2, #12
 8004458:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	619a      	str	r2, [r3, #24]
 800446c:	e060      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d11c      	bne.n	80044ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004484:	f000 fe3f 	bl	8005106 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004496:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6999      	ldr	r1, [r3, #24]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	619a      	str	r2, [r3, #24]
 80044ac:	e040      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80044c4:	f000 fe8c 	bl	80051e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020c 	bic.w	r2, r2, #12
 80044d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69d9      	ldr	r1, [r3, #28]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	61da      	str	r2, [r3, #28]
 80044ea:	e021      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d11c      	bne.n	800452c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004502:	f000 fea9 	bl	8005258 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004514:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69d9      	ldr	r1, [r3, #28]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	61da      	str	r2, [r3, #28]
 800452a:	e001      	b.n	8004530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e0ff      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b14      	cmp	r3, #20
 800456e:	f200 80f0 	bhi.w	8004752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	080045cd 	.word	0x080045cd
 800457c:	08004753 	.word	0x08004753
 8004580:	08004753 	.word	0x08004753
 8004584:	08004753 	.word	0x08004753
 8004588:	0800460d 	.word	0x0800460d
 800458c:	08004753 	.word	0x08004753
 8004590:	08004753 	.word	0x08004753
 8004594:	08004753 	.word	0x08004753
 8004598:	0800464f 	.word	0x0800464f
 800459c:	08004753 	.word	0x08004753
 80045a0:	08004753 	.word	0x08004753
 80045a4:	08004753 	.word	0x08004753
 80045a8:	0800468f 	.word	0x0800468f
 80045ac:	08004753 	.word	0x08004753
 80045b0:	08004753 	.word	0x08004753
 80045b4:	08004753 	.word	0x08004753
 80045b8:	080046d1 	.word	0x080046d1
 80045bc:	08004753 	.word	0x08004753
 80045c0:	08004753 	.word	0x08004753
 80045c4:	08004753 	.word	0x08004753
 80045c8:	08004711 	.word	0x08004711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa96 	bl	8004b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	619a      	str	r2, [r3, #24]
      break;
 800460a:	e0a5      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fae8 	bl	8004be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]
      break;
 800464c:	e084      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fb3f 	bl	8004cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0208 	orr.w	r2, r2, #8
 8004668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0204 	bic.w	r2, r2, #4
 8004678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
      break;
 800468c:	e064      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb95 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69d9      	ldr	r1, [r3, #28]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	021a      	lsls	r2, r3, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	61da      	str	r2, [r3, #28]
      break;
 80046ce:	e043      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fbcc 	bl	8004e74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0204 	bic.w	r2, r2, #4
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800470e:	e023      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fbfe 	bl	8004f18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004750:	e002      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
      break;
 8004756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop

0800476c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIM_ConfigClockSource+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e0b4      	b.n	80048f2 <HAL_TIM_ConfigClockSource+0x186>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	4b56      	ldr	r3, [pc, #344]	; (80048fc <HAL_TIM_ConfigClockSource+0x190>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c0:	d03e      	beq.n	8004840 <HAL_TIM_ConfigClockSource+0xd4>
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	f200 8087 	bhi.w	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	f000 8086 	beq.w	80048de <HAL_TIM_ConfigClockSource+0x172>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	d87f      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b70      	cmp	r3, #112	; 0x70
 80047da:	d01a      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0xa6>
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d87b      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b60      	cmp	r3, #96	; 0x60
 80047e2:	d050      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x11a>
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d877      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b50      	cmp	r3, #80	; 0x50
 80047ea:	d03c      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0xfa>
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d873      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d058      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x13a>
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d86f      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b30      	cmp	r3, #48	; 0x30
 80047fa:	d064      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x15a>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d86b      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d060      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d867      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05c      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b10      	cmp	r3, #16
 800480e:	d05a      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	e062      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	f000 fd71 	bl	8005308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	609a      	str	r2, [r3, #8]
      break;
 800483e:	e04f      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004850:	f000 fd5a 	bl	8005308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004862:	609a      	str	r2, [r3, #8]
      break;
 8004864:	e03c      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	461a      	mov	r2, r3
 8004874:	f000 fc18 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2150      	movs	r1, #80	; 0x50
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fd27 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004884:	e02c      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004892:	461a      	mov	r2, r3
 8004894:	f000 fc74 	bl	8005180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2160      	movs	r1, #96	; 0x60
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fd17 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80048a4:	e01c      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 fbf8 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd07 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80048c4:	e00c      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f000 fcfe 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80048d6:	e003      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      break;
 80048dc:	e000      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	fffeff88 	.word	0xfffeff88

08004900 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d831      	bhi.n	8004978 <HAL_TIM_ReadCapturedValue+0x78>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004951 	.word	0x08004951
 8004920:	08004979 	.word	0x08004979
 8004924:	08004979 	.word	0x08004979
 8004928:	08004979 	.word	0x08004979
 800492c:	0800495b 	.word	0x0800495b
 8004930:	08004979 	.word	0x08004979
 8004934:	08004979 	.word	0x08004979
 8004938:	08004979 	.word	0x08004979
 800493c:	08004965 	.word	0x08004965
 8004940:	08004979 	.word	0x08004979
 8004944:	08004979 	.word	0x08004979
 8004948:	08004979 	.word	0x08004979
 800494c:	0800496f 	.word	0x0800496f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	60fb      	str	r3, [r7, #12]

      break;
 8004958:	e00f      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	60fb      	str	r3, [r7, #12]

      break;
 8004962:	e00a      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	60fb      	str	r3, [r7, #12]

      break;
 800496c:	e005      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	60fb      	str	r3, [r7, #12]

      break;
 8004976:	e000      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004978:	bf00      	nop
  }

  return tmpreg;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a40      	ldr	r2, [pc, #256]	; (8004ad8 <TIM_Base_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00f      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a3d      	ldr	r2, [pc, #244]	; (8004adc <TIM_Base_SetConfig+0x118>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3c      	ldr	r2, [pc, #240]	; (8004ae0 <TIM_Base_SetConfig+0x11c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <TIM_Base_SetConfig+0x120>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <TIM_Base_SetConfig+0x124>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <TIM_Base_SetConfig+0x114>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02b      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d027      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <TIM_Base_SetConfig+0x118>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d023      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <TIM_Base_SetConfig+0x11c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01f      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <TIM_Base_SetConfig+0x120>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01b      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <TIM_Base_SetConfig+0x124>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d017      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a28      	ldr	r2, [pc, #160]	; (8004aec <TIM_Base_SetConfig+0x128>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a27      	ldr	r2, [pc, #156]	; (8004af0 <TIM_Base_SetConfig+0x12c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a26      	ldr	r2, [pc, #152]	; (8004af4 <TIM_Base_SetConfig+0x130>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <TIM_Base_SetConfig+0x134>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a24      	ldr	r2, [pc, #144]	; (8004afc <TIM_Base_SetConfig+0x138>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <TIM_Base_SetConfig+0x13c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d108      	bne.n	8004a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <TIM_Base_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_Base_SetConfig+0xf8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <TIM_Base_SetConfig+0x124>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d103      	bne.n	8004ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800
 8004af8:	40001800 	.word	0x40001800
 8004afc:	40001c00 	.word	0x40001c00
 8004b00:	40002000 	.word	0x40002000

08004b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <TIM_OC1_SetConfig+0xd8>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0302 	bic.w	r3, r3, #2
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <TIM_OC1_SetConfig+0xdc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC1_SetConfig+0x64>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <TIM_OC1_SetConfig+0xe0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10c      	bne.n	8004b82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0308 	bic.w	r3, r3, #8
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <TIM_OC1_SetConfig+0xdc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC1_SetConfig+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <TIM_OC1_SetConfig+0xe0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d111      	bne.n	8004bb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	fffeff8f 	.word	0xfffeff8f
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40010400 	.word	0x40010400

08004be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <TIM_OC2_SetConfig+0xe4>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <TIM_OC2_SetConfig+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC2_SetConfig+0x68>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <TIM_OC2_SetConfig+0xec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10d      	bne.n	8004c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <TIM_OC2_SetConfig+0xe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC2_SetConfig+0x94>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <TIM_OC2_SetConfig+0xec>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d113      	bne.n	8004ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	feff8fff 	.word	0xfeff8fff
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <TIM_OC3_SetConfig+0xe0>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <TIM_OC3_SetConfig+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_OC3_SetConfig+0x66>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <TIM_OC3_SetConfig+0xe8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10d      	bne.n	8004d5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <TIM_OC3_SetConfig+0xe4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_OC3_SetConfig+0x92>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <TIM_OC3_SetConfig+0xe8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d113      	bne.n	8004d92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	fffeff8f 	.word	0xfffeff8f
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40010400 	.word	0x40010400

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <TIM_OC4_SetConfig+0xa4>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <TIM_OC4_SetConfig+0xa8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_OC4_SetConfig+0x68>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <TIM_OC4_SetConfig+0xac>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d109      	bne.n	8004e40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	feff8fff 	.word	0xfeff8fff
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <TIM_OC5_SetConfig+0x98>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004eb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <TIM_OC5_SetConfig+0x9c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC5_SetConfig+0x5e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <TIM_OC5_SetConfig+0xa0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d109      	bne.n	8004ee6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	fffeff8f 	.word	0xfffeff8f
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40010400 	.word	0x40010400

08004f18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <TIM_OC6_SetConfig+0x9c>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	051b      	lsls	r3, r3, #20
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <TIM_OC6_SetConfig+0xa0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC6_SetConfig+0x60>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <TIM_OC6_SetConfig+0xa4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d109      	bne.n	8004f8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	feff8fff 	.word	0xfeff8fff
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	; (800508c <TIM_TI1_SetConfig+0xcc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d017      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a25      	ldr	r2, [pc, #148]	; (8005090 <TIM_TI1_SetConfig+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a24      	ldr	r2, [pc, #144]	; (8005094 <TIM_TI1_SetConfig+0xd4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <TIM_TI1_SetConfig+0xd8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a22      	ldr	r2, [pc, #136]	; (800509c <TIM_TI1_SetConfig+0xdc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <TIM_TI1_SetConfig+0xe0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <TIM_TI1_SetConfig+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <TIM_TI1_SetConfig+0x6a>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <TIM_TI1_SetConfig+0x6c>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e003      	b.n	800504a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	b2db      	uxtb	r3, r3
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f023 030a 	bic.w	r3, r3, #10
 8005064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f003 030a 	and.w	r3, r3, #10
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 030a 	bic.w	r3, r3, #10
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005106:	b480      	push	{r7}
 8005108:	b087      	sub	sp, #28
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f023 0210 	bic.w	r2, r3, #16
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	b29b      	uxth	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005158:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	031b      	lsls	r3, r3, #12
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	b2db      	uxtb	r3, r3
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	b29b      	uxth	r3, r3
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	031b      	lsls	r3, r3, #12
 80052b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2201      	movs	r2, #1
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	43db      	mvns	r3, r3
 800536a:	401a      	ands	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	fa01 f303 	lsl.w	r3, r1, r3
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e06d      	b.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a30      	ldr	r2, [pc, #192]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2f      	ldr	r2, [pc, #188]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a20      	ldr	r2, [pc, #128]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d022      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d01d      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1d      	ldr	r2, [pc, #116]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000
 8005498:	40010400 	.word	0x40010400
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40001800 	.word	0x40001800

080054b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e040      	b.n	8005580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fa78 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	; 0x24
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fbe6 	bl	8005cfc <UART_SetConfig>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e022      	b.n	8005580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fe3e 	bl	80061c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fec5 	bl	8006308 <UART_CheckIdleState>
 800557e:	4603      	mov	r3, r0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559c:	2b20      	cmp	r3, #32
 800559e:	d171      	bne.n	8005684 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Transmit+0x24>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e06a      	b.n	8005686 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2221      	movs	r2, #33	; 0x21
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055be:	f7fc fc85 	bl	8001ecc <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055dc:	d108      	bne.n	80055f0 <HAL_UART_Transmit+0x68>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e003      	b.n	80055f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055f8:	e02c      	b.n	8005654 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 feb6 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e038      	b.n	8005686 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	3302      	adds	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e007      	b.n	8005642 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cc      	bne.n	80055fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	2140      	movs	r1, #64	; 0x40
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fe83 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e005      	b.n	8005686 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b08a      	sub	sp, #40	; 0x28
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	4613      	mov	r3, r2
 800569a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d132      	bne.n	800570c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_UART_Receive_IT+0x24>
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e02b      	b.n	800570e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	613b      	str	r3, [r7, #16]
   return(result);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	69f9      	ldr	r1, [r7, #28]
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	461a      	mov	r2, r3
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fefe 	bl	8006504 <UART_Start_Receive_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	e000      	b.n	800570e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3728      	adds	r7, #40	; 0x28
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b0ba      	sub	sp, #232	; 0xe8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800573e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005742:	f640 030f 	movw	r3, #2063	; 0x80f
 8005746:	4013      	ands	r3, r2
 8005748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800574c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d115      	bne.n	8005780 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8297 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
      }
      return;
 800577e:	e291      	b.n	8005ca4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8117 	beq.w	80059b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800579a:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <HAL_UART_IRQHandler+0x298>)
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 810a 	beq.w	80059b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_UART_IRQHandler+0xbc>
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <HAL_UART_IRQHandler+0xec>
 80057e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2202      	movs	r2, #2
 80057f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d011      	beq.n	8005834 <HAL_UART_IRQHandler+0x11c>
 8005810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2204      	movs	r2, #4
 8005822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582a:	f043 0202 	orr.w	r2, r3, #2
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800584c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_UART_IRQHandler+0x18a>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 81fd 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fec8 	bl	8006690 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d141      	bne.n	8005992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800593a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800593e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1d9      	bne.n	800590e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595e:	2b00      	cmp	r3, #0
 8005960:	d013      	beq.n	800598a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005966:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <HAL_UART_IRQHandler+0x29c>)
 8005968:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fc5d 	bl	800222e <HAL_DMA_Abort_IT>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005984:	4610      	mov	r0, r2
 8005986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00f      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9a0 	bl	8005cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e00b      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f99c 	bl	8005cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e007      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f998 	bl	8005cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80059a8:	e17e      	b.n	8005ca8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059aa:	bf00      	nop
    return;
 80059ac:	e17c      	b.n	8005ca8 <HAL_UART_IRQHandler+0x590>
 80059ae:	bf00      	nop
 80059b0:	04000120 	.word	0x04000120
 80059b4:	08006759 	.word	0x08006759

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 814c 	bne.w	8005c5a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8145 	beq.w	8005c5a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 813e 	beq.w	8005c5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2210      	movs	r2, #16
 80059e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	f040 80b6 	bne.w	8005b62 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8150 	beq.w	8005cac <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f080 8148 	bcs.w	8005cac <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a30:	f000 8086 	beq.w	8005b40 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1da      	bne.n	8005a34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3308      	adds	r3, #8
 8005a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e1      	bne.n	8005a7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ae4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e4      	bne.n	8005b00 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc fb07 	bl	800214e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8c2 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b60:	e0a4      	b.n	8005cac <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8096 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8091 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e4      	bne.n	8005b8e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005be8:	633a      	str	r2, [r7, #48]	; 0x30
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e3      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0310 	bic.w	r3, r3, #16
 8005c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	69b9      	ldr	r1, [r7, #24]
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e4      	bne.n	8005c10 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f846 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c58:	e02a      	b.n	8005cb0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01c      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
    }
    return;
 8005c82:	e017      	b.n	8005cb4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fd71 	bl	8006784 <UART_EndTransmit_IT>
    return;
 8005ca2:	e008      	b.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005ca4:	bf00      	nop
 8005ca6:	e006      	b.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005ca8:	bf00      	nop
 8005caa:	e004      	b.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005cac:	bf00      	nop
 8005cae:	e002      	b.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005cb4:	bf00      	nop
  }

}
 8005cb6:	37e8      	adds	r7, #232	; 0xe8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4ba6      	ldr	r3, [pc, #664]	; (8005fc0 <UART_SetConfig+0x2c4>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a94      	ldr	r2, [pc, #592]	; (8005fc4 <UART_SetConfig+0x2c8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d120      	bne.n	8005dba <UART_SetConfig+0xbe>
 8005d78:	4b93      	ldr	r3, [pc, #588]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d816      	bhi.n	8005db4 <UART_SetConfig+0xb8>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x90>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005da3 	.word	0x08005da3
 8005d98:	08005daf 	.word	0x08005daf
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e150      	b.n	8006044 <UART_SetConfig+0x348>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e14d      	b.n	8006044 <UART_SetConfig+0x348>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e14a      	b.n	8006044 <UART_SetConfig+0x348>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e147      	b.n	8006044 <UART_SetConfig+0x348>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e144      	b.n	8006044 <UART_SetConfig+0x348>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a83      	ldr	r2, [pc, #524]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d132      	bne.n	8005e2a <UART_SetConfig+0x12e>
 8005dc4:	4b80      	ldr	r3, [pc, #512]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d828      	bhi.n	8005e24 <UART_SetConfig+0x128>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0xdc>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e13 	.word	0x08005e13
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e1f 	.word	0x08005e1f
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e118      	b.n	8006044 <UART_SetConfig+0x348>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e115      	b.n	8006044 <UART_SetConfig+0x348>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e112      	b.n	8006044 <UART_SetConfig+0x348>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e10f      	b.n	8006044 <UART_SetConfig+0x348>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e10c      	b.n	8006044 <UART_SetConfig+0x348>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <UART_SetConfig+0x2d4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d120      	bne.n	8005e76 <UART_SetConfig+0x17a>
 8005e34:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d013      	beq.n	8005e6a <UART_SetConfig+0x16e>
 8005e42:	2b30      	cmp	r3, #48	; 0x30
 8005e44:	d814      	bhi.n	8005e70 <UART_SetConfig+0x174>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d009      	beq.n	8005e5e <UART_SetConfig+0x162>
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d810      	bhi.n	8005e70 <UART_SetConfig+0x174>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <UART_SetConfig+0x15c>
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d006      	beq.n	8005e64 <UART_SetConfig+0x168>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x174>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0f2      	b.n	8006044 <UART_SetConfig+0x348>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e0ef      	b.n	8006044 <UART_SetConfig+0x348>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e0ec      	b.n	8006044 <UART_SetConfig+0x348>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e0e9      	b.n	8006044 <UART_SetConfig+0x348>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e0e6      	b.n	8006044 <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <UART_SetConfig+0x2d8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d120      	bne.n	8005ec2 <UART_SetConfig+0x1c6>
 8005e80:	4b51      	ldr	r3, [pc, #324]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e8c:	d013      	beq.n	8005eb6 <UART_SetConfig+0x1ba>
 8005e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e90:	d814      	bhi.n	8005ebc <UART_SetConfig+0x1c0>
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d009      	beq.n	8005eaa <UART_SetConfig+0x1ae>
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d810      	bhi.n	8005ebc <UART_SetConfig+0x1c0>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1a8>
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d006      	beq.n	8005eb0 <UART_SetConfig+0x1b4>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x1c0>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e0cc      	b.n	8006044 <UART_SetConfig+0x348>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e0c9      	b.n	8006044 <UART_SetConfig+0x348>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0c6      	b.n	8006044 <UART_SetConfig+0x348>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0c3      	b.n	8006044 <UART_SetConfig+0x348>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0c0      	b.n	8006044 <UART_SetConfig+0x348>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a44      	ldr	r2, [pc, #272]	; (8005fd8 <UART_SetConfig+0x2dc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d125      	bne.n	8005f18 <UART_SetConfig+0x21c>
 8005ecc:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eda:	d017      	beq.n	8005f0c <UART_SetConfig+0x210>
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d817      	bhi.n	8005f12 <UART_SetConfig+0x216>
 8005ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x204>
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d811      	bhi.n	8005f12 <UART_SetConfig+0x216>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <UART_SetConfig+0x1fe>
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x20a>
 8005ef8:	e00b      	b.n	8005f12 <UART_SetConfig+0x216>
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e0a1      	b.n	8006044 <UART_SetConfig+0x348>
 8005f00:	2302      	movs	r3, #2
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e09e      	b.n	8006044 <UART_SetConfig+0x348>
 8005f06:	2304      	movs	r3, #4
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e09b      	b.n	8006044 <UART_SetConfig+0x348>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e098      	b.n	8006044 <UART_SetConfig+0x348>
 8005f12:	2310      	movs	r3, #16
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e095      	b.n	8006044 <UART_SetConfig+0x348>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <UART_SetConfig+0x2e0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d125      	bne.n	8005f6e <UART_SetConfig+0x272>
 8005f22:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f30:	d017      	beq.n	8005f62 <UART_SetConfig+0x266>
 8005f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f36:	d817      	bhi.n	8005f68 <UART_SetConfig+0x26c>
 8005f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3c:	d00b      	beq.n	8005f56 <UART_SetConfig+0x25a>
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d811      	bhi.n	8005f68 <UART_SetConfig+0x26c>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <UART_SetConfig+0x254>
 8005f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4c:	d006      	beq.n	8005f5c <UART_SetConfig+0x260>
 8005f4e:	e00b      	b.n	8005f68 <UART_SetConfig+0x26c>
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e076      	b.n	8006044 <UART_SetConfig+0x348>
 8005f56:	2302      	movs	r3, #2
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e073      	b.n	8006044 <UART_SetConfig+0x348>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e070      	b.n	8006044 <UART_SetConfig+0x348>
 8005f62:	2308      	movs	r3, #8
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e06d      	b.n	8006044 <UART_SetConfig+0x348>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e06a      	b.n	8006044 <UART_SetConfig+0x348>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <UART_SetConfig+0x2e4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d138      	bne.n	8005fea <UART_SetConfig+0x2ee>
 8005f78:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f86:	d017      	beq.n	8005fb8 <UART_SetConfig+0x2bc>
 8005f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f8c:	d82a      	bhi.n	8005fe4 <UART_SetConfig+0x2e8>
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f92:	d00b      	beq.n	8005fac <UART_SetConfig+0x2b0>
 8005f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f98:	d824      	bhi.n	8005fe4 <UART_SetConfig+0x2e8>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <UART_SetConfig+0x2aa>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d006      	beq.n	8005fb2 <UART_SetConfig+0x2b6>
 8005fa4:	e01e      	b.n	8005fe4 <UART_SetConfig+0x2e8>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e04b      	b.n	8006044 <UART_SetConfig+0x348>
 8005fac:	2302      	movs	r3, #2
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e048      	b.n	8006044 <UART_SetConfig+0x348>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e045      	b.n	8006044 <UART_SetConfig+0x348>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e042      	b.n	8006044 <UART_SetConfig+0x348>
 8005fbe:	bf00      	nop
 8005fc0:	efff69f3 	.word	0xefff69f3
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40004400 	.word	0x40004400
 8005fd0:	40004800 	.word	0x40004800
 8005fd4:	40004c00 	.word	0x40004c00
 8005fd8:	40005000 	.word	0x40005000
 8005fdc:	40011400 	.word	0x40011400
 8005fe0:	40007800 	.word	0x40007800
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e02c      	b.n	8006044 <UART_SetConfig+0x348>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a72      	ldr	r2, [pc, #456]	; (80061b8 <UART_SetConfig+0x4bc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d125      	bne.n	8006040 <UART_SetConfig+0x344>
 8005ff4:	4b71      	ldr	r3, [pc, #452]	; (80061bc <UART_SetConfig+0x4c0>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006002:	d017      	beq.n	8006034 <UART_SetConfig+0x338>
 8006004:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006008:	d817      	bhi.n	800603a <UART_SetConfig+0x33e>
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600e:	d00b      	beq.n	8006028 <UART_SetConfig+0x32c>
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	d811      	bhi.n	800603a <UART_SetConfig+0x33e>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <UART_SetConfig+0x326>
 800601a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800601e:	d006      	beq.n	800602e <UART_SetConfig+0x332>
 8006020:	e00b      	b.n	800603a <UART_SetConfig+0x33e>
 8006022:	2300      	movs	r3, #0
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e00d      	b.n	8006044 <UART_SetConfig+0x348>
 8006028:	2302      	movs	r3, #2
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e00a      	b.n	8006044 <UART_SetConfig+0x348>
 800602e:	2304      	movs	r3, #4
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e007      	b.n	8006044 <UART_SetConfig+0x348>
 8006034:	2308      	movs	r3, #8
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e004      	b.n	8006044 <UART_SetConfig+0x348>
 800603a:	2310      	movs	r3, #16
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e001      	b.n	8006044 <UART_SetConfig+0x348>
 8006040:	2310      	movs	r3, #16
 8006042:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604c:	d15b      	bne.n	8006106 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800604e:	7ffb      	ldrb	r3, [r7, #31]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d828      	bhi.n	80060a6 <UART_SetConfig+0x3aa>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x360>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	08006089 	.word	0x08006089
 8006064:	08006091 	.word	0x08006091
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006097 	.word	0x08006097
 8006070:	080060a7 	.word	0x080060a7
 8006074:	080060a7 	.word	0x080060a7
 8006078:	080060a7 	.word	0x080060a7
 800607c:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fd f8b8 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8006084:	61b8      	str	r0, [r7, #24]
        break;
 8006086:	e013      	b.n	80060b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fd f8c8 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 800608c:	61b8      	str	r0, [r7, #24]
        break;
 800608e:	e00f      	b.n	80060b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <UART_SetConfig+0x4c4>)
 8006092:	61bb      	str	r3, [r7, #24]
        break;
 8006094:	e00c      	b.n	80060b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fc ff9b 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 800609a:	61b8      	str	r0, [r7, #24]
        break;
 800609c:	e008      	b.n	80060b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	61bb      	str	r3, [r7, #24]
        break;
 80060a4:	e004      	b.n	80060b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	77bb      	strb	r3, [r7, #30]
        break;
 80060ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d074      	beq.n	80061a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	005a      	lsls	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	085b      	lsrs	r3, r3, #1
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b0f      	cmp	r3, #15
 80060d0:	d916      	bls.n	8006100 <UART_SetConfig+0x404>
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d8:	d212      	bcs.n	8006100 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f023 030f 	bic.w	r3, r3, #15
 80060e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	89fb      	ldrh	r3, [r7, #14]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	89fa      	ldrh	r2, [r7, #14]
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	e04f      	b.n	80061a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	77bb      	strb	r3, [r7, #30]
 8006104:	e04c      	b.n	80061a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006106:	7ffb      	ldrb	r3, [r7, #31]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d828      	bhi.n	800615e <UART_SetConfig+0x462>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <UART_SetConfig+0x418>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
 8006134:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fd f85c 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 800613c:	61b8      	str	r0, [r7, #24]
        break;
 800613e:	e013      	b.n	8006168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fd f86c 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8006144:	61b8      	str	r0, [r7, #24]
        break;
 8006146:	e00f      	b.n	8006168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <UART_SetConfig+0x4c4>)
 800614a:	61bb      	str	r3, [r7, #24]
        break;
 800614c:	e00c      	b.n	8006168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fc ff3f 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8006152:	61b8      	str	r0, [r7, #24]
        break;
 8006154:	e008      	b.n	8006168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615a:	61bb      	str	r3, [r7, #24]
        break;
 800615c:	e004      	b.n	8006168 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	77bb      	strb	r3, [r7, #30]
        break;
 8006166:	bf00      	nop
    }

    if (pclk != 0U)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d018      	beq.n	80061a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	085a      	lsrs	r2, r3, #1
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	441a      	add	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b0f      	cmp	r3, #15
 8006186:	d909      	bls.n	800619c <UART_SetConfig+0x4a0>
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618e:	d205      	bcs.n	800619c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e001      	b.n	80061a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40007c00 	.word	0x40007c00
 80061bc:	40023800 	.word	0x40023800
 80061c0:	00f42400 	.word	0x00f42400

080061c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01a      	beq.n	80062da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c2:	d10a      	bne.n	80062da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006318:	f7fb fdd8 	bl	8001ecc <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d10e      	bne.n	800634a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800632c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f81b 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e011      	b.n	800636e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b09c      	sub	sp, #112	; 0x70
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006386:	e0a7      	b.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	f000 80a3 	beq.w	80064d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fb fd9b 	bl	8001ecc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80063a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d13f      	bne.n	8006428 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063bc:	667b      	str	r3, [r7, #100]	; 0x64
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e068      	b.n	80064fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d050      	beq.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006444:	d148      	bne.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
 8006470:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e6      	bne.n	8006450 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	613b      	str	r3, [r7, #16]
   return(result);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064a2:	623a      	str	r2, [r7, #32]
 80064a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	69f9      	ldr	r1, [r7, #28]
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e010      	b.n	80064fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69da      	ldr	r2, [r3, #28]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	f43f af48 	beq.w	8006388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3770      	adds	r7, #112	; 0x70
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006504:	b480      	push	{r7}
 8006506:	b097      	sub	sp, #92	; 0x5c
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	d10e      	bne.n	8006556 <UART_Start_Receive_IT+0x52>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <UART_Start_Receive_IT+0x48>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800654a:	e02d      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	22ff      	movs	r2, #255	; 0xff
 8006550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006554:	e028      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <UART_Start_Receive_IT+0x76>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <UART_Start_Receive_IT+0x6c>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	22ff      	movs	r2, #255	; 0xff
 800656a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800656e:	e01b      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	227f      	movs	r2, #127	; 0x7f
 8006574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006578:	e016      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006582:	d10d      	bne.n	80065a0 <UART_Start_Receive_IT+0x9c>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <UART_Start_Receive_IT+0x92>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	227f      	movs	r2, #127	; 0x7f
 8006590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006594:	e008      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	223f      	movs	r2, #63	; 0x3f
 800659a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800659e:	e003      	b.n	80065a8 <UART_Start_Receive_IT+0xa4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2222      	movs	r2, #34	; 0x22
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	657b      	str	r3, [r7, #84]	; 0x54
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80065da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d107      	bne.n	8006606 <UART_Start_Receive_IT+0x102>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <UART_Start_Receive_IT+0x184>)
 8006602:	669a      	str	r2, [r3, #104]	; 0x68
 8006604:	e002      	b.n	800660c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a20      	ldr	r2, [pc, #128]	; (800668c <UART_Start_Receive_IT+0x188>)
 800660a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d019      	beq.n	8006648 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e6      	bne.n	8006614 <UART_Start_Receive_IT+0x110>
 8006646:	e018      	b.n	800667a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	613b      	str	r3, [r7, #16]
   return(result);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f043 0320 	orr.w	r3, r3, #32
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	61bb      	str	r3, [r7, #24]
   return(result);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	375c      	adds	r7, #92	; 0x5c
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	0800693f 	.word	0x0800693f
 800668c:	080067d9 	.word	0x080067d9

08006690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b095      	sub	sp, #84	; 0x54
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
 80066b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e6      	bne.n	8006698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e5      	bne.n	80066ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	2b01      	cmp	r3, #1
 8006704:	d118      	bne.n	8006738 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60bb      	str	r3, [r7, #8]
   return(result);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	613b      	str	r3, [r7, #16]
   return(result);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800674c:	bf00      	nop
 800674e:	3754      	adds	r7, #84	; 0x54
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff faaa 	bl	8005cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60bb      	str	r3, [r7, #8]
   return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e6      	bne.n	800678c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fa76 	bl	8005cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d0:	bf00      	nop
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b096      	sub	sp, #88	; 0x58
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f0:	2b22      	cmp	r3, #34	; 0x22
 80067f2:	f040 8098 	bne.w	8006926 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006800:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006804:	b2d9      	uxtb	r1, r3
 8006806:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800680a:	b2da      	uxtb	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	400a      	ands	r2, r1
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d17b      	bne.n	8006936 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006852:	653b      	str	r3, [r7, #80]	; 0x50
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e6      	bne.n	800683e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	623b      	str	r3, [r7, #32]
   return(result);
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006890:	633a      	str	r2, [r7, #48]	; 0x30
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d12e      	bne.n	800691e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	64bb      	str	r3, [r7, #72]	; 0x48
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	69b9      	ldr	r1, [r7, #24]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	617b      	str	r3, [r7, #20]
   return(result);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b10      	cmp	r3, #16
 8006904:	d103      	bne.n	800690e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2210      	movs	r2, #16
 800690c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff f9e4 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800691c:	e00b      	b.n	8006936 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fa fb24 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006924:	e007      	b.n	8006936 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0208 	orr.w	r2, r2, #8
 8006934:	619a      	str	r2, [r3, #24]
}
 8006936:	bf00      	nop
 8006938:	3758      	adds	r7, #88	; 0x58
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b096      	sub	sp, #88	; 0x58
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800694c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006956:	2b22      	cmp	r3, #34	; 0x22
 8006958:	f040 8098 	bne.w	8006a8c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800696c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006974:	4013      	ands	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006980:	1c9a      	adds	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d17b      	bne.n	8006a9c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c2:	643b      	str	r3, [r7, #64]	; 0x40
 80069c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d12e      	bne.n	8006a84 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6979      	ldr	r1, [r7, #20]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	613b      	str	r3, [r7, #16]
   return(result);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d103      	bne.n	8006a74 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2210      	movs	r2, #16
 8006a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff f931 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a82:	e00b      	b.n	8006a9c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fa fa71 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006a8a:	e007      	b.n	8006a9c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0208 	orr.w	r2, r2, #8
 8006a9a:	619a      	str	r2, [r3, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	3758      	adds	r7, #88	; 0x58
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	f107 001c 	add.w	r0, r7, #28
 8006ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d120      	bne.n	8006afe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <USB_CoreInit+0xac>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d105      	bne.n	8006af2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa96 	bl	8007024 <USB_CoreReset>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	e010      	b.n	8006b20 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa8a 	bl	8007024 <USB_CoreReset>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10b      	bne.n	8006b3e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f043 0206 	orr.w	r2, r3, #6
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b4a:	b004      	add	sp, #16
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	ffbdffbf 	.word	0xffbdffbf

08006b54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f023 0201 	bic.w	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d115      	bne.n	8006bc4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	f7fb f99d 	bl	8001ee4 <HAL_Delay>
      ms++;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa29 	bl	8007008 <USB_GetMode>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d01e      	beq.n	8006bfa <USB_SetCurrentMode+0x84>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b31      	cmp	r3, #49	; 0x31
 8006bc0:	d9f0      	bls.n	8006ba4 <USB_SetCurrentMode+0x2e>
 8006bc2:	e01a      	b.n	8006bfa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d115      	bne.n	8006bf6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f7fb f984 	bl	8001ee4 <HAL_Delay>
      ms++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa10 	bl	8007008 <USB_GetMode>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <USB_SetCurrentMode+0x84>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b31      	cmp	r3, #49	; 0x31
 8006bf2:	d9f0      	bls.n	8006bd6 <USB_SetCurrentMode+0x60>
 8006bf4:	e001      	b.n	8006bfa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e005      	b.n	8006c06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b32      	cmp	r3, #50	; 0x32
 8006bfe:	d101      	bne.n	8006c04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c10:	b084      	sub	sp, #16
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	e009      	b.n	8006c44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3340      	adds	r3, #64	; 0x40
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b0e      	cmp	r3, #14
 8006c48:	d9f2      	bls.n	8006c30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d11c      	bne.n	8006c8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
 8006c62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e005      	b.n	8006c96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca8:	4619      	mov	r1, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	680b      	ldr	r3, [r1, #0]
 8006cb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10c      	bne.n	8006cd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f965 	bl	8006f94 <USB_SetDevSpeed>
 8006cca:	e008      	b.n	8006cde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f960 	bl	8006f94 <USB_SetDevSpeed>
 8006cd4:	e003      	b.n	8006cde <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f95b 	bl	8006f94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cde:	2110      	movs	r1, #16
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8f3 	bl	8006ecc <USB_FlushTxFifo>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f91f 	bl	8006f34 <USB_FlushRxFifo>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2300      	movs	r3, #0
 8006d22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	e043      	b.n	8006db2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d40:	d118      	bne.n	8006d74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	461a      	mov	r2, r3
 8006d56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e013      	b.n	8006d86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e008      	b.n	8006d86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	461a      	mov	r2, r3
 8006d82:	2300      	movs	r3, #0
 8006d84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	461a      	mov	r2, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	461a      	mov	r2, r3
 8006da6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006daa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3301      	adds	r3, #1
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d3b7      	bcc.n	8006d2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	e043      	b.n	8006e48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd6:	d118      	bne.n	8006e0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	461a      	mov	r2, r3
 8006dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e013      	b.n	8006e1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e008      	b.n	8006e1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	461a      	mov	r2, r3
 8006e18:	2300      	movs	r3, #0
 8006e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d3b7      	bcc.n	8006dc0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f043 0210 	orr.w	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <USB_DevInit+0x2b4>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f043 0208 	orr.w	r2, r3, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d105      	bne.n	8006eb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <USB_DevInit+0x2b8>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec0:	b004      	add	sp, #16
 8006ec2:	4770      	bx	lr
 8006ec4:	803c3800 	.word	0x803c3800
 8006ec8:	40000004 	.word	0x40000004

08006ecc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <USB_FlushTxFifo+0x64>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e01b      	b.n	8006f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	daf2      	bge.n	8006eda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	019b      	lsls	r3, r3, #6
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <USB_FlushTxFifo+0x64>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e006      	b.n	8006f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d0f0      	beq.n	8006f04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	00030d40 	.word	0x00030d40

08006f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <USB_FlushRxFifo+0x5c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e018      	b.n	8006f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	daf2      	bge.n	8006f40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2210      	movs	r2, #16
 8006f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <USB_FlushRxFifo+0x5c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e006      	b.n	8006f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d0f0      	beq.n	8006f64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	00030d40 	.word	0x00030d40

08006f94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fe0:	f023 0303 	bic.w	r3, r3, #3
 8006fe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	f003 0301 	and.w	r3, r3, #1
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <USB_CoreReset+0x64>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e01b      	b.n	800707a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	daf2      	bge.n	8007030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <USB_CoreReset+0x64>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d0f0      	beq.n	800705a <USB_CoreReset+0x36>

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	00030d40 	.word	0x00030d40

0800708c <_strtol_l.constprop.0>:
 800708c:	2b01      	cmp	r3, #1
 800708e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007092:	d001      	beq.n	8007098 <_strtol_l.constprop.0+0xc>
 8007094:	2b24      	cmp	r3, #36	; 0x24
 8007096:	d906      	bls.n	80070a6 <_strtol_l.constprop.0+0x1a>
 8007098:	f000 fada 	bl	8007650 <__errno>
 800709c:	2316      	movs	r3, #22
 800709e:	6003      	str	r3, [r0, #0]
 80070a0:	2000      	movs	r0, #0
 80070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800718c <_strtol_l.constprop.0+0x100>
 80070aa:	460d      	mov	r5, r1
 80070ac:	462e      	mov	r6, r5
 80070ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80070b6:	f017 0708 	ands.w	r7, r7, #8
 80070ba:	d1f7      	bne.n	80070ac <_strtol_l.constprop.0+0x20>
 80070bc:	2c2d      	cmp	r4, #45	; 0x2d
 80070be:	d132      	bne.n	8007126 <_strtol_l.constprop.0+0x9a>
 80070c0:	782c      	ldrb	r4, [r5, #0]
 80070c2:	2701      	movs	r7, #1
 80070c4:	1cb5      	adds	r5, r6, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05b      	beq.n	8007182 <_strtol_l.constprop.0+0xf6>
 80070ca:	2b10      	cmp	r3, #16
 80070cc:	d109      	bne.n	80070e2 <_strtol_l.constprop.0+0x56>
 80070ce:	2c30      	cmp	r4, #48	; 0x30
 80070d0:	d107      	bne.n	80070e2 <_strtol_l.constprop.0+0x56>
 80070d2:	782c      	ldrb	r4, [r5, #0]
 80070d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070d8:	2c58      	cmp	r4, #88	; 0x58
 80070da:	d14d      	bne.n	8007178 <_strtol_l.constprop.0+0xec>
 80070dc:	786c      	ldrb	r4, [r5, #1]
 80070de:	2310      	movs	r3, #16
 80070e0:	3502      	adds	r5, #2
 80070e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80070ea:	f04f 0e00 	mov.w	lr, #0
 80070ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80070f2:	4676      	mov	r6, lr
 80070f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80070f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80070fc:	f1bc 0f09 	cmp.w	ip, #9
 8007100:	d816      	bhi.n	8007130 <_strtol_l.constprop.0+0xa4>
 8007102:	4664      	mov	r4, ip
 8007104:	42a3      	cmp	r3, r4
 8007106:	dd24      	ble.n	8007152 <_strtol_l.constprop.0+0xc6>
 8007108:	f1be 3fff 	cmp.w	lr, #4294967295
 800710c:	d008      	beq.n	8007120 <_strtol_l.constprop.0+0x94>
 800710e:	45b1      	cmp	r9, r6
 8007110:	d31c      	bcc.n	800714c <_strtol_l.constprop.0+0xc0>
 8007112:	d101      	bne.n	8007118 <_strtol_l.constprop.0+0x8c>
 8007114:	45a2      	cmp	sl, r4
 8007116:	db19      	blt.n	800714c <_strtol_l.constprop.0+0xc0>
 8007118:	fb06 4603 	mla	r6, r6, r3, r4
 800711c:	f04f 0e01 	mov.w	lr, #1
 8007120:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007124:	e7e8      	b.n	80070f8 <_strtol_l.constprop.0+0x6c>
 8007126:	2c2b      	cmp	r4, #43	; 0x2b
 8007128:	bf04      	itt	eq
 800712a:	782c      	ldrbeq	r4, [r5, #0]
 800712c:	1cb5      	addeq	r5, r6, #2
 800712e:	e7ca      	b.n	80070c6 <_strtol_l.constprop.0+0x3a>
 8007130:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007134:	f1bc 0f19 	cmp.w	ip, #25
 8007138:	d801      	bhi.n	800713e <_strtol_l.constprop.0+0xb2>
 800713a:	3c37      	subs	r4, #55	; 0x37
 800713c:	e7e2      	b.n	8007104 <_strtol_l.constprop.0+0x78>
 800713e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007142:	f1bc 0f19 	cmp.w	ip, #25
 8007146:	d804      	bhi.n	8007152 <_strtol_l.constprop.0+0xc6>
 8007148:	3c57      	subs	r4, #87	; 0x57
 800714a:	e7db      	b.n	8007104 <_strtol_l.constprop.0+0x78>
 800714c:	f04f 3eff 	mov.w	lr, #4294967295
 8007150:	e7e6      	b.n	8007120 <_strtol_l.constprop.0+0x94>
 8007152:	f1be 3fff 	cmp.w	lr, #4294967295
 8007156:	d105      	bne.n	8007164 <_strtol_l.constprop.0+0xd8>
 8007158:	2322      	movs	r3, #34	; 0x22
 800715a:	6003      	str	r3, [r0, #0]
 800715c:	4646      	mov	r6, r8
 800715e:	b942      	cbnz	r2, 8007172 <_strtol_l.constprop.0+0xe6>
 8007160:	4630      	mov	r0, r6
 8007162:	e79e      	b.n	80070a2 <_strtol_l.constprop.0+0x16>
 8007164:	b107      	cbz	r7, 8007168 <_strtol_l.constprop.0+0xdc>
 8007166:	4276      	negs	r6, r6
 8007168:	2a00      	cmp	r2, #0
 800716a:	d0f9      	beq.n	8007160 <_strtol_l.constprop.0+0xd4>
 800716c:	f1be 0f00 	cmp.w	lr, #0
 8007170:	d000      	beq.n	8007174 <_strtol_l.constprop.0+0xe8>
 8007172:	1e69      	subs	r1, r5, #1
 8007174:	6011      	str	r1, [r2, #0]
 8007176:	e7f3      	b.n	8007160 <_strtol_l.constprop.0+0xd4>
 8007178:	2430      	movs	r4, #48	; 0x30
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1b1      	bne.n	80070e2 <_strtol_l.constprop.0+0x56>
 800717e:	2308      	movs	r3, #8
 8007180:	e7af      	b.n	80070e2 <_strtol_l.constprop.0+0x56>
 8007182:	2c30      	cmp	r4, #48	; 0x30
 8007184:	d0a5      	beq.n	80070d2 <_strtol_l.constprop.0+0x46>
 8007186:	230a      	movs	r3, #10
 8007188:	e7ab      	b.n	80070e2 <_strtol_l.constprop.0+0x56>
 800718a:	bf00      	nop
 800718c:	08008159 	.word	0x08008159

08007190 <strtol>:
 8007190:	4613      	mov	r3, r2
 8007192:	460a      	mov	r2, r1
 8007194:	4601      	mov	r1, r0
 8007196:	4802      	ldr	r0, [pc, #8]	; (80071a0 <strtol+0x10>)
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f7ff bf77 	b.w	800708c <_strtol_l.constprop.0>
 800719e:	bf00      	nop
 80071a0:	20000070 	.word	0x20000070

080071a4 <std>:
 80071a4:	2300      	movs	r3, #0
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	e9c0 3300 	strd	r3, r3, [r0]
 80071ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b2:	6083      	str	r3, [r0, #8]
 80071b4:	8181      	strh	r1, [r0, #12]
 80071b6:	6643      	str	r3, [r0, #100]	; 0x64
 80071b8:	81c2      	strh	r2, [r0, #14]
 80071ba:	6183      	str	r3, [r0, #24]
 80071bc:	4619      	mov	r1, r3
 80071be:	2208      	movs	r2, #8
 80071c0:	305c      	adds	r0, #92	; 0x5c
 80071c2:	f000 f9f7 	bl	80075b4 <memset>
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <std+0x58>)
 80071c8:	6263      	str	r3, [r4, #36]	; 0x24
 80071ca:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <std+0x5c>)
 80071cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ce:	4b0d      	ldr	r3, [pc, #52]	; (8007204 <std+0x60>)
 80071d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <std+0x64>)
 80071d4:	6323      	str	r3, [r4, #48]	; 0x30
 80071d6:	4b0d      	ldr	r3, [pc, #52]	; (800720c <std+0x68>)
 80071d8:	6224      	str	r4, [r4, #32]
 80071da:	429c      	cmp	r4, r3
 80071dc:	d006      	beq.n	80071ec <std+0x48>
 80071de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80071e2:	4294      	cmp	r4, r2
 80071e4:	d002      	beq.n	80071ec <std+0x48>
 80071e6:	33d0      	adds	r3, #208	; 0xd0
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d105      	bne.n	80071f8 <std+0x54>
 80071ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f4:	f000 ba56 	b.w	80076a4 <__retarget_lock_init_recursive>
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	bf00      	nop
 80071fc:	08007405 	.word	0x08007405
 8007200:	08007427 	.word	0x08007427
 8007204:	0800745f 	.word	0x0800745f
 8007208:	08007483 	.word	0x08007483
 800720c:	2000073c 	.word	0x2000073c

08007210 <stdio_exit_handler>:
 8007210:	4a02      	ldr	r2, [pc, #8]	; (800721c <stdio_exit_handler+0xc>)
 8007212:	4903      	ldr	r1, [pc, #12]	; (8007220 <stdio_exit_handler+0x10>)
 8007214:	4803      	ldr	r0, [pc, #12]	; (8007224 <stdio_exit_handler+0x14>)
 8007216:	f000 b869 	b.w	80072ec <_fwalk_sglue>
 800721a:	bf00      	nop
 800721c:	20000018 	.word	0x20000018
 8007220:	08007f51 	.word	0x08007f51
 8007224:	20000024 	.word	0x20000024

08007228 <cleanup_stdio>:
 8007228:	6841      	ldr	r1, [r0, #4]
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <cleanup_stdio+0x34>)
 800722c:	4299      	cmp	r1, r3
 800722e:	b510      	push	{r4, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	d001      	beq.n	8007238 <cleanup_stdio+0x10>
 8007234:	f000 fe8c 	bl	8007f50 <_fflush_r>
 8007238:	68a1      	ldr	r1, [r4, #8]
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <cleanup_stdio+0x38>)
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <cleanup_stdio+0x1e>
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fe85 	bl	8007f50 <_fflush_r>
 8007246:	68e1      	ldr	r1, [r4, #12]
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <cleanup_stdio+0x3c>)
 800724a:	4299      	cmp	r1, r3
 800724c:	d004      	beq.n	8007258 <cleanup_stdio+0x30>
 800724e:	4620      	mov	r0, r4
 8007250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007254:	f000 be7c 	b.w	8007f50 <_fflush_r>
 8007258:	bd10      	pop	{r4, pc}
 800725a:	bf00      	nop
 800725c:	2000073c 	.word	0x2000073c
 8007260:	200007a4 	.word	0x200007a4
 8007264:	2000080c 	.word	0x2000080c

08007268 <global_stdio_init.part.0>:
 8007268:	b510      	push	{r4, lr}
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <global_stdio_init.part.0+0x30>)
 800726c:	4c0b      	ldr	r4, [pc, #44]	; (800729c <global_stdio_init.part.0+0x34>)
 800726e:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <global_stdio_init.part.0+0x38>)
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	4620      	mov	r0, r4
 8007274:	2200      	movs	r2, #0
 8007276:	2104      	movs	r1, #4
 8007278:	f7ff ff94 	bl	80071a4 <std>
 800727c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007280:	2201      	movs	r2, #1
 8007282:	2109      	movs	r1, #9
 8007284:	f7ff ff8e 	bl	80071a4 <std>
 8007288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800728c:	2202      	movs	r2, #2
 800728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007292:	2112      	movs	r1, #18
 8007294:	f7ff bf86 	b.w	80071a4 <std>
 8007298:	20000874 	.word	0x20000874
 800729c:	2000073c 	.word	0x2000073c
 80072a0:	08007211 	.word	0x08007211

080072a4 <__sfp_lock_acquire>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__sfp_lock_acquire+0x8>)
 80072a6:	f000 b9fe 	b.w	80076a6 <__retarget_lock_acquire_recursive>
 80072aa:	bf00      	nop
 80072ac:	2000087d 	.word	0x2000087d

080072b0 <__sfp_lock_release>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__sfp_lock_release+0x8>)
 80072b2:	f000 b9f9 	b.w	80076a8 <__retarget_lock_release_recursive>
 80072b6:	bf00      	nop
 80072b8:	2000087d 	.word	0x2000087d

080072bc <__sinit>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	f7ff fff0 	bl	80072a4 <__sfp_lock_acquire>
 80072c4:	6a23      	ldr	r3, [r4, #32]
 80072c6:	b11b      	cbz	r3, 80072d0 <__sinit+0x14>
 80072c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072cc:	f7ff bff0 	b.w	80072b0 <__sfp_lock_release>
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <__sinit+0x28>)
 80072d2:	6223      	str	r3, [r4, #32]
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <__sinit+0x2c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f5      	bne.n	80072c8 <__sinit+0xc>
 80072dc:	f7ff ffc4 	bl	8007268 <global_stdio_init.part.0>
 80072e0:	e7f2      	b.n	80072c8 <__sinit+0xc>
 80072e2:	bf00      	nop
 80072e4:	08007229 	.word	0x08007229
 80072e8:	20000874 	.word	0x20000874

080072ec <_fwalk_sglue>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4607      	mov	r7, r0
 80072f2:	4688      	mov	r8, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	2600      	movs	r6, #0
 80072f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007300:	d505      	bpl.n	800730e <_fwalk_sglue+0x22>
 8007302:	6824      	ldr	r4, [r4, #0]
 8007304:	2c00      	cmp	r4, #0
 8007306:	d1f7      	bne.n	80072f8 <_fwalk_sglue+0xc>
 8007308:	4630      	mov	r0, r6
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d907      	bls.n	8007324 <_fwalk_sglue+0x38>
 8007314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007318:	3301      	adds	r3, #1
 800731a:	d003      	beq.n	8007324 <_fwalk_sglue+0x38>
 800731c:	4629      	mov	r1, r5
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	4306      	orrs	r6, r0
 8007324:	3568      	adds	r5, #104	; 0x68
 8007326:	e7e9      	b.n	80072fc <_fwalk_sglue+0x10>

08007328 <iprintf>:
 8007328:	b40f      	push	{r0, r1, r2, r3}
 800732a:	b507      	push	{r0, r1, r2, lr}
 800732c:	4906      	ldr	r1, [pc, #24]	; (8007348 <iprintf+0x20>)
 800732e:	ab04      	add	r3, sp, #16
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	f853 2b04 	ldr.w	r2, [r3], #4
 8007336:	6881      	ldr	r1, [r0, #8]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	f000 fad9 	bl	80078f0 <_vfiprintf_r>
 800733e:	b003      	add	sp, #12
 8007340:	f85d eb04 	ldr.w	lr, [sp], #4
 8007344:	b004      	add	sp, #16
 8007346:	4770      	bx	lr
 8007348:	20000070 	.word	0x20000070

0800734c <_puts_r>:
 800734c:	6a03      	ldr	r3, [r0, #32]
 800734e:	b570      	push	{r4, r5, r6, lr}
 8007350:	6884      	ldr	r4, [r0, #8]
 8007352:	4605      	mov	r5, r0
 8007354:	460e      	mov	r6, r1
 8007356:	b90b      	cbnz	r3, 800735c <_puts_r+0x10>
 8007358:	f7ff ffb0 	bl	80072bc <__sinit>
 800735c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800735e:	07db      	lsls	r3, r3, #31
 8007360:	d405      	bmi.n	800736e <_puts_r+0x22>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	0598      	lsls	r0, r3, #22
 8007366:	d402      	bmi.n	800736e <_puts_r+0x22>
 8007368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800736a:	f000 f99c 	bl	80076a6 <__retarget_lock_acquire_recursive>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	0719      	lsls	r1, r3, #28
 8007372:	d513      	bpl.n	800739c <_puts_r+0x50>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	b18b      	cbz	r3, 800739c <_puts_r+0x50>
 8007378:	3e01      	subs	r6, #1
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007380:	3b01      	subs	r3, #1
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	b9e9      	cbnz	r1, 80073c2 <_puts_r+0x76>
 8007386:	2b00      	cmp	r3, #0
 8007388:	da2e      	bge.n	80073e8 <_puts_r+0x9c>
 800738a:	4622      	mov	r2, r4
 800738c:	210a      	movs	r1, #10
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f87b 	bl	800748a <__swbuf_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d007      	beq.n	80073a8 <_puts_r+0x5c>
 8007398:	250a      	movs	r5, #10
 800739a:	e007      	b.n	80073ac <_puts_r+0x60>
 800739c:	4621      	mov	r1, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 f8b0 	bl	8007504 <__swsetup_r>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d0e7      	beq.n	8007378 <_puts_r+0x2c>
 80073a8:	f04f 35ff 	mov.w	r5, #4294967295
 80073ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ae:	07da      	lsls	r2, r3, #31
 80073b0:	d405      	bmi.n	80073be <_puts_r+0x72>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	059b      	lsls	r3, r3, #22
 80073b6:	d402      	bmi.n	80073be <_puts_r+0x72>
 80073b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ba:	f000 f975 	bl	80076a8 <__retarget_lock_release_recursive>
 80073be:	4628      	mov	r0, r5
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da04      	bge.n	80073d0 <_puts_r+0x84>
 80073c6:	69a2      	ldr	r2, [r4, #24]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	dc06      	bgt.n	80073da <_puts_r+0x8e>
 80073cc:	290a      	cmp	r1, #10
 80073ce:	d004      	beq.n	80073da <_puts_r+0x8e>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	6022      	str	r2, [r4, #0]
 80073d6:	7019      	strb	r1, [r3, #0]
 80073d8:	e7cf      	b.n	800737a <_puts_r+0x2e>
 80073da:	4622      	mov	r2, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 f854 	bl	800748a <__swbuf_r>
 80073e2:	3001      	adds	r0, #1
 80073e4:	d1c9      	bne.n	800737a <_puts_r+0x2e>
 80073e6:	e7df      	b.n	80073a8 <_puts_r+0x5c>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	250a      	movs	r5, #10
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	701d      	strb	r5, [r3, #0]
 80073f2:	e7db      	b.n	80073ac <_puts_r+0x60>

080073f4 <puts>:
 80073f4:	4b02      	ldr	r3, [pc, #8]	; (8007400 <puts+0xc>)
 80073f6:	4601      	mov	r1, r0
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	f7ff bfa7 	b.w	800734c <_puts_r>
 80073fe:	bf00      	nop
 8007400:	20000070 	.word	0x20000070

08007404 <__sread>:
 8007404:	b510      	push	{r4, lr}
 8007406:	460c      	mov	r4, r1
 8007408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740c:	f000 f8fc 	bl	8007608 <_read_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	bfab      	itete	ge
 8007414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007416:	89a3      	ldrhlt	r3, [r4, #12]
 8007418:	181b      	addge	r3, r3, r0
 800741a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800741e:	bfac      	ite	ge
 8007420:	6563      	strge	r3, [r4, #84]	; 0x54
 8007422:	81a3      	strhlt	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__swrite>:
 8007426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742a:	461f      	mov	r7, r3
 800742c:	898b      	ldrh	r3, [r1, #12]
 800742e:	05db      	lsls	r3, r3, #23
 8007430:	4605      	mov	r5, r0
 8007432:	460c      	mov	r4, r1
 8007434:	4616      	mov	r6, r2
 8007436:	d505      	bpl.n	8007444 <__swrite+0x1e>
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	2302      	movs	r3, #2
 800743e:	2200      	movs	r2, #0
 8007440:	f000 f8d0 	bl	80075e4 <_lseek_r>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800744a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	4632      	mov	r2, r6
 8007452:	463b      	mov	r3, r7
 8007454:	4628      	mov	r0, r5
 8007456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	f000 b8e7 	b.w	800762c <_write_r>

0800745e <__sseek>:
 800745e:	b510      	push	{r4, lr}
 8007460:	460c      	mov	r4, r1
 8007462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007466:	f000 f8bd 	bl	80075e4 <_lseek_r>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	bf15      	itete	ne
 8007470:	6560      	strne	r0, [r4, #84]	; 0x54
 8007472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800747a:	81a3      	strheq	r3, [r4, #12]
 800747c:	bf18      	it	ne
 800747e:	81a3      	strhne	r3, [r4, #12]
 8007480:	bd10      	pop	{r4, pc}

08007482 <__sclose>:
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 b89d 	b.w	80075c4 <_close_r>

0800748a <__swbuf_r>:
 800748a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748c:	460e      	mov	r6, r1
 800748e:	4614      	mov	r4, r2
 8007490:	4605      	mov	r5, r0
 8007492:	b118      	cbz	r0, 800749c <__swbuf_r+0x12>
 8007494:	6a03      	ldr	r3, [r0, #32]
 8007496:	b90b      	cbnz	r3, 800749c <__swbuf_r+0x12>
 8007498:	f7ff ff10 	bl	80072bc <__sinit>
 800749c:	69a3      	ldr	r3, [r4, #24]
 800749e:	60a3      	str	r3, [r4, #8]
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	071a      	lsls	r2, r3, #28
 80074a4:	d525      	bpl.n	80074f2 <__swbuf_r+0x68>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	b31b      	cbz	r3, 80074f2 <__swbuf_r+0x68>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	1a98      	subs	r0, r3, r2
 80074b0:	6963      	ldr	r3, [r4, #20]
 80074b2:	b2f6      	uxtb	r6, r6
 80074b4:	4283      	cmp	r3, r0
 80074b6:	4637      	mov	r7, r6
 80074b8:	dc04      	bgt.n	80074c4 <__swbuf_r+0x3a>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 fd47 	bl	8007f50 <_fflush_r>
 80074c2:	b9e0      	cbnz	r0, 80074fe <__swbuf_r+0x74>
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	6022      	str	r2, [r4, #0]
 80074d0:	701e      	strb	r6, [r3, #0]
 80074d2:	6962      	ldr	r2, [r4, #20]
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d004      	beq.n	80074e4 <__swbuf_r+0x5a>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	07db      	lsls	r3, r3, #31
 80074de:	d506      	bpl.n	80074ee <__swbuf_r+0x64>
 80074e0:	2e0a      	cmp	r6, #10
 80074e2:	d104      	bne.n	80074ee <__swbuf_r+0x64>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 fd32 	bl	8007f50 <_fflush_r>
 80074ec:	b938      	cbnz	r0, 80074fe <__swbuf_r+0x74>
 80074ee:	4638      	mov	r0, r7
 80074f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f2:	4621      	mov	r1, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f805 	bl	8007504 <__swsetup_r>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d0d5      	beq.n	80074aa <__swbuf_r+0x20>
 80074fe:	f04f 37ff 	mov.w	r7, #4294967295
 8007502:	e7f4      	b.n	80074ee <__swbuf_r+0x64>

08007504 <__swsetup_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4b2a      	ldr	r3, [pc, #168]	; (80075b0 <__swsetup_r+0xac>)
 8007508:	4605      	mov	r5, r0
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	460c      	mov	r4, r1
 800750e:	b118      	cbz	r0, 8007518 <__swsetup_r+0x14>
 8007510:	6a03      	ldr	r3, [r0, #32]
 8007512:	b90b      	cbnz	r3, 8007518 <__swsetup_r+0x14>
 8007514:	f7ff fed2 	bl	80072bc <__sinit>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800751e:	0718      	lsls	r0, r3, #28
 8007520:	d422      	bmi.n	8007568 <__swsetup_r+0x64>
 8007522:	06d9      	lsls	r1, r3, #27
 8007524:	d407      	bmi.n	8007536 <__swsetup_r+0x32>
 8007526:	2309      	movs	r3, #9
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e034      	b.n	80075a0 <__swsetup_r+0x9c>
 8007536:	0758      	lsls	r0, r3, #29
 8007538:	d512      	bpl.n	8007560 <__swsetup_r+0x5c>
 800753a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753c:	b141      	cbz	r1, 8007550 <__swsetup_r+0x4c>
 800753e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007542:	4299      	cmp	r1, r3
 8007544:	d002      	beq.n	800754c <__swsetup_r+0x48>
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f8b0 	bl	80076ac <_free_r>
 800754c:	2300      	movs	r3, #0
 800754e:	6363      	str	r3, [r4, #52]	; 0x34
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	2300      	movs	r3, #0
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f043 0308 	orr.w	r3, r3, #8
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	b94b      	cbnz	r3, 8007580 <__swsetup_r+0x7c>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007576:	d003      	beq.n	8007580 <__swsetup_r+0x7c>
 8007578:	4621      	mov	r1, r4
 800757a:	4628      	mov	r0, r5
 800757c:	f000 fd36 	bl	8007fec <__smakebuf_r>
 8007580:	89a0      	ldrh	r0, [r4, #12]
 8007582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007586:	f010 0301 	ands.w	r3, r0, #1
 800758a:	d00a      	beq.n	80075a2 <__swsetup_r+0x9e>
 800758c:	2300      	movs	r3, #0
 800758e:	60a3      	str	r3, [r4, #8]
 8007590:	6963      	ldr	r3, [r4, #20]
 8007592:	425b      	negs	r3, r3
 8007594:	61a3      	str	r3, [r4, #24]
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	b943      	cbnz	r3, 80075ac <__swsetup_r+0xa8>
 800759a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800759e:	d1c4      	bne.n	800752a <__swsetup_r+0x26>
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	0781      	lsls	r1, r0, #30
 80075a4:	bf58      	it	pl
 80075a6:	6963      	ldrpl	r3, [r4, #20]
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	e7f4      	b.n	8007596 <__swsetup_r+0x92>
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7f7      	b.n	80075a0 <__swsetup_r+0x9c>
 80075b0:	20000070 	.word	0x20000070

080075b4 <memset>:
 80075b4:	4402      	add	r2, r0
 80075b6:	4603      	mov	r3, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d100      	bne.n	80075be <memset+0xa>
 80075bc:	4770      	bx	lr
 80075be:	f803 1b01 	strb.w	r1, [r3], #1
 80075c2:	e7f9      	b.n	80075b8 <memset+0x4>

080075c4 <_close_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d06      	ldr	r5, [pc, #24]	; (80075e0 <_close_r+0x1c>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f7fa fb85 	bl	8001cde <_close>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_close_r+0x1a>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_close_r+0x1a>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000878 	.word	0x20000878

080075e4 <_lseek_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	; (8007604 <_lseek_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fa fb9a 	bl	8001d2c <_lseek>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_lseek_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_lseek_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000878 	.word	0x20000878

08007608 <_read_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_read_r+0x20>)
 800760c:	4604      	mov	r4, r0
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	2200      	movs	r2, #0
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fa fb28 	bl	8001c6c <_read>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_read_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_read_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000878 	.word	0x20000878

0800762c <_write_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_write_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7fa fb33 	bl	8001ca6 <_write>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_write_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_write_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20000878 	.word	0x20000878

08007650 <__errno>:
 8007650:	4b01      	ldr	r3, [pc, #4]	; (8007658 <__errno+0x8>)
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000070 	.word	0x20000070

0800765c <__libc_init_array>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	4d0d      	ldr	r5, [pc, #52]	; (8007694 <__libc_init_array+0x38>)
 8007660:	4c0d      	ldr	r4, [pc, #52]	; (8007698 <__libc_init_array+0x3c>)
 8007662:	1b64      	subs	r4, r4, r5
 8007664:	10a4      	asrs	r4, r4, #2
 8007666:	2600      	movs	r6, #0
 8007668:	42a6      	cmp	r6, r4
 800766a:	d109      	bne.n	8007680 <__libc_init_array+0x24>
 800766c:	4d0b      	ldr	r5, [pc, #44]	; (800769c <__libc_init_array+0x40>)
 800766e:	4c0c      	ldr	r4, [pc, #48]	; (80076a0 <__libc_init_array+0x44>)
 8007670:	f000 fd2a 	bl	80080c8 <_init>
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	2600      	movs	r6, #0
 800767a:	42a6      	cmp	r6, r4
 800767c:	d105      	bne.n	800768a <__libc_init_array+0x2e>
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	f855 3b04 	ldr.w	r3, [r5], #4
 8007684:	4798      	blx	r3
 8007686:	3601      	adds	r6, #1
 8007688:	e7ee      	b.n	8007668 <__libc_init_array+0xc>
 800768a:	f855 3b04 	ldr.w	r3, [r5], #4
 800768e:	4798      	blx	r3
 8007690:	3601      	adds	r6, #1
 8007692:	e7f2      	b.n	800767a <__libc_init_array+0x1e>
 8007694:	08008294 	.word	0x08008294
 8007698:	08008294 	.word	0x08008294
 800769c:	08008294 	.word	0x08008294
 80076a0:	08008298 	.word	0x08008298

080076a4 <__retarget_lock_init_recursive>:
 80076a4:	4770      	bx	lr

080076a6 <__retarget_lock_acquire_recursive>:
 80076a6:	4770      	bx	lr

080076a8 <__retarget_lock_release_recursive>:
 80076a8:	4770      	bx	lr
	...

080076ac <_free_r>:
 80076ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d044      	beq.n	800773c <_free_r+0x90>
 80076b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b6:	9001      	str	r0, [sp, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f1a1 0404 	sub.w	r4, r1, #4
 80076be:	bfb8      	it	lt
 80076c0:	18e4      	addlt	r4, r4, r3
 80076c2:	f000 f8df 	bl	8007884 <__malloc_lock>
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <_free_r+0x94>)
 80076c8:	9801      	ldr	r0, [sp, #4]
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	b933      	cbnz	r3, 80076dc <_free_r+0x30>
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	6014      	str	r4, [r2, #0]
 80076d2:	b003      	add	sp, #12
 80076d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d8:	f000 b8da 	b.w	8007890 <__malloc_unlock>
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d908      	bls.n	80076f2 <_free_r+0x46>
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	1961      	adds	r1, r4, r5
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf01      	itttt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	1949      	addeq	r1, r1, r5
 80076ee:	6021      	streq	r1, [r4, #0]
 80076f0:	e7ed      	b.n	80076ce <_free_r+0x22>
 80076f2:	461a      	mov	r2, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	b10b      	cbz	r3, 80076fc <_free_r+0x50>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x46>
 80076fc:	6811      	ldr	r1, [r2, #0]
 80076fe:	1855      	adds	r5, r2, r1
 8007700:	42a5      	cmp	r5, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x70>
 8007704:	6824      	ldr	r4, [r4, #0]
 8007706:	4421      	add	r1, r4
 8007708:	1854      	adds	r4, r2, r1
 800770a:	42a3      	cmp	r3, r4
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	d1e0      	bne.n	80076d2 <_free_r+0x26>
 8007710:	681c      	ldr	r4, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	6053      	str	r3, [r2, #4]
 8007716:	440c      	add	r4, r1
 8007718:	6014      	str	r4, [r2, #0]
 800771a:	e7da      	b.n	80076d2 <_free_r+0x26>
 800771c:	d902      	bls.n	8007724 <_free_r+0x78>
 800771e:	230c      	movs	r3, #12
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	e7d6      	b.n	80076d2 <_free_r+0x26>
 8007724:	6825      	ldr	r5, [r4, #0]
 8007726:	1961      	adds	r1, r4, r5
 8007728:	428b      	cmp	r3, r1
 800772a:	bf04      	itt	eq
 800772c:	6819      	ldreq	r1, [r3, #0]
 800772e:	685b      	ldreq	r3, [r3, #4]
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	bf04      	itt	eq
 8007734:	1949      	addeq	r1, r1, r5
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	6054      	str	r4, [r2, #4]
 800773a:	e7ca      	b.n	80076d2 <_free_r+0x26>
 800773c:	b003      	add	sp, #12
 800773e:	bd30      	pop	{r4, r5, pc}
 8007740:	20000880 	.word	0x20000880

08007744 <sbrk_aligned>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4e0e      	ldr	r6, [pc, #56]	; (8007780 <sbrk_aligned+0x3c>)
 8007748:	460c      	mov	r4, r1
 800774a:	6831      	ldr	r1, [r6, #0]
 800774c:	4605      	mov	r5, r0
 800774e:	b911      	cbnz	r1, 8007756 <sbrk_aligned+0x12>
 8007750:	f000 fcaa 	bl	80080a8 <_sbrk_r>
 8007754:	6030      	str	r0, [r6, #0]
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f000 fca5 	bl	80080a8 <_sbrk_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d00a      	beq.n	8007778 <sbrk_aligned+0x34>
 8007762:	1cc4      	adds	r4, r0, #3
 8007764:	f024 0403 	bic.w	r4, r4, #3
 8007768:	42a0      	cmp	r0, r4
 800776a:	d007      	beq.n	800777c <sbrk_aligned+0x38>
 800776c:	1a21      	subs	r1, r4, r0
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fc9a 	bl	80080a8 <_sbrk_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d101      	bne.n	800777c <sbrk_aligned+0x38>
 8007778:	f04f 34ff 	mov.w	r4, #4294967295
 800777c:	4620      	mov	r0, r4
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	20000884 	.word	0x20000884

08007784 <_malloc_r>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	1ccd      	adds	r5, r1, #3
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	2d00      	cmp	r5, #0
 8007798:	4607      	mov	r7, r0
 800779a:	db01      	blt.n	80077a0 <_malloc_r+0x1c>
 800779c:	42a9      	cmp	r1, r5
 800779e:	d905      	bls.n	80077ac <_malloc_r+0x28>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	2600      	movs	r6, #0
 80077a6:	4630      	mov	r0, r6
 80077a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007880 <_malloc_r+0xfc>
 80077b0:	f000 f868 	bl	8007884 <__malloc_lock>
 80077b4:	f8d8 3000 	ldr.w	r3, [r8]
 80077b8:	461c      	mov	r4, r3
 80077ba:	bb5c      	cbnz	r4, 8007814 <_malloc_r+0x90>
 80077bc:	4629      	mov	r1, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ffc0 	bl	8007744 <sbrk_aligned>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	4604      	mov	r4, r0
 80077c8:	d155      	bne.n	8007876 <_malloc_r+0xf2>
 80077ca:	f8d8 4000 	ldr.w	r4, [r8]
 80077ce:	4626      	mov	r6, r4
 80077d0:	2e00      	cmp	r6, #0
 80077d2:	d145      	bne.n	8007860 <_malloc_r+0xdc>
 80077d4:	2c00      	cmp	r4, #0
 80077d6:	d048      	beq.n	800786a <_malloc_r+0xe6>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	4631      	mov	r1, r6
 80077dc:	4638      	mov	r0, r7
 80077de:	eb04 0903 	add.w	r9, r4, r3
 80077e2:	f000 fc61 	bl	80080a8 <_sbrk_r>
 80077e6:	4581      	cmp	r9, r0
 80077e8:	d13f      	bne.n	800786a <_malloc_r+0xe6>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	1a6d      	subs	r5, r5, r1
 80077ee:	4629      	mov	r1, r5
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa7 	bl	8007744 <sbrk_aligned>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d037      	beq.n	800786a <_malloc_r+0xe6>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	442b      	add	r3, r5
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	f8d8 3000 	ldr.w	r3, [r8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d038      	beq.n	800787a <_malloc_r+0xf6>
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	42a2      	cmp	r2, r4
 800780c:	d12b      	bne.n	8007866 <_malloc_r+0xe2>
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e00f      	b.n	8007834 <_malloc_r+0xb0>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1b52      	subs	r2, r2, r5
 8007818:	d41f      	bmi.n	800785a <_malloc_r+0xd6>
 800781a:	2a0b      	cmp	r2, #11
 800781c:	d917      	bls.n	800784e <_malloc_r+0xca>
 800781e:	1961      	adds	r1, r4, r5
 8007820:	42a3      	cmp	r3, r4
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	bf18      	it	ne
 8007826:	6059      	strne	r1, [r3, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	bf08      	it	eq
 800782c:	f8c8 1000 	streq.w	r1, [r8]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4638      	mov	r0, r7
 8007836:	f104 060b 	add.w	r6, r4, #11
 800783a:	f000 f829 	bl	8007890 <__malloc_unlock>
 800783e:	f026 0607 	bic.w	r6, r6, #7
 8007842:	1d23      	adds	r3, r4, #4
 8007844:	1af2      	subs	r2, r6, r3
 8007846:	d0ae      	beq.n	80077a6 <_malloc_r+0x22>
 8007848:	1b9b      	subs	r3, r3, r6
 800784a:	50a3      	str	r3, [r4, r2]
 800784c:	e7ab      	b.n	80077a6 <_malloc_r+0x22>
 800784e:	42a3      	cmp	r3, r4
 8007850:	6862      	ldr	r2, [r4, #4]
 8007852:	d1dd      	bne.n	8007810 <_malloc_r+0x8c>
 8007854:	f8c8 2000 	str.w	r2, [r8]
 8007858:	e7ec      	b.n	8007834 <_malloc_r+0xb0>
 800785a:	4623      	mov	r3, r4
 800785c:	6864      	ldr	r4, [r4, #4]
 800785e:	e7ac      	b.n	80077ba <_malloc_r+0x36>
 8007860:	4634      	mov	r4, r6
 8007862:	6876      	ldr	r6, [r6, #4]
 8007864:	e7b4      	b.n	80077d0 <_malloc_r+0x4c>
 8007866:	4613      	mov	r3, r2
 8007868:	e7cc      	b.n	8007804 <_malloc_r+0x80>
 800786a:	230c      	movs	r3, #12
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4638      	mov	r0, r7
 8007870:	f000 f80e 	bl	8007890 <__malloc_unlock>
 8007874:	e797      	b.n	80077a6 <_malloc_r+0x22>
 8007876:	6025      	str	r5, [r4, #0]
 8007878:	e7dc      	b.n	8007834 <_malloc_r+0xb0>
 800787a:	605b      	str	r3, [r3, #4]
 800787c:	deff      	udf	#255	; 0xff
 800787e:	bf00      	nop
 8007880:	20000880 	.word	0x20000880

08007884 <__malloc_lock>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__malloc_lock+0x8>)
 8007886:	f7ff bf0e 	b.w	80076a6 <__retarget_lock_acquire_recursive>
 800788a:	bf00      	nop
 800788c:	2000087c 	.word	0x2000087c

08007890 <__malloc_unlock>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__malloc_unlock+0x8>)
 8007892:	f7ff bf09 	b.w	80076a8 <__retarget_lock_release_recursive>
 8007896:	bf00      	nop
 8007898:	2000087c 	.word	0x2000087c

0800789c <__sfputc_r>:
 800789c:	6893      	ldr	r3, [r2, #8]
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	b410      	push	{r4}
 80078a4:	6093      	str	r3, [r2, #8]
 80078a6:	da08      	bge.n	80078ba <__sfputc_r+0x1e>
 80078a8:	6994      	ldr	r4, [r2, #24]
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	db01      	blt.n	80078b2 <__sfputc_r+0x16>
 80078ae:	290a      	cmp	r1, #10
 80078b0:	d103      	bne.n	80078ba <__sfputc_r+0x1e>
 80078b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b6:	f7ff bde8 	b.w	800748a <__swbuf_r>
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	1c58      	adds	r0, r3, #1
 80078be:	6010      	str	r0, [r2, #0]
 80078c0:	7019      	strb	r1, [r3, #0]
 80078c2:	4608      	mov	r0, r1
 80078c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <__sfputs_r>:
 80078ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	18d5      	adds	r5, r2, r3
 80078d4:	42ac      	cmp	r4, r5
 80078d6:	d101      	bne.n	80078dc <__sfputs_r+0x12>
 80078d8:	2000      	movs	r0, #0
 80078da:	e007      	b.n	80078ec <__sfputs_r+0x22>
 80078dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e0:	463a      	mov	r2, r7
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffda 	bl	800789c <__sfputc_r>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d1f3      	bne.n	80078d4 <__sfputs_r+0xa>
 80078ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078f0 <_vfiprintf_r>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	460d      	mov	r5, r1
 80078f6:	b09d      	sub	sp, #116	; 0x74
 80078f8:	4614      	mov	r4, r2
 80078fa:	4698      	mov	r8, r3
 80078fc:	4606      	mov	r6, r0
 80078fe:	b118      	cbz	r0, 8007908 <_vfiprintf_r+0x18>
 8007900:	6a03      	ldr	r3, [r0, #32]
 8007902:	b90b      	cbnz	r3, 8007908 <_vfiprintf_r+0x18>
 8007904:	f7ff fcda 	bl	80072bc <__sinit>
 8007908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d405      	bmi.n	800791a <_vfiprintf_r+0x2a>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	059a      	lsls	r2, r3, #22
 8007912:	d402      	bmi.n	800791a <_vfiprintf_r+0x2a>
 8007914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007916:	f7ff fec6 	bl	80076a6 <__retarget_lock_acquire_recursive>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	071b      	lsls	r3, r3, #28
 800791e:	d501      	bpl.n	8007924 <_vfiprintf_r+0x34>
 8007920:	692b      	ldr	r3, [r5, #16]
 8007922:	b99b      	cbnz	r3, 800794c <_vfiprintf_r+0x5c>
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff fdec 	bl	8007504 <__swsetup_r>
 800792c:	b170      	cbz	r0, 800794c <_vfiprintf_r+0x5c>
 800792e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007930:	07dc      	lsls	r4, r3, #31
 8007932:	d504      	bpl.n	800793e <_vfiprintf_r+0x4e>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b01d      	add	sp, #116	; 0x74
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	0598      	lsls	r0, r3, #22
 8007942:	d4f7      	bmi.n	8007934 <_vfiprintf_r+0x44>
 8007944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007946:	f7ff feaf 	bl	80076a8 <__retarget_lock_release_recursive>
 800794a:	e7f3      	b.n	8007934 <_vfiprintf_r+0x44>
 800794c:	2300      	movs	r3, #0
 800794e:	9309      	str	r3, [sp, #36]	; 0x24
 8007950:	2320      	movs	r3, #32
 8007952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007956:	f8cd 800c 	str.w	r8, [sp, #12]
 800795a:	2330      	movs	r3, #48	; 0x30
 800795c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b10 <_vfiprintf_r+0x220>
 8007960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007964:	f04f 0901 	mov.w	r9, #1
 8007968:	4623      	mov	r3, r4
 800796a:	469a      	mov	sl, r3
 800796c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007970:	b10a      	cbz	r2, 8007976 <_vfiprintf_r+0x86>
 8007972:	2a25      	cmp	r2, #37	; 0x25
 8007974:	d1f9      	bne.n	800796a <_vfiprintf_r+0x7a>
 8007976:	ebba 0b04 	subs.w	fp, sl, r4
 800797a:	d00b      	beq.n	8007994 <_vfiprintf_r+0xa4>
 800797c:	465b      	mov	r3, fp
 800797e:	4622      	mov	r2, r4
 8007980:	4629      	mov	r1, r5
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ffa1 	bl	80078ca <__sfputs_r>
 8007988:	3001      	adds	r0, #1
 800798a:	f000 80a9 	beq.w	8007ae0 <_vfiprintf_r+0x1f0>
 800798e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007990:	445a      	add	r2, fp
 8007992:	9209      	str	r2, [sp, #36]	; 0x24
 8007994:	f89a 3000 	ldrb.w	r3, [sl]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80a1 	beq.w	8007ae0 <_vfiprintf_r+0x1f0>
 800799e:	2300      	movs	r3, #0
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295
 80079a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b4:	931a      	str	r3, [sp, #104]	; 0x68
 80079b6:	4654      	mov	r4, sl
 80079b8:	2205      	movs	r2, #5
 80079ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079be:	4854      	ldr	r0, [pc, #336]	; (8007b10 <_vfiprintf_r+0x220>)
 80079c0:	f7f8 fc26 	bl	8000210 <memchr>
 80079c4:	9a04      	ldr	r2, [sp, #16]
 80079c6:	b9d8      	cbnz	r0, 8007a00 <_vfiprintf_r+0x110>
 80079c8:	06d1      	lsls	r1, r2, #27
 80079ca:	bf44      	itt	mi
 80079cc:	2320      	movmi	r3, #32
 80079ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d2:	0713      	lsls	r3, r2, #28
 80079d4:	bf44      	itt	mi
 80079d6:	232b      	movmi	r3, #43	; 0x2b
 80079d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079dc:	f89a 3000 	ldrb.w	r3, [sl]
 80079e0:	2b2a      	cmp	r3, #42	; 0x2a
 80079e2:	d015      	beq.n	8007a10 <_vfiprintf_r+0x120>
 80079e4:	9a07      	ldr	r2, [sp, #28]
 80079e6:	4654      	mov	r4, sl
 80079e8:	2000      	movs	r0, #0
 80079ea:	f04f 0c0a 	mov.w	ip, #10
 80079ee:	4621      	mov	r1, r4
 80079f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f4:	3b30      	subs	r3, #48	; 0x30
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d94d      	bls.n	8007a96 <_vfiprintf_r+0x1a6>
 80079fa:	b1b0      	cbz	r0, 8007a2a <_vfiprintf_r+0x13a>
 80079fc:	9207      	str	r2, [sp, #28]
 80079fe:	e014      	b.n	8007a2a <_vfiprintf_r+0x13a>
 8007a00:	eba0 0308 	sub.w	r3, r0, r8
 8007a04:	fa09 f303 	lsl.w	r3, r9, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	46a2      	mov	sl, r4
 8007a0e:	e7d2      	b.n	80079b6 <_vfiprintf_r+0xc6>
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	1d19      	adds	r1, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	9103      	str	r1, [sp, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bfbb      	ittet	lt
 8007a1c:	425b      	neglt	r3, r3
 8007a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a22:	9307      	strge	r3, [sp, #28]
 8007a24:	9307      	strlt	r3, [sp, #28]
 8007a26:	bfb8      	it	lt
 8007a28:	9204      	strlt	r2, [sp, #16]
 8007a2a:	7823      	ldrb	r3, [r4, #0]
 8007a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2e:	d10c      	bne.n	8007a4a <_vfiprintf_r+0x15a>
 8007a30:	7863      	ldrb	r3, [r4, #1]
 8007a32:	2b2a      	cmp	r3, #42	; 0x2a
 8007a34:	d134      	bne.n	8007aa0 <_vfiprintf_r+0x1b0>
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	1d1a      	adds	r2, r3, #4
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	9203      	str	r2, [sp, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a46:	3402      	adds	r4, #2
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b20 <_vfiprintf_r+0x230>
 8007a4e:	7821      	ldrb	r1, [r4, #0]
 8007a50:	2203      	movs	r2, #3
 8007a52:	4650      	mov	r0, sl
 8007a54:	f7f8 fbdc 	bl	8000210 <memchr>
 8007a58:	b138      	cbz	r0, 8007a6a <_vfiprintf_r+0x17a>
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	eba0 000a 	sub.w	r0, r0, sl
 8007a60:	2240      	movs	r2, #64	; 0x40
 8007a62:	4082      	lsls	r2, r0
 8007a64:	4313      	orrs	r3, r2
 8007a66:	3401      	adds	r4, #1
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6e:	4829      	ldr	r0, [pc, #164]	; (8007b14 <_vfiprintf_r+0x224>)
 8007a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a74:	2206      	movs	r2, #6
 8007a76:	f7f8 fbcb 	bl	8000210 <memchr>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d03f      	beq.n	8007afe <_vfiprintf_r+0x20e>
 8007a7e:	4b26      	ldr	r3, [pc, #152]	; (8007b18 <_vfiprintf_r+0x228>)
 8007a80:	bb1b      	cbnz	r3, 8007aca <_vfiprintf_r+0x1da>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	3307      	adds	r3, #7
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	9303      	str	r3, [sp, #12]
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	443b      	add	r3, r7
 8007a92:	9309      	str	r3, [sp, #36]	; 0x24
 8007a94:	e768      	b.n	8007968 <_vfiprintf_r+0x78>
 8007a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	e7a6      	b.n	80079ee <_vfiprintf_r+0xfe>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	9305      	str	r3, [sp, #20]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4620      	mov	r0, r4
 8007aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab2:	3a30      	subs	r2, #48	; 0x30
 8007ab4:	2a09      	cmp	r2, #9
 8007ab6:	d903      	bls.n	8007ac0 <_vfiprintf_r+0x1d0>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0c6      	beq.n	8007a4a <_vfiprintf_r+0x15a>
 8007abc:	9105      	str	r1, [sp, #20]
 8007abe:	e7c4      	b.n	8007a4a <_vfiprintf_r+0x15a>
 8007ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e7f0      	b.n	8007aac <_vfiprintf_r+0x1bc>
 8007aca:	ab03      	add	r3, sp, #12
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <_vfiprintf_r+0x22c>)
 8007ad2:	a904      	add	r1, sp, #16
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f3af 8000 	nop.w
 8007ada:	4607      	mov	r7, r0
 8007adc:	1c78      	adds	r0, r7, #1
 8007ade:	d1d6      	bne.n	8007a8e <_vfiprintf_r+0x19e>
 8007ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae2:	07d9      	lsls	r1, r3, #31
 8007ae4:	d405      	bmi.n	8007af2 <_vfiprintf_r+0x202>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	059a      	lsls	r2, r3, #22
 8007aea:	d402      	bmi.n	8007af2 <_vfiprintf_r+0x202>
 8007aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aee:	f7ff fddb 	bl	80076a8 <__retarget_lock_release_recursive>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	065b      	lsls	r3, r3, #25
 8007af6:	f53f af1d 	bmi.w	8007934 <_vfiprintf_r+0x44>
 8007afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afc:	e71c      	b.n	8007938 <_vfiprintf_r+0x48>
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <_vfiprintf_r+0x22c>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f000 f879 	bl	8007c00 <_printf_i>
 8007b0e:	e7e4      	b.n	8007ada <_vfiprintf_r+0x1ea>
 8007b10:	08008259 	.word	0x08008259
 8007b14:	08008263 	.word	0x08008263
 8007b18:	00000000 	.word	0x00000000
 8007b1c:	080078cb 	.word	0x080078cb
 8007b20:	0800825f 	.word	0x0800825f

08007b24 <_printf_common>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	4616      	mov	r6, r2
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	688a      	ldr	r2, [r1, #8]
 8007b2e:	690b      	ldr	r3, [r1, #16]
 8007b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	bfb8      	it	lt
 8007b38:	4613      	movlt	r3, r2
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b40:	4607      	mov	r7, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	b10a      	cbz	r2, 8007b4a <_printf_common+0x26>
 8007b46:	3301      	adds	r3, #1
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	0699      	lsls	r1, r3, #26
 8007b4e:	bf42      	ittt	mi
 8007b50:	6833      	ldrmi	r3, [r6, #0]
 8007b52:	3302      	addmi	r3, #2
 8007b54:	6033      	strmi	r3, [r6, #0]
 8007b56:	6825      	ldr	r5, [r4, #0]
 8007b58:	f015 0506 	ands.w	r5, r5, #6
 8007b5c:	d106      	bne.n	8007b6c <_printf_common+0x48>
 8007b5e:	f104 0a19 	add.w	sl, r4, #25
 8007b62:	68e3      	ldr	r3, [r4, #12]
 8007b64:	6832      	ldr	r2, [r6, #0]
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	dc26      	bgt.n	8007bba <_printf_common+0x96>
 8007b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b70:	1e13      	subs	r3, r2, #0
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	bf18      	it	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	0692      	lsls	r2, r2, #26
 8007b7a:	d42b      	bmi.n	8007bd4 <_printf_common+0xb0>
 8007b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b80:	4649      	mov	r1, r9
 8007b82:	4638      	mov	r0, r7
 8007b84:	47c0      	blx	r8
 8007b86:	3001      	adds	r0, #1
 8007b88:	d01e      	beq.n	8007bc8 <_printf_common+0xa4>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	f003 0306 	and.w	r3, r3, #6
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	bf02      	ittt	eq
 8007b96:	68e5      	ldreq	r5, [r4, #12]
 8007b98:	6833      	ldreq	r3, [r6, #0]
 8007b9a:	1aed      	subeq	r5, r5, r3
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	bf0c      	ite	eq
 8007ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba4:	2500      	movne	r5, #0
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	bfc4      	itt	gt
 8007baa:	1a9b      	subgt	r3, r3, r2
 8007bac:	18ed      	addgt	r5, r5, r3
 8007bae:	2600      	movs	r6, #0
 8007bb0:	341a      	adds	r4, #26
 8007bb2:	42b5      	cmp	r5, r6
 8007bb4:	d11a      	bne.n	8007bec <_printf_common+0xc8>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e008      	b.n	8007bcc <_printf_common+0xa8>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	47c0      	blx	r8
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d103      	bne.n	8007bd0 <_printf_common+0xac>
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	3501      	adds	r5, #1
 8007bd2:	e7c6      	b.n	8007b62 <_printf_common+0x3e>
 8007bd4:	18e1      	adds	r1, r4, r3
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	2030      	movs	r0, #48	; 0x30
 8007bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bde:	4422      	add	r2, r4
 8007be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007be8:	3302      	adds	r3, #2
 8007bea:	e7c7      	b.n	8007b7c <_printf_common+0x58>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	47c0      	blx	r8
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	d0e6      	beq.n	8007bc8 <_printf_common+0xa4>
 8007bfa:	3601      	adds	r6, #1
 8007bfc:	e7d9      	b.n	8007bb2 <_printf_common+0x8e>
	...

08007c00 <_printf_i>:
 8007c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	7e0f      	ldrb	r7, [r1, #24]
 8007c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c08:	2f78      	cmp	r7, #120	; 0x78
 8007c0a:	4691      	mov	r9, r2
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	469a      	mov	sl, r3
 8007c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c16:	d807      	bhi.n	8007c28 <_printf_i+0x28>
 8007c18:	2f62      	cmp	r7, #98	; 0x62
 8007c1a:	d80a      	bhi.n	8007c32 <_printf_i+0x32>
 8007c1c:	2f00      	cmp	r7, #0
 8007c1e:	f000 80d4 	beq.w	8007dca <_printf_i+0x1ca>
 8007c22:	2f58      	cmp	r7, #88	; 0x58
 8007c24:	f000 80c0 	beq.w	8007da8 <_printf_i+0x1a8>
 8007c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c30:	e03a      	b.n	8007ca8 <_printf_i+0xa8>
 8007c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c36:	2b15      	cmp	r3, #21
 8007c38:	d8f6      	bhi.n	8007c28 <_printf_i+0x28>
 8007c3a:	a101      	add	r1, pc, #4	; (adr r1, 8007c40 <_printf_i+0x40>)
 8007c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c40:	08007c99 	.word	0x08007c99
 8007c44:	08007cad 	.word	0x08007cad
 8007c48:	08007c29 	.word	0x08007c29
 8007c4c:	08007c29 	.word	0x08007c29
 8007c50:	08007c29 	.word	0x08007c29
 8007c54:	08007c29 	.word	0x08007c29
 8007c58:	08007cad 	.word	0x08007cad
 8007c5c:	08007c29 	.word	0x08007c29
 8007c60:	08007c29 	.word	0x08007c29
 8007c64:	08007c29 	.word	0x08007c29
 8007c68:	08007c29 	.word	0x08007c29
 8007c6c:	08007db1 	.word	0x08007db1
 8007c70:	08007cd9 	.word	0x08007cd9
 8007c74:	08007d6b 	.word	0x08007d6b
 8007c78:	08007c29 	.word	0x08007c29
 8007c7c:	08007c29 	.word	0x08007c29
 8007c80:	08007dd3 	.word	0x08007dd3
 8007c84:	08007c29 	.word	0x08007c29
 8007c88:	08007cd9 	.word	0x08007cd9
 8007c8c:	08007c29 	.word	0x08007c29
 8007c90:	08007c29 	.word	0x08007c29
 8007c94:	08007d73 	.word	0x08007d73
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	1d1a      	adds	r2, r3, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	602a      	str	r2, [r5, #0]
 8007ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e09f      	b.n	8007dec <_printf_i+0x1ec>
 8007cac:	6820      	ldr	r0, [r4, #0]
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	0607      	lsls	r7, r0, #24
 8007cb2:	f103 0104 	add.w	r1, r3, #4
 8007cb6:	6029      	str	r1, [r5, #0]
 8007cb8:	d501      	bpl.n	8007cbe <_printf_i+0xbe>
 8007cba:	681e      	ldr	r6, [r3, #0]
 8007cbc:	e003      	b.n	8007cc6 <_printf_i+0xc6>
 8007cbe:	0646      	lsls	r6, r0, #25
 8007cc0:	d5fb      	bpl.n	8007cba <_printf_i+0xba>
 8007cc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	da03      	bge.n	8007cd2 <_printf_i+0xd2>
 8007cca:	232d      	movs	r3, #45	; 0x2d
 8007ccc:	4276      	negs	r6, r6
 8007cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd2:	485a      	ldr	r0, [pc, #360]	; (8007e3c <_printf_i+0x23c>)
 8007cd4:	230a      	movs	r3, #10
 8007cd6:	e012      	b.n	8007cfe <_printf_i+0xfe>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	1d19      	adds	r1, r3, #4
 8007cde:	6029      	str	r1, [r5, #0]
 8007ce0:	0605      	lsls	r5, r0, #24
 8007ce2:	d501      	bpl.n	8007ce8 <_printf_i+0xe8>
 8007ce4:	681e      	ldr	r6, [r3, #0]
 8007ce6:	e002      	b.n	8007cee <_printf_i+0xee>
 8007ce8:	0641      	lsls	r1, r0, #25
 8007cea:	d5fb      	bpl.n	8007ce4 <_printf_i+0xe4>
 8007cec:	881e      	ldrh	r6, [r3, #0]
 8007cee:	4853      	ldr	r0, [pc, #332]	; (8007e3c <_printf_i+0x23c>)
 8007cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2308      	moveq	r3, #8
 8007cf6:	230a      	movne	r3, #10
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cfe:	6865      	ldr	r5, [r4, #4]
 8007d00:	60a5      	str	r5, [r4, #8]
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	bfa2      	ittt	ge
 8007d06:	6821      	ldrge	r1, [r4, #0]
 8007d08:	f021 0104 	bicge.w	r1, r1, #4
 8007d0c:	6021      	strge	r1, [r4, #0]
 8007d0e:	b90e      	cbnz	r6, 8007d14 <_printf_i+0x114>
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	d04b      	beq.n	8007dac <_printf_i+0x1ac>
 8007d14:	4615      	mov	r5, r2
 8007d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d1e:	5dc7      	ldrb	r7, [r0, r7]
 8007d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d24:	4637      	mov	r7, r6
 8007d26:	42bb      	cmp	r3, r7
 8007d28:	460e      	mov	r6, r1
 8007d2a:	d9f4      	bls.n	8007d16 <_printf_i+0x116>
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d10b      	bne.n	8007d48 <_printf_i+0x148>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	07de      	lsls	r6, r3, #31
 8007d34:	d508      	bpl.n	8007d48 <_printf_i+0x148>
 8007d36:	6923      	ldr	r3, [r4, #16]
 8007d38:	6861      	ldr	r1, [r4, #4]
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	bfde      	ittt	le
 8007d3e:	2330      	movle	r3, #48	; 0x30
 8007d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d48:	1b52      	subs	r2, r2, r5
 8007d4a:	6122      	str	r2, [r4, #16]
 8007d4c:	f8cd a000 	str.w	sl, [sp]
 8007d50:	464b      	mov	r3, r9
 8007d52:	aa03      	add	r2, sp, #12
 8007d54:	4621      	mov	r1, r4
 8007d56:	4640      	mov	r0, r8
 8007d58:	f7ff fee4 	bl	8007b24 <_printf_common>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d14a      	bne.n	8007df6 <_printf_i+0x1f6>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b004      	add	sp, #16
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	f043 0320 	orr.w	r3, r3, #32
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	4833      	ldr	r0, [pc, #204]	; (8007e40 <_printf_i+0x240>)
 8007d74:	2778      	movs	r7, #120	; 0x78
 8007d76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	6829      	ldr	r1, [r5, #0]
 8007d7e:	061f      	lsls	r7, r3, #24
 8007d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d84:	d402      	bmi.n	8007d8c <_printf_i+0x18c>
 8007d86:	065f      	lsls	r7, r3, #25
 8007d88:	bf48      	it	mi
 8007d8a:	b2b6      	uxthmi	r6, r6
 8007d8c:	07df      	lsls	r7, r3, #31
 8007d8e:	bf48      	it	mi
 8007d90:	f043 0320 	orrmi.w	r3, r3, #32
 8007d94:	6029      	str	r1, [r5, #0]
 8007d96:	bf48      	it	mi
 8007d98:	6023      	strmi	r3, [r4, #0]
 8007d9a:	b91e      	cbnz	r6, 8007da4 <_printf_i+0x1a4>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f023 0320 	bic.w	r3, r3, #32
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	2310      	movs	r3, #16
 8007da6:	e7a7      	b.n	8007cf8 <_printf_i+0xf8>
 8007da8:	4824      	ldr	r0, [pc, #144]	; (8007e3c <_printf_i+0x23c>)
 8007daa:	e7e4      	b.n	8007d76 <_printf_i+0x176>
 8007dac:	4615      	mov	r5, r2
 8007dae:	e7bd      	b.n	8007d2c <_printf_i+0x12c>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	6826      	ldr	r6, [r4, #0]
 8007db4:	6961      	ldr	r1, [r4, #20]
 8007db6:	1d18      	adds	r0, r3, #4
 8007db8:	6028      	str	r0, [r5, #0]
 8007dba:	0635      	lsls	r5, r6, #24
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_i+0x1c4>
 8007dc0:	6019      	str	r1, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <_printf_i+0x1ca>
 8007dc4:	0670      	lsls	r0, r6, #25
 8007dc6:	d5fb      	bpl.n	8007dc0 <_printf_i+0x1c0>
 8007dc8:	8019      	strh	r1, [r3, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	4615      	mov	r5, r2
 8007dd0:	e7bc      	b.n	8007d4c <_printf_i+0x14c>
 8007dd2:	682b      	ldr	r3, [r5, #0]
 8007dd4:	1d1a      	adds	r2, r3, #4
 8007dd6:	602a      	str	r2, [r5, #0]
 8007dd8:	681d      	ldr	r5, [r3, #0]
 8007dda:	6862      	ldr	r2, [r4, #4]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7f8 fa16 	bl	8000210 <memchr>
 8007de4:	b108      	cbz	r0, 8007dea <_printf_i+0x1ea>
 8007de6:	1b40      	subs	r0, r0, r5
 8007de8:	6060      	str	r0, [r4, #4]
 8007dea:	6863      	ldr	r3, [r4, #4]
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	2300      	movs	r3, #0
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df4:	e7aa      	b.n	8007d4c <_printf_i+0x14c>
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	47d0      	blx	sl
 8007e00:	3001      	adds	r0, #1
 8007e02:	d0ad      	beq.n	8007d60 <_printf_i+0x160>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	079b      	lsls	r3, r3, #30
 8007e08:	d413      	bmi.n	8007e32 <_printf_i+0x232>
 8007e0a:	68e0      	ldr	r0, [r4, #12]
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	4298      	cmp	r0, r3
 8007e10:	bfb8      	it	lt
 8007e12:	4618      	movlt	r0, r3
 8007e14:	e7a6      	b.n	8007d64 <_printf_i+0x164>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4632      	mov	r2, r6
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	47d0      	blx	sl
 8007e20:	3001      	adds	r0, #1
 8007e22:	d09d      	beq.n	8007d60 <_printf_i+0x160>
 8007e24:	3501      	adds	r5, #1
 8007e26:	68e3      	ldr	r3, [r4, #12]
 8007e28:	9903      	ldr	r1, [sp, #12]
 8007e2a:	1a5b      	subs	r3, r3, r1
 8007e2c:	42ab      	cmp	r3, r5
 8007e2e:	dcf2      	bgt.n	8007e16 <_printf_i+0x216>
 8007e30:	e7eb      	b.n	8007e0a <_printf_i+0x20a>
 8007e32:	2500      	movs	r5, #0
 8007e34:	f104 0619 	add.w	r6, r4, #25
 8007e38:	e7f5      	b.n	8007e26 <_printf_i+0x226>
 8007e3a:	bf00      	nop
 8007e3c:	0800826a 	.word	0x0800826a
 8007e40:	0800827b 	.word	0x0800827b

08007e44 <__sflush_r>:
 8007e44:	898a      	ldrh	r2, [r1, #12]
 8007e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	0710      	lsls	r0, r2, #28
 8007e4e:	460c      	mov	r4, r1
 8007e50:	d458      	bmi.n	8007f04 <__sflush_r+0xc0>
 8007e52:	684b      	ldr	r3, [r1, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc05      	bgt.n	8007e64 <__sflush_r+0x20>
 8007e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dc02      	bgt.n	8007e64 <__sflush_r+0x20>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d0f9      	beq.n	8007e5e <__sflush_r+0x1a>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e70:	682f      	ldr	r7, [r5, #0]
 8007e72:	6a21      	ldr	r1, [r4, #32]
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	d032      	beq.n	8007ede <__sflush_r+0x9a>
 8007e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	075a      	lsls	r2, r3, #29
 8007e7e:	d505      	bpl.n	8007e8c <__sflush_r+0x48>
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	1ac0      	subs	r0, r0, r3
 8007e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e86:	b10b      	cbz	r3, 8007e8c <__sflush_r+0x48>
 8007e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e8a:	1ac0      	subs	r0, r0, r3
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e92:	6a21      	ldr	r1, [r4, #32]
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b0      	blx	r6
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	d106      	bne.n	8007eac <__sflush_r+0x68>
 8007e9e:	6829      	ldr	r1, [r5, #0]
 8007ea0:	291d      	cmp	r1, #29
 8007ea2:	d82b      	bhi.n	8007efc <__sflush_r+0xb8>
 8007ea4:	4a29      	ldr	r2, [pc, #164]	; (8007f4c <__sflush_r+0x108>)
 8007ea6:	410a      	asrs	r2, r1
 8007ea8:	07d6      	lsls	r6, r2, #31
 8007eaa:	d427      	bmi.n	8007efc <__sflush_r+0xb8>
 8007eac:	2200      	movs	r2, #0
 8007eae:	6062      	str	r2, [r4, #4]
 8007eb0:	04d9      	lsls	r1, r3, #19
 8007eb2:	6922      	ldr	r2, [r4, #16]
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	d504      	bpl.n	8007ec2 <__sflush_r+0x7e>
 8007eb8:	1c42      	adds	r2, r0, #1
 8007eba:	d101      	bne.n	8007ec0 <__sflush_r+0x7c>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b903      	cbnz	r3, 8007ec2 <__sflush_r+0x7e>
 8007ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec4:	602f      	str	r7, [r5, #0]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d0c9      	beq.n	8007e5e <__sflush_r+0x1a>
 8007eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	d002      	beq.n	8007ed8 <__sflush_r+0x94>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fbea 	bl	80076ac <_free_r>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	6360      	str	r0, [r4, #52]	; 0x34
 8007edc:	e7c0      	b.n	8007e60 <__sflush_r+0x1c>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	1c41      	adds	r1, r0, #1
 8007ee6:	d1c8      	bne.n	8007e7a <__sflush_r+0x36>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c5      	beq.n	8007e7a <__sflush_r+0x36>
 8007eee:	2b1d      	cmp	r3, #29
 8007ef0:	d001      	beq.n	8007ef6 <__sflush_r+0xb2>
 8007ef2:	2b16      	cmp	r3, #22
 8007ef4:	d101      	bne.n	8007efa <__sflush_r+0xb6>
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	e7b1      	b.n	8007e5e <__sflush_r+0x1a>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	e7ad      	b.n	8007e60 <__sflush_r+0x1c>
 8007f04:	690f      	ldr	r7, [r1, #16]
 8007f06:	2f00      	cmp	r7, #0
 8007f08:	d0a9      	beq.n	8007e5e <__sflush_r+0x1a>
 8007f0a:	0793      	lsls	r3, r2, #30
 8007f0c:	680e      	ldr	r6, [r1, #0]
 8007f0e:	bf08      	it	eq
 8007f10:	694b      	ldreq	r3, [r1, #20]
 8007f12:	600f      	str	r7, [r1, #0]
 8007f14:	bf18      	it	ne
 8007f16:	2300      	movne	r3, #0
 8007f18:	eba6 0807 	sub.w	r8, r6, r7
 8007f1c:	608b      	str	r3, [r1, #8]
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	dd9c      	ble.n	8007e5e <__sflush_r+0x1a>
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f28:	4643      	mov	r3, r8
 8007f2a:	463a      	mov	r2, r7
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b0      	blx	r6
 8007f30:	2800      	cmp	r0, #0
 8007f32:	dc06      	bgt.n	8007f42 <__sflush_r+0xfe>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	e78e      	b.n	8007e60 <__sflush_r+0x1c>
 8007f42:	4407      	add	r7, r0
 8007f44:	eba8 0800 	sub.w	r8, r8, r0
 8007f48:	e7e9      	b.n	8007f1e <__sflush_r+0xda>
 8007f4a:	bf00      	nop
 8007f4c:	dfbffffe 	.word	0xdfbffffe

08007f50 <_fflush_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b913      	cbnz	r3, 8007f60 <_fflush_r+0x10>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	b118      	cbz	r0, 8007f6a <_fflush_r+0x1a>
 8007f62:	6a03      	ldr	r3, [r0, #32]
 8007f64:	b90b      	cbnz	r3, 8007f6a <_fflush_r+0x1a>
 8007f66:	f7ff f9a9 	bl	80072bc <__sinit>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f3      	beq.n	8007f5a <_fflush_r+0xa>
 8007f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f74:	07d0      	lsls	r0, r2, #31
 8007f76:	d404      	bmi.n	8007f82 <_fflush_r+0x32>
 8007f78:	0599      	lsls	r1, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_fflush_r+0x32>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f7ff fb92 	bl	80076a6 <__retarget_lock_acquire_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	4621      	mov	r1, r4
 8007f86:	f7ff ff5d 	bl	8007e44 <__sflush_r>
 8007f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f8c:	07da      	lsls	r2, r3, #31
 8007f8e:	4605      	mov	r5, r0
 8007f90:	d4e4      	bmi.n	8007f5c <_fflush_r+0xc>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	059b      	lsls	r3, r3, #22
 8007f96:	d4e1      	bmi.n	8007f5c <_fflush_r+0xc>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f7ff fb85 	bl	80076a8 <__retarget_lock_release_recursive>
 8007f9e:	e7dd      	b.n	8007f5c <_fflush_r+0xc>

08007fa0 <__swhatbuf_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	b096      	sub	sp, #88	; 0x58
 8007fac:	4615      	mov	r5, r2
 8007fae:	461e      	mov	r6, r3
 8007fb0:	da0d      	bge.n	8007fce <__swhatbuf_r+0x2e>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	bf0c      	ite	eq
 8007fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fc2:	2340      	movne	r3, #64	; 0x40
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	6031      	str	r1, [r6, #0]
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	b016      	add	sp, #88	; 0x58
 8007fcc:	bd70      	pop	{r4, r5, r6, pc}
 8007fce:	466a      	mov	r2, sp
 8007fd0:	f000 f848 	bl	8008064 <_fstat_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dbec      	blt.n	8007fb2 <__swhatbuf_r+0x12>
 8007fd8:	9901      	ldr	r1, [sp, #4]
 8007fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fe2:	4259      	negs	r1, r3
 8007fe4:	4159      	adcs	r1, r3
 8007fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fea:	e7eb      	b.n	8007fc4 <__swhatbuf_r+0x24>

08007fec <__smakebuf_r>:
 8007fec:	898b      	ldrh	r3, [r1, #12]
 8007fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff0:	079d      	lsls	r5, r3, #30
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d507      	bpl.n	8008008 <__smakebuf_r+0x1c>
 8007ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2301      	movs	r3, #1
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	b002      	add	sp, #8
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	ab01      	add	r3, sp, #4
 800800a:	466a      	mov	r2, sp
 800800c:	f7ff ffc8 	bl	8007fa0 <__swhatbuf_r>
 8008010:	9900      	ldr	r1, [sp, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff fbb5 	bl	8007784 <_malloc_r>
 800801a:	b948      	cbnz	r0, 8008030 <__smakebuf_r+0x44>
 800801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d4ef      	bmi.n	8008004 <__smakebuf_r+0x18>
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	e7e3      	b.n	8007ff8 <__smakebuf_r+0xc>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	6020      	str	r0, [r4, #0]
 8008034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	9b00      	ldr	r3, [sp, #0]
 800803c:	6163      	str	r3, [r4, #20]
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	6120      	str	r0, [r4, #16]
 8008042:	b15b      	cbz	r3, 800805c <__smakebuf_r+0x70>
 8008044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008048:	4630      	mov	r0, r6
 800804a:	f000 f81d 	bl	8008088 <_isatty_r>
 800804e:	b128      	cbz	r0, 800805c <__smakebuf_r+0x70>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f023 0303 	bic.w	r3, r3, #3
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	431d      	orrs	r5, r3
 8008060:	81a5      	strh	r5, [r4, #12]
 8008062:	e7cf      	b.n	8008004 <__smakebuf_r+0x18>

08008064 <_fstat_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_fstat_r+0x20>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7f9 fe40 	bl	8001cf6 <_fstat>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_fstat_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_fstat_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	20000878 	.word	0x20000878

08008088 <_isatty_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_isatty_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7f9 fe3f 	bl	8001d16 <_isatty>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_isatty_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_isatty_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000878 	.word	0x20000878

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_sbrk_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7f9 fe48 	bl	8001d48 <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20000878 	.word	0x20000878

080080c8 <_init>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr

080080d4 <_fini>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr
