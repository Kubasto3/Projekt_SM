
TestDistance5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080066e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08006750  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  080067f0  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000084c  200001a8  08006890  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200009f4  08006890  000209f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 15 .debug_info   000165aa  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a86  00000000  00000000  000367c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012d8  00000000  00000000  00039250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000eb3  00000000  00000000  0003a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002885a  00000000  00000000  0003b3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001604d  00000000  00000000  00063c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000faa26  00000000  00000000  00079c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000595c  00000000  00000000  001746a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  0017a004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006668 	.word	0x08006668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ac 	.word	0x200001ac
 800020c:	08006668 	.word	0x08006668

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOF

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 8083 	bne.w	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11a      	bne.n	8000dd8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f003 fa55 	bl	8004254 <HAL_TIM_ReadCapturedValue>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020a 	bic.w	r2, r2, #10
 8000dc4:	621a      	str	r2, [r3, #32]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0202 	orr.w	r2, r2, #2
 8000dd4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000dd6:	e063      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d15f      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f003 fa36 	bl	8004254 <HAL_TIM_ReadCapturedValue>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d907      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00f      	b.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d909      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e30:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb7c 	bl	8000534 <__aeabi_ui2d>
 8000e3c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ea8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbf1 	bl	8000628 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f7ff fd11 	bl	800087c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fdf3 	bl	8000a4c <__aeabi_d2uiz>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e6c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020a 	bic.w	r2, r2, #10
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a12      	ldr	r2, [r2, #32]
 8000e8e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0202 	bic.w	r2, r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	b020c49c 	.word	0xb020c49c
 8000eac:	3fa16872 	.word	0x3fa16872
 8000eb0:	20000894 	.word	0x20000894
 8000eb4:	20000888 	.word	0x20000888
 8000eb8:	2000088c 	.word	0x2000088c
 8000ebc:	20000890 	.word	0x20000890
 8000ec0:	20000895 	.word	0x20000895
 8000ec4:	200002ac 	.word	0x200002ac

08000ec8 <delay>:

void delay(uint8_t time){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <delay+0x30>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eda:	bf00      	nop
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <delay+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <delay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200002ac 	.word	0x200002ac

08000efc <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HCSR04_Read+0x38>)
 8000f08:	f001 fc14 	bl	8002734 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f7ff ffdb 	bl	8000ec8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HCSR04_Read+0x38>)
 8000f1a:	f001 fc0b 	bl	8002734 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	60da      	str	r2, [r3, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021400 	.word	0x40021400
 8000f38:	200002ac 	.word	0x200002ac

08000f3c <__io_putchar>:

int __io_putchar(int ch)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d102      	bne.n	8000f50 <__io_putchar+0x14>
    __io_putchar('\r');
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f7ff fff6 	bl	8000f3c <__io_putchar>
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <__io_putchar+0x2c>)
 8000f5a:	f003 fcd1 	bl	8004900 <HAL_UART_Transmit>

  return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200002f8 	.word	0x200002f8

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f000 fd7b 	bl	8001a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f820 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 f98c 	bl	8001294 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f7c:	f000 f884 	bl	8001088 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f80:	f000 f92a 	bl	80011d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f84:	f000 f958 	bl	8001238 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000f88:	f000 f8cc 	bl	8001124 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <main+0x40>)
 8000f90:	f002 fe54 	bl	8003c3c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HCSR04_Read();
 8000f94:	f7ff ffb2 	bl	8000efc <HCSR04_Read>
	  HAL_Delay(200);
 8000f98:	20c8      	movs	r0, #200	; 0xc8
 8000f9a:	f000 fdc3 	bl	8001b24 <HAL_Delay>
	  printf("value = %u\n", Distance);
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <main+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <main+0x48>)
 8000fa6:	f004 fce9 	bl	800597c <iprintf>
	  HCSR04_Read();
 8000faa:	e7f3      	b.n	8000f94 <main+0x28>
 8000fac:	200002ac 	.word	0x200002ac
 8000fb0:	20000895 	.word	0x20000895
 8000fb4:	08006680 	.word	0x08006680

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 fd2d 	bl	8005a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fdc:	f001 fd0c 	bl	80029f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <SystemClock_Config+0xc8>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <SystemClock_Config+0xc8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <SystemClock_Config+0xcc>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <SystemClock_Config+0xcc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001018:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800102c:	2348      	movs	r3, #72	; 0x48
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001034:	2303      	movs	r3, #3
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fceb 	bl	8002a18 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001048:	f000 f9f4 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f001 ff79 	bl	8002f60 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001074:	f000 f9de 	bl	8001434 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	; 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_ETH_Init+0x84>)
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <MX_ETH_Init+0x88>)
 8001090:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ETH_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ETH_Init+0x8c>)
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ETH_Init+0x8c>)
 80010a0:	22e1      	movs	r2, #225	; 0xe1
 80010a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_ETH_Init+0x8c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ETH_Init+0x8c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_ETH_Init+0x8c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_ETH_Init+0x84>)
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <MX_ETH_Init+0x8c>)
 80010ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_ETH_Init+0x84>)
 80010be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_ETH_Init+0x84>)
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <MX_ETH_Init+0x90>)
 80010c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_ETH_Init+0x84>)
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_ETH_Init+0x94>)
 80010ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_ETH_Init+0x84>)
 80010d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_ETH_Init+0x84>)
 80010da:	f000 fe59 	bl	8001d90 <HAL_ETH_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010e4:	f000 f9a6 	bl	8001434 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010e8:	2238      	movs	r2, #56	; 0x38
 80010ea:	2100      	movs	r1, #0
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_ETH_Init+0x98>)
 80010ee:	f004 fc9a 	bl	8005a26 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_ETH_Init+0x98>)
 80010f4:	2221      	movs	r2, #33	; 0x21
 80010f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_ETH_Init+0x98>)
 80010fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_ETH_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001fc 	.word	0x200001fc
 8001110:	40028000 	.word	0x40028000
 8001114:	20000898 	.word	0x20000898
 8001118:	20000108 	.word	0x20000108
 800111c:	20000068 	.word	0x20000068
 8001120:	200001c4 	.word	0x200001c4

08001124 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001144:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_TIM1_Init+0xb0>)
 8001146:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_TIM1_Init+0xac>)
 800114a:	2247      	movs	r2, #71	; 0x47
 800114c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001156:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800115a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_TIM1_Init+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM1_Init+0xac>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001170:	f002 fd0c 	bl	8003b8c <HAL_TIM_IC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 f95b 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_TIM1_Init+0xac>)
 8001192:	f003 fabb 	bl	800470c <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800119c:	f000 f94a 	bl	8001434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM1_Init+0xac>)
 80011b8:	f002 ffaf 	bl	800411a <HAL_TIM_IC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80011c2:	f000 f937 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002ac 	.word	0x200002ac
 80011d4:	40010000 	.word	0x40010000

080011d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_USART3_UART_Init+0x5c>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART3_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART3_UART_Init+0x58>)
 800121c:	f003 fb22 	bl	8004864 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 f905 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002f8 	.word	0x200002f8
 8001234:	40004800 	.word	0x40004800

08001238 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001242:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2206      	movs	r2, #6
 8001248:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2202      	movs	r2, #2
 800124e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2201      	movs	r2, #1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	f001 fa73 	bl	8002766 <HAL_PCD_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 f8d5 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000380 	.word	0x20000380

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	4b57      	ldr	r3, [pc, #348]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a56      	ldr	r2, [pc, #344]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a50      	ldr	r2, [pc, #320]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <MX_GPIO_Init+0x18c>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <MX_GPIO_Init+0x18c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a44      	ldr	r2, [pc, #272]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <MX_GPIO_Init+0x18c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a38      	ldr	r2, [pc, #224]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a32      	ldr	r2, [pc, #200]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <MX_GPIO_Init+0x18c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001370:	482c      	ldr	r0, [pc, #176]	; (8001424 <MX_GPIO_Init+0x190>)
 8001372:	f001 f9df 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	482a      	ldr	r0, [pc, #168]	; (8001428 <MX_GPIO_Init+0x194>)
 800137e:	f001 f9d9 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2140      	movs	r1, #64	; 0x40
 8001386:	4829      	ldr	r0, [pc, #164]	; (800142c <MX_GPIO_Init+0x198>)
 8001388:	f001 f9d4 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <MX_GPIO_Init+0x19c>)
 80013a4:	f001 f81a 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_GPIO_Init+0x190>)
 80013c2:	f001 f80b 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <MX_GPIO_Init+0x194>)
 80013e0:	f000 fffc 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_GPIO_Init+0x198>)
 80013fc:	f000 ffee 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_GPIO_Init+0x198>)
 8001414:	f000 ffe2 	bl	80023dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020400 	.word	0x40020400
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40020800 	.word	0x40020800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x44>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x44>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x44>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x44>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x44>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_ETH_MspInit+0x158>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f040 8096 	bne.w	80015d8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014ac:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 8001542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_ETH_MspInit+0x15c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001554:	2332      	movs	r3, #50	; 0x32
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001564:	230b      	movs	r3, #11
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <HAL_ETH_MspInit+0x160>)
 8001570:	f000 ff34 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001574:	2386      	movs	r3, #134	; 0x86
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <HAL_ETH_MspInit+0x164>)
 8001590:	f000 ff24 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a6:	230b      	movs	r3, #11
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <HAL_ETH_MspInit+0x168>)
 80015b2:	f000 ff13 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c8:	230b      	movs	r3, #11
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <HAL_ETH_MspInit+0x16c>)
 80015d4:	f000 ff02 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40028000 	.word	0x40028000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40021800 	.word	0x40021800

080015f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d130      	bne.n	800167c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_TIM_IC_MspInit+0x90>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <HAL_TIM_IC_MspInit+0x94>)
 8001668:	f000 feb8 	bl	80023dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	201b      	movs	r0, #27
 8001672:	f000 fb56 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001676:	201b      	movs	r0, #27
 8001678:	f000 fb6f 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40010000 	.word	0x40010000
 8001688:	40023800 	.word	0x40023800
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0aa      	sub	sp, #168	; 0xa8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2284      	movs	r2, #132	; 0x84
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f9b8 	bl	8005a26 <memset>
  if(huart->Instance==USART3)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_UART_MspInit+0xb4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13c      	bne.n	800173a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fe6c 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016da:	f7ff feab 	bl	8001434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_UART_MspInit+0xb8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_UART_MspInit+0xb8>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_MspInit+0xb8>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_MspInit+0xb8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_UART_MspInit+0xb8>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0xb8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001728:	2307      	movs	r3, #7
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0xbc>)
 8001736:	f000 fe51 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	37a8      	adds	r7, #168	; 0xa8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40004800 	.word	0x40004800
 8001748:	40023800 	.word	0x40023800
 800174c:	40020c00 	.word	0x40020c00

08001750 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ac      	sub	sp, #176	; 0xb0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	2284      	movs	r2, #132	; 0x84
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f004 f958 	bl	8005a26 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800177e:	d159      	bne.n	8001834 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001784:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fe0b 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800179c:	f7ff fe4a 	bl	8001434 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_PCD_MspInit+0xec>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_PCD_MspInit+0xec>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_PCD_MspInit+0xec>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017d2:	230a      	movs	r3, #10
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017dc:	4619      	mov	r1, r3
 80017de:	4818      	ldr	r0, [pc, #96]	; (8001840 <HAL_PCD_MspInit+0xf0>)
 80017e0:	f000 fdfc 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_PCD_MspInit+0xf0>)
 8001800:	f000 fdec 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_PCD_MspInit+0xec>)
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_PCD_MspInit+0xec>)
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	6353      	str	r3, [r2, #52]	; 0x34
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_PCD_MspInit+0xec>)
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_PCD_MspInit+0xec>)
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_PCD_MspInit+0xec>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001826:	6453      	str	r3, [r2, #68]	; 0x44
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_PCD_MspInit+0xec>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	37b0      	adds	r7, #176	; 0xb0
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f928 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM1_CC_IRQHandler+0x10>)
 800189e:	f002 fb1d 	bl	8003edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002ac 	.word	0x200002ac

080018ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
  }

  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb1b 	bl	8000f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
  }
  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f004 f884 	bl	8005ac4 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20050000 	.word	0x20050000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	200008a0 	.word	0x200008a0
 80019f0:	200009f8 	.word	0x200009f8

080019f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd7 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f004 f843 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fa8f 	bl	8000f6c <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a5c:	080066e8 	.word	0x080066e8
  ldr r2, =_sbss
 8001a60:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001a64:	200009f4 	.word	0x200009f4

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>

08001a6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6e:	2003      	movs	r0, #3
 8001a70:	f000 f94c 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 f805 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7a:	f7ff fce1 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f967 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f92f 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008
 8001b08:	200008a4 	.word	0x200008a4

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200008a4 	.word	0x200008a4

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x40>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	05fa0000 	.word	0x05fa0000

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06a      	b.n	8001e78 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2223      	movs	r2, #35	; 0x23
 8001db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fb67 	bl	8001488 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_ETH_Init+0xf0>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <HAL_ETH_Init+0xf0>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_ETH_Init+0xf0>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_ETH_Init+0xf4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <HAL_ETH_Init+0xf4>)
 8001dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ddc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_ETH_Init+0xf4>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_ETH_Init+0xf4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_ETH_Init+0xf4>)
 8001dee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fe80 	bl	8001b0c <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e0e:	e011      	b.n	8001e34 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e10:	f7ff fe7c 	bl	8001b0c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e1e:	d909      	bls.n	8001e34 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	22e0      	movs	r2, #224	; 0xe0
 8001e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e021      	b.n	8001e78 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e4      	bne.n	8001e10 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f958 	bl	80020fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f9ff 	bl	8002250 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fa55 	bl	8002302 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f9bd 	bl	80021e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2210      	movs	r2, #16
 8001e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800

08001e88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <ETH_SetMACConfig+0x15c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7c1b      	ldrb	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <ETH_SetMACConfig+0x28>
 8001eaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eae:	e000      	b.n	8001eb2 <ETH_SetMACConfig+0x2a>
 8001eb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7c5b      	ldrb	r3, [r3, #17]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <ETH_SetMACConfig+0x38>
 8001eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ebe:	e000      	b.n	8001ec2 <ETH_SetMACConfig+0x3a>
 8001ec0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ec2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ec8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7fdb      	ldrb	r3, [r3, #31]
 8001ece:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	7f92      	ldrb	r2, [r2, #30]
 8001edc:	2a00      	cmp	r2, #0
 8001ede:	d102      	bne.n	8001ee6 <ETH_SetMACConfig+0x5e>
 8001ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee4:	e000      	b.n	8001ee8 <ETH_SetMACConfig+0x60>
 8001ee6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
 8001eee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d102      	bne.n	8001f10 <ETH_SetMACConfig+0x88>
 8001f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0e:	e000      	b.n	8001f12 <ETH_SetMACConfig+0x8a>
 8001f10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7bdb      	ldrb	r3, [r3, #15]
 8001f18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff fdee 	bl	8001b24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f6e:	2a00      	cmp	r2, #0
 8001f70:	d101      	bne.n	8001f76 <ETH_SetMACConfig+0xee>
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0xf0>
 8001f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0x106>
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0x108>
 8001f8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f98:	2a01      	cmp	r2, #1
 8001f9a:	d101      	bne.n	8001fa0 <ETH_SetMACConfig+0x118>
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	e000      	b.n	8001fa2 <ETH_SetMACConfig+0x11a>
 8001fa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001faa:	2a01      	cmp	r2, #1
 8001fac:	d101      	bne.n	8001fb2 <ETH_SetMACConfig+0x12a>
 8001fae:	2202      	movs	r2, #2
 8001fb0:	e000      	b.n	8001fb4 <ETH_SetMACConfig+0x12c>
 8001fb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fda9 	bl	8001b24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	ff20810f 	.word	0xff20810f

08001fe8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <ETH_SetDMAConfig+0x110>)
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7b1b      	ldrb	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <ETH_SetDMAConfig+0x2c>
 800200e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002012:	e000      	b.n	8002016 <ETH_SetDMAConfig+0x2e>
 8002014:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7b5b      	ldrb	r3, [r3, #13]
 800201a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	7f52      	ldrb	r2, [r2, #29]
 8002022:	2a00      	cmp	r2, #0
 8002024:	d102      	bne.n	800202c <ETH_SetDMAConfig+0x44>
 8002026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800202a:	e000      	b.n	800202e <ETH_SetDMAConfig+0x46>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	7b9b      	ldrb	r3, [r3, #14]
 8002034:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002036:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800203c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	7f1b      	ldrb	r3, [r3, #28]
 8002042:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7f9b      	ldrb	r3, [r3, #30]
 800204a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800204c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002052:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800205c:	4313      	orrs	r3, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fd50 	bl	8001b24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff fd21 	bl	8001b24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	f8de3f23 	.word	0xf8de3f23

080020fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0a6      	sub	sp, #152	; 0x98
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002138:	2300      	movs	r3, #0
 800213a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002142:	2300      	movs	r3, #0
 8002144:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800215e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002168:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002170:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fe86 	bl	8001e88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800217c:	2301      	movs	r3, #1
 800217e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002180:	2301      	movs	r3, #1
 8002182:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800218a:	2301      	movs	r3, #1
 800218c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff08 	bl	8001fe8 <ETH_SetDMAConfig>
}
 80021d8:	bf00      	nop
 80021da:	3798      	adds	r7, #152	; 0x98
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3305      	adds	r3, #5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	3204      	adds	r2, #4
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <ETH_MACAddressConfig+0x68>)
 8002202:	4413      	add	r3, r2
 8002204:	461a      	mov	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3303      	adds	r3, #3
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	061a      	lsls	r2, r3, #24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3302      	adds	r3, #2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3301      	adds	r3, #1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	4313      	orrs	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <ETH_MACAddressConfig+0x6c>)
 8002232:	4413      	add	r3, r2
 8002234:	461a      	mov	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	6013      	str	r3, [r2, #0]
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40028040 	.word	0x40028040
 800224c:	40028044 	.word	0x40028044

08002250 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e03e      	b.n	80022dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	3206      	adds	r2, #6
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d80c      	bhi.n	80022c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e004      	b.n	80022ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d9bd      	bls.n	800225e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e046      	b.n	800239e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2200      	movs	r2, #0
 800232c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800234c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002354:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	3212      	adds	r2, #18
 800236a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d80c      	bhi.n	800238e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	e004      	b.n	8002398 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3301      	adds	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d9b5      	bls.n	8002310 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e175      	b.n	80026e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 8164 	bne.w	80026e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_Init+0x56>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b03      	cmp	r3, #3
 800249e:	d017      	beq.n	80024d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d123      	bne.n	8002524 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80be 	beq.w	80026e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_GPIO_Init+0x324>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_GPIO_Init+0x324>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_GPIO_Init+0x324>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800257e:	4a61      	ldr	r2, [pc, #388]	; (8002704 <HAL_GPIO_Init+0x328>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d037      	beq.n	800261a <HAL_GPIO_Init+0x23e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_GPIO_Init+0x23a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a56      	ldr	r2, [pc, #344]	; (8002710 <HAL_GPIO_Init+0x334>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x236>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a55      	ldr	r2, [pc, #340]	; (8002714 <HAL_GPIO_Init+0x338>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x232>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a54      	ldr	r2, [pc, #336]	; (8002718 <HAL_GPIO_Init+0x33c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x22e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a53      	ldr	r2, [pc, #332]	; (800271c <HAL_GPIO_Init+0x340>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x22a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_GPIO_Init+0x344>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x226>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a51      	ldr	r2, [pc, #324]	; (8002724 <HAL_GPIO_Init+0x348>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_GPIO_Init+0x34c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x21e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_GPIO_Init+0x350>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x21a>
 80025f2:	2309      	movs	r3, #9
 80025f4:	e012      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025f6:	230a      	movs	r3, #10
 80025f8:	e010      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e00e      	b.n	800261c <HAL_GPIO_Init+0x240>
 80025fe:	2307      	movs	r3, #7
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002602:	2306      	movs	r3, #6
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x240>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x240>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x240>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x240>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	; (8002704 <HAL_GPIO_Init+0x328>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_GPIO_Init+0x354>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a34      	ldr	r2, [pc, #208]	; (8002730 <HAL_GPIO_Init+0x354>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_GPIO_Init+0x354>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a29      	ldr	r2, [pc, #164]	; (8002730 <HAL_GPIO_Init+0x354>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_GPIO_Init+0x354>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_GPIO_Init+0x354>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_GPIO_Init+0x354>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_GPIO_Init+0x354>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f ae86 	bls.w	80023fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40021c00 	.word	0x40021c00
 8002728:	40022000 	.word	0x40022000
 800272c:	40022400 	.word	0x40022400
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002768:	b08f      	sub	sp, #60	; 0x3c
 800276a:	af0a      	add	r7, sp, #40	; 0x28
 800276c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e116      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe ffdc 	bl	8001750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fd82 	bl	80052c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	687e      	ldr	r6, [r7, #4]
 80027c4:	466d      	mov	r5, sp
 80027c6:	f106 0410 	add.w	r4, r6, #16
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027da:	1d33      	adds	r3, r6, #4
 80027dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f002 fd16 	bl	8005210 <USB_CoreInit>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0d7      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fd70 	bl	80052e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e04a      	b.n	800289e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	333d      	adds	r3, #61	; 0x3d
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	333c      	adds	r3, #60	; 0x3c
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	b298      	uxth	r0, r3
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3344      	adds	r3, #68	; 0x44
 8002844:	4602      	mov	r2, r0
 8002846:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3340      	adds	r3, #64	; 0x40
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3348      	adds	r3, #72	; 0x48
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	; 0x4c
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3354      	adds	r3, #84	; 0x54
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3af      	bcc.n	8002808 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e044      	b.n	8002938 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3b5      	bcc.n	80028ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	687e      	ldr	r6, [r7, #4]
 800294a:	466d      	mov	r5, sp
 800294c:	f106 0410 	add.w	r4, r6, #16
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002960:	1d33      	adds	r3, r6, #4
 8002962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002964:	6838      	ldr	r0, [r7, #0]
 8002966:	f002 fd09 	bl	800537c <USB_DevInit>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e014      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	d102      	bne.n	800299a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f80b 	bl	80029b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fec7 	bl	8005732 <USB_DevDisconnect>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	10000003 	.word	0x10000003

080029f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40007000 	.word	0x40007000

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e291      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	4b96      	ldr	r3, [pc, #600]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a48:	4b93      	ldr	r3, [pc, #588]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d112      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x130>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d168      	bne.n	8002b48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e26b      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7a>
 8002a84:	4b84      	ldr	r3, [pc, #528]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a83      	ldr	r2, [pc, #524]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x9c>
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7b      	ldr	r2, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc0>
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a75      	ldr	r2, [pc, #468]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a72      	ldr	r2, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b6c      	ldr	r3, [pc, #432]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6b      	ldr	r2, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff f808 	bl	8001b0c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff f804 	bl	8001b0c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e21f      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe8>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fff4 	bl	8001b0c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fff0 	bl	8001b0c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e20b      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x110>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d069      	beq.n	8002c2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x190>
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1df      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	493d      	ldr	r1, [pc, #244]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e040      	b.n	8002c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe ffa6 	bl	8001b0c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe ffa2 	bl	8001b0c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1bd      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4929      	ldr	r1, [pc, #164]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
 8002bf6:	e018      	b.n	8002c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe ff82 	bl	8001b0c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe ff7e 	bl	8001b0c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e199      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d038      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe ff5f 	bl	8001b0c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe ff5b 	bl	8001b0c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e176      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x23a>
 8002c70:	e01a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe ff45 	bl	8001b0c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c86:	f7fe ff41 	bl	8001b0c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d903      	bls.n	8002c9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e15c      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
 8002c98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a4 	beq.w	8002dfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe ff09 	bl	8001b0c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7fe ff05 	bl	8001b0c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e120      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x31a>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d30:	e02d      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x33c>
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	e01c      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x35e>
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a60      	ldr	r2, [pc, #384]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d015      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7fe feb9 	bl	8001b0c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe feb5 	bl	8001b0c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0ce      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ee      	beq.n	8002d9e <HAL_RCC_OscConfig+0x386>
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fea3 	bl	8001b0c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe fe9f 	bl	8001b0c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0b8      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a4 	beq.w	8002f50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d06b      	beq.n	8002eec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d149      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fe70 	bl	8001b0c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fe6c 	bl	8001b0c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e087      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	3b01      	subs	r3, #1
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	4313      	orrs	r3, r2
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fe40 	bl	8001b0c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fe3c 	bl	8001b0c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e057      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x478>
 8002eae:	e04f      	b.n	8002f50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fe26 	bl	8001b0c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fe22 	bl	8001b0c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e03d      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4ac>
 8002ee2:	e035      	b.n	8002f50 <HAL_RCC_OscConfig+0x538>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x544>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d121      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d11a      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4965      	ldr	r1, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe fd5a 	bl	8001b0c <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fd56 	bl	8001b0c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4922      	ldr	r1, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fcb6 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	0800668c 	.word	0x0800668c
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b094      	sub	sp, #80	; 0x50
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	2300      	movs	r3, #0
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80e1 	bhi.w	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e0db      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b73      	ldr	r3, [pc, #460]	; (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003170:	e0db      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b73      	ldr	r3, [pc, #460]	; (8003340 <HAL_RCC_GetSysClockFreq+0x208>)
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003176:	e0d8      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
 8003198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
 80031a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4621      	mov	r1, r4
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	6139      	str	r1, [r7, #16]
 80031c8:	4629      	mov	r1, r5
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	ebb2 0801 	subs.w	r8, r2, r1
 80031f0:	4659      	mov	r1, fp
 80031f2:	eb63 0901 	sbc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	462b      	mov	r3, r5
 8003218:	eb49 0303 	adc.w	r3, r9, r3
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800322a:	4629      	mov	r1, r5
 800322c:	024b      	lsls	r3, r1, #9
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003234:	4621      	mov	r1, r4
 8003236:	024a      	lsls	r2, r1, #9
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003248:	f7fd fc20 	bl	8000a8c <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003254:	e058      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b38      	ldr	r3, [pc, #224]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	2200      	movs	r2, #0
 800325e:	4618      	mov	r0, r3
 8003260:	4611      	mov	r1, r2
 8003262:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0159      	lsls	r1, r3, #5
 800327e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003282:	0150      	lsls	r0, r2, #5
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4641      	mov	r1, r8
 800328a:	ebb2 0a01 	subs.w	sl, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb63 0b01 	sbc.w	fp, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a8:	ebb2 040a 	subs.w	r4, r2, sl
 80032ac:	eb63 050b 	sbc.w	r5, r3, fp
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb45 0303 	adc.w	r3, r5, r3
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032de:	4629      	mov	r1, r5
 80032e0:	028b      	lsls	r3, r1, #10
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e8:	4621      	mov	r1, r4
 80032ea:	028a      	lsls	r2, r1, #10
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f2:	2200      	movs	r2, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	61fa      	str	r2, [r7, #28]
 80032f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fc:	f7fd fbc6 	bl	8000a8c <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800332c:	4618      	mov	r0, r3
 800332e:	3750      	adds	r7, #80	; 0x50
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	00f42400 	.word	0x00f42400
 8003340:	007a1200 	.word	0x007a1200

08003344 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_RCC_GetHCLKFreq+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003360:	f7ff fff0 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	0800669c 	.word	0x0800669c

08003384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003388:	f7ff ffdc 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0b5b      	lsrs	r3, r3, #13
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4903      	ldr	r1, [pc, #12]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	0800669c 	.word	0x0800669c

080033ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d4:	4b69      	ldr	r3, [pc, #420]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a68      	ldr	r2, [pc, #416]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033de:	6093      	str	r3, [r2, #8]
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	4964      	ldr	r1, [pc, #400]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	4959      	ldr	r1, [pc, #356]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	494a      	ldr	r1, [pc, #296]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 808b 	beq.w	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	6413      	str	r3, [r2, #64]	; 0x40
 800349c:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a34      	ldr	r2, [pc, #208]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fe fb2a 	bl	8001b0c <HAL_GetTick>
 80034b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fe fb26 	bl	8001b0c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e357      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ce:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d035      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d02e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800351a:	4a18      	ldr	r2, [pc, #96]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d114      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe faee 	bl	8001b0c <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe faea 	bl	8001b0c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e319      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ee      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003562:	d111      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003572:	400b      	ands	r3, r1
 8003574:	4901      	ldr	r1, [pc, #4]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
 800357a:	e00b      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800357c:	40023800 	.word	0x40023800
 8003580:	40007000 	.word	0x40007000
 8003584:	0ffffcff 	.word	0x0ffffcff
 8003588:	4baa      	ldr	r3, [pc, #680]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4aa9      	ldr	r2, [pc, #676]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003592:	6093      	str	r3, [r2, #8]
 8003594:	4ba7      	ldr	r3, [pc, #668]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	49a4      	ldr	r1, [pc, #656]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035b2:	4ba0      	ldr	r3, [pc, #640]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b8:	4a9e      	ldr	r2, [pc, #632]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035c2:	4b9c      	ldr	r3, [pc, #624]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	4999      	ldr	r1, [pc, #612]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e0:	4b94      	ldr	r3, [pc, #592]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ee:	4991      	ldr	r1, [pc, #580]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003602:	4b8c      	ldr	r3, [pc, #560]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	4988      	ldr	r1, [pc, #544]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003624:	4b83      	ldr	r3, [pc, #524]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	4980      	ldr	r1, [pc, #512]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003646:	4b7b      	ldr	r3, [pc, #492]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4977      	ldr	r1, [pc, #476]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003668:	4b72      	ldr	r3, [pc, #456]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	496f      	ldr	r1, [pc, #444]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f023 020c 	bic.w	r2, r3, #12
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	4966      	ldr	r1, [pc, #408]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	495e      	ldr	r1, [pc, #376]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	4955      	ldr	r1, [pc, #340]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003712:	4b48      	ldr	r3, [pc, #288]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4944      	ldr	r1, [pc, #272]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	493c      	ldr	r1, [pc, #240]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003764:	4933      	ldr	r1, [pc, #204]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003778:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	492b      	ldr	r1, [pc, #172]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800379a:	4b26      	ldr	r3, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a8:	4922      	ldr	r1, [pc, #136]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	4912      	ldr	r1, [pc, #72]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380c:	4909      	ldr	r1, [pc, #36]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d006      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80d9 	beq.w	80039da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003828:	4b02      	ldr	r3, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a01      	ldr	r2, [pc, #4]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003832:	e001      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003834:	40023800 	.word	0x40023800
 8003838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383a:	f7fe f967 	bl	8001b0c <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003842:	f7fe f963 	bl	8001b0c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b64      	cmp	r3, #100	; 0x64
 800384e:	d901      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e194      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003854:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d021      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003882:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	019a      	lsls	r2, r3, #6
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	061b      	lsls	r3, r3, #24
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	071b      	lsls	r3, r3, #28
 80038a8:	4957      	ldr	r1, [pc, #348]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038da:	d129      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f0:	0f1b      	lsrs	r3, r3, #28
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	019a      	lsls	r2, r3, #6
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	071b      	lsls	r3, r3, #28
 8003910:	493d      	ldr	r1, [pc, #244]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003918:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391e:	f023 021f 	bic.w	r2, r3, #31
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	3b01      	subs	r3, #1
 8003928:	4937      	ldr	r1, [pc, #220]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800393c:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	0e1b      	lsrs	r3, r3, #24
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800394a:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003950:	0f1b      	lsrs	r3, r3, #28
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	019a      	lsls	r2, r3, #6
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	071b      	lsls	r3, r3, #28
 8003970:	4925      	ldr	r1, [pc, #148]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	019a      	lsls	r2, r3, #6
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	071b      	lsls	r3, r3, #28
 80039a0:	4919      	ldr	r1, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe f8aa 	bl	8001b0c <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039bc:	f7fe f8a6 	bl	8001b0c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0d7      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 80cd 	bne.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fe f88d 	bl	8001b0c <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f6:	f7fe f889 	bl	8001b0c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b64      	cmp	r3, #100	; 0x64
 8003a02:	d903      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0ba      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a18:	d0ed      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12a      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a42:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a50:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	019a      	lsls	r2, r3, #6
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	4944      	ldr	r1, [pc, #272]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7e:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	493d      	ldr	r1, [pc, #244]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d11d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003abc:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	0f1b      	lsrs	r3, r3, #28
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	019a      	lsls	r2, r3, #6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	4929      	ldr	r1, [pc, #164]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	019a      	lsls	r2, r3, #6
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	071b      	lsls	r3, r3, #28
 8003b2a:	4917      	ldr	r1, [pc, #92]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4911      	ldr	r1, [pc, #68]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd ffda 	bl	8001b0c <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b5c:	f7fd ffd6 	bl	8001b0c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e007      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7a:	d1ef      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e049      	b.n	8003c32 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fd20 	bl	80015f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fbae 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_IC_Start_IT+0x1e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e023      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x66>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start_IT+0x2e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e01b      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x66>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start_IT+0x3e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e013      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x66>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_IC_Start_IT+0x4e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x66>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Start_IT+0x5e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e003      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x66>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_TIM_IC_Start_IT+0x78>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e013      	b.n	8003cdc <HAL_TIM_IC_Start_IT+0xa0>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d104      	bne.n	8003cc4 <HAL_TIM_IC_Start_IT+0x88>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e00b      	b.n	8003cdc <HAL_TIM_IC_Start_IT+0xa0>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d104      	bne.n	8003cd4 <HAL_TIM_IC_Start_IT+0x98>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e003      	b.n	8003cdc <HAL_TIM_IC_Start_IT+0xa0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ce4:	7b7b      	ldrb	r3, [r7, #13]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0e2      	b.n	8003eb4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_IC_Start_IT+0xc2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	e023      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x10a>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Start_IT+0xd2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e01b      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x10a>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0xe2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	e013      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x10a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0xf2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d2c:	e00b      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x10a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start_IT+0x102>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3c:	e003      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x10a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_IC_Start_IT+0x11a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	e013      	b.n	8003d7e <HAL_TIM_IC_Start_IT+0x142>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_IC_Start_IT+0x12a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d64:	e00b      	b.n	8003d7e <HAL_TIM_IC_Start_IT+0x142>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_IC_Start_IT+0x13a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d74:	e003      	b.n	8003d7e <HAL_TIM_IC_Start_IT+0x142>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d841      	bhi.n	8003e08 <HAL_TIM_IC_Start_IT+0x1cc>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_TIM_IC_Start_IT+0x150>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003e09 	.word	0x08003e09
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	08003e09 	.word	0x08003e09
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e09 	.word	0x08003e09
 8003da8:	08003e09 	.word	0x08003e09
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003df7 	.word	0x08003df7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0202 	orr.w	r2, r2, #2
 8003dce:	60da      	str	r2, [r3, #12]
      break;
 8003dd0:	e01d      	b.n	8003e0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0204 	orr.w	r2, r2, #4
 8003de0:	60da      	str	r2, [r3, #12]
      break;
 8003de2:	e014      	b.n	8003e0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	60da      	str	r2, [r3, #12]
      break;
 8003df4:	e00b      	b.n	8003e0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0210 	orr.w	r2, r2, #16
 8003e04:	60da      	str	r2, [r3, #12]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d14e      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fc4f 	bl	80046c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <HAL_TIM_IC_Start_IT+0x280>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d01d      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_TIM_IC_Start_IT+0x284>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_TIM_IC_Start_IT+0x288>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_TIM_IC_Start_IT+0x28c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_TIM_IC_Start_IT+0x290>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_TIM_IC_Start_IT+0x294>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIM_IC_Start_IT+0x236>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_IC_Start_IT+0x298>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d115      	bne.n	8003e9e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_TIM_IC_Start_IT+0x29c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d015      	beq.n	8003eb0 <HAL_TIM_IC_Start_IT+0x274>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8a:	d011      	beq.n	8003eb0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9c:	e008      	b.n	8003eb0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e000      	b.n	8003eb2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40010400 	.word	0x40010400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40001800 	.word	0x40001800
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0202 	mvn.w	r2, #2
 8003f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc ff32 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9e2 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f9e9 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc ff08 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9b8 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9bf 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0208 	mvn.w	r2, #8
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fede 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f98e 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f995 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc feb4 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f964 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f96b 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0201 	mvn.w	r2, #1
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f93e 	bl	80042dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fbd8 	bl	800483c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fbcb 	bl	8004850 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f919 	bl	8004318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb8b 	bl	8004828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004134:	2302      	movs	r3, #2
 8004136:	e088      	b.n	800424a <HAL_TIM_IC_ConfigChannel+0x130>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11b      	bne.n	800417e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004156:	f000 f989 	bl	800446c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 020c 	bic.w	r2, r2, #12
 8004168:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6999      	ldr	r1, [r3, #24]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	e060      	b.n	8004240 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11c      	bne.n	80041be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004194:	f000 f9de 	bl	8004554 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021a      	lsls	r2, r3, #8
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	619a      	str	r2, [r3, #24]
 80041bc:	e040      	b.n	8004240 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041d4:	f000 f9fb 	bl	80045ce <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 020c 	bic.w	r2, r2, #12
 80041e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69d9      	ldr	r1, [r3, #28]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]
 80041fa:	e021      	b.n	8004240 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d11c      	bne.n	800423c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004212:	f000 fa18 	bl	8004646 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004224:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	021a      	lsls	r2, r3, #8
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	61da      	str	r2, [r3, #28]
 800423a:	e001      	b.n	8004240 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d831      	bhi.n	80042cc <HAL_TIM_ReadCapturedValue+0x78>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_TIM_ReadCapturedValue+0x1c>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042cd 	.word	0x080042cd
 800427c:	080042cd 	.word	0x080042cd
 8004280:	080042af 	.word	0x080042af
 8004284:	080042cd 	.word	0x080042cd
 8004288:	080042cd 	.word	0x080042cd
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042cd 	.word	0x080042cd
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080042cd 	.word	0x080042cd
 80042a0:	080042c3 	.word	0x080042c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	60fb      	str	r3, [r7, #12]

      break;
 80042ac:	e00f      	b.n	80042ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	60fb      	str	r3, [r7, #12]

      break;
 80042b6:	e00a      	b.n	80042ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	60fb      	str	r3, [r7, #12]

      break;
 80042c0:	e005      	b.n	80042ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	60fb      	str	r3, [r7, #12]

      break;
 80042ca:	e000      	b.n	80042ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042cc:	bf00      	nop
  }

  return tmpreg;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a40      	ldr	r2, [pc, #256]	; (8004440 <TIM_Base_SetConfig+0x114>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <TIM_Base_SetConfig+0x118>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <TIM_Base_SetConfig+0x11c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3b      	ldr	r2, [pc, #236]	; (800444c <TIM_Base_SetConfig+0x120>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3a      	ldr	r2, [pc, #232]	; (8004450 <TIM_Base_SetConfig+0x124>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <TIM_Base_SetConfig+0x114>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d02b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d027      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <TIM_Base_SetConfig+0x118>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d023      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <TIM_Base_SetConfig+0x11c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2a      	ldr	r2, [pc, #168]	; (800444c <TIM_Base_SetConfig+0x120>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a29      	ldr	r2, [pc, #164]	; (8004450 <TIM_Base_SetConfig+0x124>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a28      	ldr	r2, [pc, #160]	; (8004454 <TIM_Base_SetConfig+0x128>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <TIM_Base_SetConfig+0x12c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <TIM_Base_SetConfig+0x130>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a25      	ldr	r2, [pc, #148]	; (8004460 <TIM_Base_SetConfig+0x134>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <TIM_Base_SetConfig+0x138>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a23      	ldr	r2, [pc, #140]	; (8004468 <TIM_Base_SetConfig+0x13c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <TIM_Base_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0c      	ldr	r2, [pc, #48]	; (8004450 <TIM_Base_SetConfig+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	615a      	str	r2, [r3, #20]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40010400 	.word	0x40010400
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800
 8004460:	40001800 	.word	0x40001800
 8004464:	40001c00 	.word	0x40001c00
 8004468:	40002000 	.word	0x40002000

0800446c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <TIM_TI1_SetConfig+0xcc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01b      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d017      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <TIM_TI1_SetConfig+0xd0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <TIM_TI1_SetConfig+0xd4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00f      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <TIM_TI1_SetConfig+0xd8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <TIM_TI1_SetConfig+0xdc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a21      	ldr	r2, [pc, #132]	; (800454c <TIM_TI1_SetConfig+0xe0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_TI1_SetConfig+0x66>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <TIM_TI1_SetConfig+0xe4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <TIM_TI1_SetConfig+0x6a>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <TIM_TI1_SetConfig+0x6c>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e003      	b.n	80044f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	b2db      	uxtb	r3, r3
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 030a 	and.w	r3, r3, #10
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40010400 	.word	0x40010400
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800

08004554 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0210 	bic.w	r2, r3, #16
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	031b      	lsls	r3, r3, #12
 8004598:	b29b      	uxth	r3, r3
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	b2db      	uxtb	r3, r3
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800461e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	b29b      	uxth	r3, r3
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004698:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2201      	movs	r2, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	401a      	ands	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e06d      	b.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800475e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d01d      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10c      	bne.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40010000 	.word	0x40010000
 8004810:	40010400 	.word	0x40010400
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800

08004828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e040      	b.n	80048f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc ff02 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2224      	movs	r2, #36	; 0x24
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8b0 	bl	8004a08 <UART_SetConfig>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e022      	b.n	80048f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb08 	bl	8004ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb8f 	bl	8005014 <UART_CheckIdleState>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	2b20      	cmp	r3, #32
 8004916:	d171      	bne.n	80049fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_UART_Transmit+0x24>
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e06a      	b.n	80049fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2221      	movs	r2, #33	; 0x21
 8004934:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004936:	f7fd f8e9 	bl	8001b0c <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d108      	bne.n	8004968 <HAL_UART_Transmit+0x68>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e003      	b.n	8004970 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004970:	e02c      	b.n	80049cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fb80 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e038      	b.n	80049fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3302      	adds	r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e007      	b.n	80049ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cc      	bne.n	8004972 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fb4d 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e005      	b.n	80049fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e000      	b.n	80049fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4ba6      	ldr	r3, [pc, #664]	; (8004ccc <UART_SetConfig+0x2c4>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a94      	ldr	r2, [pc, #592]	; (8004cd0 <UART_SetConfig+0x2c8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d120      	bne.n	8004ac6 <UART_SetConfig+0xbe>
 8004a84:	4b93      	ldr	r3, [pc, #588]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d816      	bhi.n	8004ac0 <UART_SetConfig+0xb8>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0x90>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004ab5 	.word	0x08004ab5
 8004aa0:	08004aaf 	.word	0x08004aaf
 8004aa4:	08004abb 	.word	0x08004abb
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e150      	b.n	8004d50 <UART_SetConfig+0x348>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e14d      	b.n	8004d50 <UART_SetConfig+0x348>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e14a      	b.n	8004d50 <UART_SetConfig+0x348>
 8004aba:	2308      	movs	r3, #8
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e147      	b.n	8004d50 <UART_SetConfig+0x348>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e144      	b.n	8004d50 <UART_SetConfig+0x348>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a83      	ldr	r2, [pc, #524]	; (8004cd8 <UART_SetConfig+0x2d0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d132      	bne.n	8004b36 <UART_SetConfig+0x12e>
 8004ad0:	4b80      	ldr	r3, [pc, #512]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d828      	bhi.n	8004b30 <UART_SetConfig+0x128>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xdc>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b31 	.word	0x08004b31
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b25 	.word	0x08004b25
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b1f 	.word	0x08004b1f
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b31 	.word	0x08004b31
 8004b14:	08004b2b 	.word	0x08004b2b
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e118      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e115      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b24:	2304      	movs	r3, #4
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e112      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e10f      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e10c      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a68      	ldr	r2, [pc, #416]	; (8004cdc <UART_SetConfig+0x2d4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d120      	bne.n	8004b82 <UART_SetConfig+0x17a>
 8004b40:	4b64      	ldr	r3, [pc, #400]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b4a:	2b30      	cmp	r3, #48	; 0x30
 8004b4c:	d013      	beq.n	8004b76 <UART_SetConfig+0x16e>
 8004b4e:	2b30      	cmp	r3, #48	; 0x30
 8004b50:	d814      	bhi.n	8004b7c <UART_SetConfig+0x174>
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d009      	beq.n	8004b6a <UART_SetConfig+0x162>
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d810      	bhi.n	8004b7c <UART_SetConfig+0x174>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <UART_SetConfig+0x15c>
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d006      	beq.n	8004b70 <UART_SetConfig+0x168>
 8004b62:	e00b      	b.n	8004b7c <UART_SetConfig+0x174>
 8004b64:	2300      	movs	r3, #0
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e0f2      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e0ef      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b70:	2304      	movs	r3, #4
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e0ec      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b76:	2308      	movs	r3, #8
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e0e9      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e0e6      	b.n	8004d50 <UART_SetConfig+0x348>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <UART_SetConfig+0x2d8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d120      	bne.n	8004bce <UART_SetConfig+0x1c6>
 8004b8c:	4b51      	ldr	r3, [pc, #324]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b96:	2bc0      	cmp	r3, #192	; 0xc0
 8004b98:	d013      	beq.n	8004bc2 <UART_SetConfig+0x1ba>
 8004b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9c:	d814      	bhi.n	8004bc8 <UART_SetConfig+0x1c0>
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0x1ae>
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d810      	bhi.n	8004bc8 <UART_SetConfig+0x1c0>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <UART_SetConfig+0x1a8>
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d006      	beq.n	8004bbc <UART_SetConfig+0x1b4>
 8004bae:	e00b      	b.n	8004bc8 <UART_SetConfig+0x1c0>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e0cc      	b.n	8004d50 <UART_SetConfig+0x348>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e0c9      	b.n	8004d50 <UART_SetConfig+0x348>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0c6      	b.n	8004d50 <UART_SetConfig+0x348>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e0c3      	b.n	8004d50 <UART_SetConfig+0x348>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0c0      	b.n	8004d50 <UART_SetConfig+0x348>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a44      	ldr	r2, [pc, #272]	; (8004ce4 <UART_SetConfig+0x2dc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d125      	bne.n	8004c24 <UART_SetConfig+0x21c>
 8004bd8:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be6:	d017      	beq.n	8004c18 <UART_SetConfig+0x210>
 8004be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bec:	d817      	bhi.n	8004c1e <UART_SetConfig+0x216>
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf2:	d00b      	beq.n	8004c0c <UART_SetConfig+0x204>
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf8:	d811      	bhi.n	8004c1e <UART_SetConfig+0x216>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <UART_SetConfig+0x1fe>
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c02:	d006      	beq.n	8004c12 <UART_SetConfig+0x20a>
 8004c04:	e00b      	b.n	8004c1e <UART_SetConfig+0x216>
 8004c06:	2300      	movs	r3, #0
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e0a1      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e09e      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c12:	2304      	movs	r3, #4
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e09b      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e098      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e095      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <UART_SetConfig+0x2e0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d125      	bne.n	8004c7a <UART_SetConfig+0x272>
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c3c:	d017      	beq.n	8004c6e <UART_SetConfig+0x266>
 8004c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c42:	d817      	bhi.n	8004c74 <UART_SetConfig+0x26c>
 8004c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c48:	d00b      	beq.n	8004c62 <UART_SetConfig+0x25a>
 8004c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4e:	d811      	bhi.n	8004c74 <UART_SetConfig+0x26c>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <UART_SetConfig+0x254>
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x260>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x26c>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e076      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e073      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e070      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e06d      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e06a      	b.n	8004d50 <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <UART_SetConfig+0x2e4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d138      	bne.n	8004cf6 <UART_SetConfig+0x2ee>
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <UART_SetConfig+0x2cc>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c92:	d017      	beq.n	8004cc4 <UART_SetConfig+0x2bc>
 8004c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c98:	d82a      	bhi.n	8004cf0 <UART_SetConfig+0x2e8>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d00b      	beq.n	8004cb8 <UART_SetConfig+0x2b0>
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca4:	d824      	bhi.n	8004cf0 <UART_SetConfig+0x2e8>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <UART_SetConfig+0x2aa>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x2b6>
 8004cb0:	e01e      	b.n	8004cf0 <UART_SetConfig+0x2e8>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e04b      	b.n	8004d50 <UART_SetConfig+0x348>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e048      	b.n	8004d50 <UART_SetConfig+0x348>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e045      	b.n	8004d50 <UART_SetConfig+0x348>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e042      	b.n	8004d50 <UART_SetConfig+0x348>
 8004cca:	bf00      	nop
 8004ccc:	efff69f3 	.word	0xefff69f3
 8004cd0:	40011000 	.word	0x40011000
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	40004800 	.word	0x40004800
 8004ce0:	40004c00 	.word	0x40004c00
 8004ce4:	40005000 	.word	0x40005000
 8004ce8:	40011400 	.word	0x40011400
 8004cec:	40007800 	.word	0x40007800
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e02c      	b.n	8004d50 <UART_SetConfig+0x348>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a72      	ldr	r2, [pc, #456]	; (8004ec4 <UART_SetConfig+0x4bc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d125      	bne.n	8004d4c <UART_SetConfig+0x344>
 8004d00:	4b71      	ldr	r3, [pc, #452]	; (8004ec8 <UART_SetConfig+0x4c0>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d0e:	d017      	beq.n	8004d40 <UART_SetConfig+0x338>
 8004d10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d14:	d817      	bhi.n	8004d46 <UART_SetConfig+0x33e>
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1a:	d00b      	beq.n	8004d34 <UART_SetConfig+0x32c>
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d811      	bhi.n	8004d46 <UART_SetConfig+0x33e>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <UART_SetConfig+0x326>
 8004d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d2a:	d006      	beq.n	8004d3a <UART_SetConfig+0x332>
 8004d2c:	e00b      	b.n	8004d46 <UART_SetConfig+0x33e>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e00d      	b.n	8004d50 <UART_SetConfig+0x348>
 8004d34:	2302      	movs	r3, #2
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e00a      	b.n	8004d50 <UART_SetConfig+0x348>
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e007      	b.n	8004d50 <UART_SetConfig+0x348>
 8004d40:	2308      	movs	r3, #8
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e004      	b.n	8004d50 <UART_SetConfig+0x348>
 8004d46:	2310      	movs	r3, #16
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e001      	b.n	8004d50 <UART_SetConfig+0x348>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	d15b      	bne.n	8004e12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d828      	bhi.n	8004db2 <UART_SetConfig+0x3aa>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <UART_SetConfig+0x360>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004db3 	.word	0x08004db3
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004db3 	.word	0x08004db3
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004dab 	.word	0x08004dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d8c:	f7fe fae6 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8004d90:	61b8      	str	r0, [r7, #24]
        break;
 8004d92:	e013      	b.n	8004dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7fe faf6 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8004d98:	61b8      	str	r0, [r7, #24]
        break;
 8004d9a:	e00f      	b.n	8004dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <UART_SetConfig+0x4c4>)
 8004d9e:	61bb      	str	r3, [r7, #24]
        break;
 8004da0:	e00c      	b.n	8004dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da2:	f7fe f9c9 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004da6:	61b8      	str	r0, [r7, #24]
        break;
 8004da8:	e008      	b.n	8004dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dae:	61bb      	str	r3, [r7, #24]
        break;
 8004db0:	e004      	b.n	8004dbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	77bb      	strb	r3, [r7, #30]
        break;
 8004dba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d074      	beq.n	8004eac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	005a      	lsls	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d916      	bls.n	8004e0c <UART_SetConfig+0x404>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de4:	d212      	bcs.n	8004e0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f023 030f 	bic.w	r3, r3, #15
 8004dee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	89fa      	ldrh	r2, [r7, #14]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	e04f      	b.n	8004eac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77bb      	strb	r3, [r7, #30]
 8004e10:	e04c      	b.n	8004eac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d828      	bhi.n	8004e6a <UART_SetConfig+0x462>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x418>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7fe fa8a 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8004e48:	61b8      	str	r0, [r7, #24]
        break;
 8004e4a:	e013      	b.n	8004e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe fa9a 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8004e50:	61b8      	str	r0, [r7, #24]
        break;
 8004e52:	e00f      	b.n	8004e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <UART_SetConfig+0x4c4>)
 8004e56:	61bb      	str	r3, [r7, #24]
        break;
 8004e58:	e00c      	b.n	8004e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fe f96d 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004e5e:	61b8      	str	r0, [r7, #24]
        break;
 8004e60:	e008      	b.n	8004e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e66:	61bb      	str	r3, [r7, #24]
        break;
 8004e68:	e004      	b.n	8004e74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	77bb      	strb	r3, [r7, #30]
        break;
 8004e72:	bf00      	nop
    }

    if (pclk != 0U)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	085a      	lsrs	r2, r3, #1
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b0f      	cmp	r3, #15
 8004e92:	d909      	bls.n	8004ea8 <UART_SetConfig+0x4a0>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d205      	bcs.n	8004ea8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e001      	b.n	8004eac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40007c00 	.word	0x40007c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fc fd72 	bl	8001b0c <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d10e      	bne.n	8005056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f81b 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e011      	b.n	800507a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b09c      	sub	sp, #112	; 0x70
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	e0a7      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	f000 80a3 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fc fd35 	bl	8001b0c <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80050ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13f      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	663b      	str	r3, [r7, #96]	; 0x60
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005106:	64ba      	str	r2, [r7, #72]	; 0x48
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800510c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e068      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d050      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005150:	d148      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800515a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
 800517c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3308      	adds	r3, #8
 8005194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3308      	adds	r3, #8
 80051ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ae:	623a      	str	r2, [r7, #32]
 80051b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e010      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f43f af48 	beq.w	8005094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3770      	adds	r7, #112	; 0x70
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005210:	b084      	sub	sp, #16
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	f107 001c 	add.w	r0, r7, #28
 800521e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	2b01      	cmp	r3, #1
 8005226:	d120      	bne.n	800526a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <USB_CoreInit+0xac>)
 800523a:	4013      	ands	r3, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800524c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa96 	bl	8005790 <USB_CoreReset>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e010      	b.n	800528c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa8a 	bl	8005790 <USB_CoreReset>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10b      	bne.n	80052aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f043 0206 	orr.w	r2, r3, #6
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b6:	b004      	add	sp, #16
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	ffbdffbf 	.word	0xffbdffbf

080052c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 0201 	bic.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d115      	bne.n	8005330 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005310:	2001      	movs	r0, #1
 8005312:	f7fc fc07 	bl	8001b24 <HAL_Delay>
      ms++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa29 	bl	8005774 <USB_GetMode>
 8005322:	4603      	mov	r3, r0
 8005324:	2b01      	cmp	r3, #1
 8005326:	d01e      	beq.n	8005366 <USB_SetCurrentMode+0x84>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b31      	cmp	r3, #49	; 0x31
 800532c:	d9f0      	bls.n	8005310 <USB_SetCurrentMode+0x2e>
 800532e:	e01a      	b.n	8005366 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d115      	bne.n	8005362 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005342:	2001      	movs	r0, #1
 8005344:	f7fc fbee 	bl	8001b24 <HAL_Delay>
      ms++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa10 	bl	8005774 <USB_GetMode>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <USB_SetCurrentMode+0x84>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b31      	cmp	r3, #49	; 0x31
 800535e:	d9f0      	bls.n	8005342 <USB_SetCurrentMode+0x60>
 8005360:	e001      	b.n	8005366 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e005      	b.n	8005372 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b32      	cmp	r3, #50	; 0x32
 800536a:	d101      	bne.n	8005370 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537c:	b084      	sub	sp, #16
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e009      	b.n	80053b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3340      	adds	r3, #64	; 0x40
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b0e      	cmp	r3, #14
 80053b4:	d9f2      	bls.n	800539c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11c      	bne.n	80053f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e005      	b.n	8005402 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005408:	461a      	mov	r2, r3
 800540a:	2300      	movs	r3, #0
 800540c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	4619      	mov	r1, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	461a      	mov	r2, r3
 800541e:	680b      	ldr	r3, [r1, #0]
 8005420:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2b01      	cmp	r3, #1
 8005426:	d10c      	bne.n	8005442 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800542e:	2100      	movs	r1, #0
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f965 	bl	8005700 <USB_SetDevSpeed>
 8005436:	e008      	b.n	800544a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005438:	2101      	movs	r1, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f960 	bl	8005700 <USB_SetDevSpeed>
 8005440:	e003      	b.n	800544a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005442:	2103      	movs	r1, #3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f95b 	bl	8005700 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800544a:	2110      	movs	r1, #16
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f8f3 	bl	8005638 <USB_FlushTxFifo>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f91f 	bl	80056a0 <USB_FlushRxFifo>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	461a      	mov	r2, r3
 8005480:	2300      	movs	r3, #0
 8005482:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	e043      	b.n	800551e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ac:	d118      	bne.n	80054e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e013      	b.n	80054f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	461a      	mov	r2, r3
 80054d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e008      	b.n	80054f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	2300      	movs	r3, #0
 80054f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	3301      	adds	r3, #1
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	429a      	cmp	r2, r3
 8005524:	d3b7      	bcc.n	8005496 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e043      	b.n	80055b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005542:	d118      	bne.n	8005576 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e013      	b.n	8005588 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e008      	b.n	8005588 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3301      	adds	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d3b7      	bcc.n	800552c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f043 0210 	orr.w	r2, r3, #16
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <USB_DevInit+0x2b4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f043 0208 	orr.w	r2, r3, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800560e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <USB_DevInit+0x2b8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800562c:	b004      	add	sp, #16
 800562e:	4770      	bx	lr
 8005630:	803c3800 	.word	0x803c3800
 8005634:	40000004 	.word	0x40000004

08005638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <USB_FlushTxFifo+0x64>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e01b      	b.n	8005690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	daf2      	bge.n	8005646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	019b      	lsls	r3, r3, #6
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a08      	ldr	r2, [pc, #32]	; (800569c <USB_FlushTxFifo+0x64>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e006      	b.n	8005690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d0f0      	beq.n	8005670 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	00030d40 	.word	0x00030d40

080056a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a11      	ldr	r2, [pc, #68]	; (80056fc <USB_FlushRxFifo+0x5c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e018      	b.n	80056f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	daf2      	bge.n	80056ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2210      	movs	r2, #16
 80056ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <USB_FlushRxFifo+0x5c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e006      	b.n	80056f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d0f0      	beq.n	80056d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	00030d40 	.word	0x00030d40

08005700 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005760:	f043 0302 	orr.w	r3, r3, #2
 8005764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0301 	and.w	r3, r3, #1
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <USB_CoreReset+0x64>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01b      	b.n	80057e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	daf2      	bge.n	800579c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <USB_CoreReset+0x64>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e006      	b.n	80057e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d0f0      	beq.n	80057c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <std>:
 80057f8:	2300      	movs	r3, #0
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4604      	mov	r4, r0
 80057fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005806:	6083      	str	r3, [r0, #8]
 8005808:	8181      	strh	r1, [r0, #12]
 800580a:	6643      	str	r3, [r0, #100]	; 0x64
 800580c:	81c2      	strh	r2, [r0, #14]
 800580e:	6183      	str	r3, [r0, #24]
 8005810:	4619      	mov	r1, r3
 8005812:	2208      	movs	r2, #8
 8005814:	305c      	adds	r0, #92	; 0x5c
 8005816:	f000 f906 	bl	8005a26 <memset>
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <std+0x58>)
 800581c:	6263      	str	r3, [r4, #36]	; 0x24
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <std+0x5c>)
 8005820:	62a3      	str	r3, [r4, #40]	; 0x28
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <std+0x60>)
 8005824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <std+0x64>)
 8005828:	6323      	str	r3, [r4, #48]	; 0x30
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <std+0x68>)
 800582c:	6224      	str	r4, [r4, #32]
 800582e:	429c      	cmp	r4, r3
 8005830:	d006      	beq.n	8005840 <std+0x48>
 8005832:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005836:	4294      	cmp	r4, r2
 8005838:	d002      	beq.n	8005840 <std+0x48>
 800583a:	33d0      	adds	r3, #208	; 0xd0
 800583c:	429c      	cmp	r4, r3
 800583e:	d105      	bne.n	800584c <std+0x54>
 8005840:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	f000 b966 	b.w	8005b18 <__retarget_lock_init_recursive>
 800584c:	bd10      	pop	{r4, pc}
 800584e:	bf00      	nop
 8005850:	080059a1 	.word	0x080059a1
 8005854:	080059c3 	.word	0x080059c3
 8005858:	080059fb 	.word	0x080059fb
 800585c:	08005a1f 	.word	0x08005a1f
 8005860:	200008a8 	.word	0x200008a8

08005864 <stdio_exit_handler>:
 8005864:	4a02      	ldr	r2, [pc, #8]	; (8005870 <stdio_exit_handler+0xc>)
 8005866:	4903      	ldr	r1, [pc, #12]	; (8005874 <stdio_exit_handler+0x10>)
 8005868:	4803      	ldr	r0, [pc, #12]	; (8005878 <stdio_exit_handler+0x14>)
 800586a:	f000 b869 	b.w	8005940 <_fwalk_sglue>
 800586e:	bf00      	nop
 8005870:	2000000c 	.word	0x2000000c
 8005874:	080063c5 	.word	0x080063c5
 8005878:	20000018 	.word	0x20000018

0800587c <cleanup_stdio>:
 800587c:	6841      	ldr	r1, [r0, #4]
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <cleanup_stdio+0x34>)
 8005880:	4299      	cmp	r1, r3
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	d001      	beq.n	800588c <cleanup_stdio+0x10>
 8005888:	f000 fd9c 	bl	80063c4 <_fflush_r>
 800588c:	68a1      	ldr	r1, [r4, #8]
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <cleanup_stdio+0x38>)
 8005890:	4299      	cmp	r1, r3
 8005892:	d002      	beq.n	800589a <cleanup_stdio+0x1e>
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fd95 	bl	80063c4 <_fflush_r>
 800589a:	68e1      	ldr	r1, [r4, #12]
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <cleanup_stdio+0x3c>)
 800589e:	4299      	cmp	r1, r3
 80058a0:	d004      	beq.n	80058ac <cleanup_stdio+0x30>
 80058a2:	4620      	mov	r0, r4
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f000 bd8c 	b.w	80063c4 <_fflush_r>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	200008a8 	.word	0x200008a8
 80058b4:	20000910 	.word	0x20000910
 80058b8:	20000978 	.word	0x20000978

080058bc <global_stdio_init.part.0>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <global_stdio_init.part.0+0x30>)
 80058c0:	4c0b      	ldr	r4, [pc, #44]	; (80058f0 <global_stdio_init.part.0+0x34>)
 80058c2:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <global_stdio_init.part.0+0x38>)
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	4620      	mov	r0, r4
 80058c8:	2200      	movs	r2, #0
 80058ca:	2104      	movs	r1, #4
 80058cc:	f7ff ff94 	bl	80057f8 <std>
 80058d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058d4:	2201      	movs	r2, #1
 80058d6:	2109      	movs	r1, #9
 80058d8:	f7ff ff8e 	bl	80057f8 <std>
 80058dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058e0:	2202      	movs	r2, #2
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e6:	2112      	movs	r1, #18
 80058e8:	f7ff bf86 	b.w	80057f8 <std>
 80058ec:	200009e0 	.word	0x200009e0
 80058f0:	200008a8 	.word	0x200008a8
 80058f4:	08005865 	.word	0x08005865

080058f8 <__sfp_lock_acquire>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__sfp_lock_acquire+0x8>)
 80058fa:	f000 b90e 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	200009e9 	.word	0x200009e9

08005904 <__sfp_lock_release>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_release+0x8>)
 8005906:	f000 b909 	b.w	8005b1c <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	200009e9 	.word	0x200009e9

08005910 <__sinit>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	f7ff fff0 	bl	80058f8 <__sfp_lock_acquire>
 8005918:	6a23      	ldr	r3, [r4, #32]
 800591a:	b11b      	cbz	r3, 8005924 <__sinit+0x14>
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f7ff bff0 	b.w	8005904 <__sfp_lock_release>
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <__sinit+0x28>)
 8005926:	6223      	str	r3, [r4, #32]
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <__sinit+0x2c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f5      	bne.n	800591c <__sinit+0xc>
 8005930:	f7ff ffc4 	bl	80058bc <global_stdio_init.part.0>
 8005934:	e7f2      	b.n	800591c <__sinit+0xc>
 8005936:	bf00      	nop
 8005938:	0800587d 	.word	0x0800587d
 800593c:	200009e0 	.word	0x200009e0

08005940 <_fwalk_sglue>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4607      	mov	r7, r0
 8005946:	4688      	mov	r8, r1
 8005948:	4614      	mov	r4, r2
 800594a:	2600      	movs	r6, #0
 800594c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005950:	f1b9 0901 	subs.w	r9, r9, #1
 8005954:	d505      	bpl.n	8005962 <_fwalk_sglue+0x22>
 8005956:	6824      	ldr	r4, [r4, #0]
 8005958:	2c00      	cmp	r4, #0
 800595a:	d1f7      	bne.n	800594c <_fwalk_sglue+0xc>
 800595c:	4630      	mov	r0, r6
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d907      	bls.n	8005978 <_fwalk_sglue+0x38>
 8005968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800596c:	3301      	adds	r3, #1
 800596e:	d003      	beq.n	8005978 <_fwalk_sglue+0x38>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	4306      	orrs	r6, r0
 8005978:	3568      	adds	r5, #104	; 0x68
 800597a:	e7e9      	b.n	8005950 <_fwalk_sglue+0x10>

0800597c <iprintf>:
 800597c:	b40f      	push	{r0, r1, r2, r3}
 800597e:	b507      	push	{r0, r1, r2, lr}
 8005980:	4906      	ldr	r1, [pc, #24]	; (800599c <iprintf+0x20>)
 8005982:	ab04      	add	r3, sp, #16
 8005984:	6808      	ldr	r0, [r1, #0]
 8005986:	f853 2b04 	ldr.w	r2, [r3], #4
 800598a:	6881      	ldr	r1, [r0, #8]
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	f000 f9e9 	bl	8005d64 <_vfiprintf_r>
 8005992:	b003      	add	sp, #12
 8005994:	f85d eb04 	ldr.w	lr, [sp], #4
 8005998:	b004      	add	sp, #16
 800599a:	4770      	bx	lr
 800599c:	20000064 	.word	0x20000064

080059a0 <__sread>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	460c      	mov	r4, r1
 80059a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a8:	f000 f868 	bl	8005a7c <_read_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	bfab      	itete	ge
 80059b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059b2:	89a3      	ldrhlt	r3, [r4, #12]
 80059b4:	181b      	addge	r3, r3, r0
 80059b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ba:	bfac      	ite	ge
 80059bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059be:	81a3      	strhlt	r3, [r4, #12]
 80059c0:	bd10      	pop	{r4, pc}

080059c2 <__swrite>:
 80059c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	461f      	mov	r7, r3
 80059c8:	898b      	ldrh	r3, [r1, #12]
 80059ca:	05db      	lsls	r3, r3, #23
 80059cc:	4605      	mov	r5, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	4616      	mov	r6, r2
 80059d2:	d505      	bpl.n	80059e0 <__swrite+0x1e>
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	2302      	movs	r3, #2
 80059da:	2200      	movs	r2, #0
 80059dc:	f000 f83c 	bl	8005a58 <_lseek_r>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	4632      	mov	r2, r6
 80059ee:	463b      	mov	r3, r7
 80059f0:	4628      	mov	r0, r5
 80059f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	f000 b853 	b.w	8005aa0 <_write_r>

080059fa <__sseek>:
 80059fa:	b510      	push	{r4, lr}
 80059fc:	460c      	mov	r4, r1
 80059fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a02:	f000 f829 	bl	8005a58 <_lseek_r>
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	bf15      	itete	ne
 8005a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a16:	81a3      	strheq	r3, [r4, #12]
 8005a18:	bf18      	it	ne
 8005a1a:	81a3      	strhne	r3, [r4, #12]
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <__sclose>:
 8005a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a22:	f000 b809 	b.w	8005a38 <_close_r>

08005a26 <memset>:
 8005a26:	4402      	add	r2, r0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d100      	bne.n	8005a30 <memset+0xa>
 8005a2e:	4770      	bx	lr
 8005a30:	f803 1b01 	strb.w	r1, [r3], #1
 8005a34:	e7f9      	b.n	8005a2a <memset+0x4>
	...

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fb ff6b 	bl	800191e <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200009e4 	.word	0x200009e4

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	; (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb ff80 	bl	800196c <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	200009e4 	.word	0x200009e4

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	; (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb ff0e 	bl	80018ac <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200009e4 	.word	0x200009e4

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb ff19 	bl	80018e6 <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200009e4 	.word	0x200009e4

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	; (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000064 	.word	0x20000064

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	; (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	; (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	; (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	; (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f000 fdc0 	bl	8006668 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	080066e0 	.word	0x080066e0
 8005b0c:	080066e0 	.word	0x080066e0
 8005b10:	080066e0 	.word	0x080066e0
 8005b14:	080066e4 	.word	0x080066e4

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr
	...

08005b20 <_free_r>:
 8005b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b22:	2900      	cmp	r1, #0
 8005b24:	d044      	beq.n	8005bb0 <_free_r+0x90>
 8005b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b2a:	9001      	str	r0, [sp, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b32:	bfb8      	it	lt
 8005b34:	18e4      	addlt	r4, r4, r3
 8005b36:	f000 f8df 	bl	8005cf8 <__malloc_lock>
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <_free_r+0x94>)
 8005b3c:	9801      	ldr	r0, [sp, #4]
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	b933      	cbnz	r3, 8005b50 <_free_r+0x30>
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	b003      	add	sp, #12
 8005b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b4c:	f000 b8da 	b.w	8005d04 <__malloc_unlock>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d908      	bls.n	8005b66 <_free_r+0x46>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	e7ed      	b.n	8005b42 <_free_r+0x22>
 8005b66:	461a      	mov	r2, r3
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b10b      	cbz	r3, 8005b70 <_free_r+0x50>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d9fa      	bls.n	8005b66 <_free_r+0x46>
 8005b70:	6811      	ldr	r1, [r2, #0]
 8005b72:	1855      	adds	r5, r2, r1
 8005b74:	42a5      	cmp	r5, r4
 8005b76:	d10b      	bne.n	8005b90 <_free_r+0x70>
 8005b78:	6824      	ldr	r4, [r4, #0]
 8005b7a:	4421      	add	r1, r4
 8005b7c:	1854      	adds	r4, r2, r1
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	d1e0      	bne.n	8005b46 <_free_r+0x26>
 8005b84:	681c      	ldr	r4, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	440c      	add	r4, r1
 8005b8c:	6014      	str	r4, [r2, #0]
 8005b8e:	e7da      	b.n	8005b46 <_free_r+0x26>
 8005b90:	d902      	bls.n	8005b98 <_free_r+0x78>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6003      	str	r3, [r0, #0]
 8005b96:	e7d6      	b.n	8005b46 <_free_r+0x26>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf04      	itt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	bf04      	itt	eq
 8005ba8:	1949      	addeq	r1, r1, r5
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6054      	str	r4, [r2, #4]
 8005bae:	e7ca      	b.n	8005b46 <_free_r+0x26>
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	200009ec 	.word	0x200009ec

08005bb8 <sbrk_aligned>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0e      	ldr	r6, [pc, #56]	; (8005bf4 <sbrk_aligned+0x3c>)
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	b911      	cbnz	r1, 8005bca <sbrk_aligned+0x12>
 8005bc4:	f000 fcbc 	bl	8006540 <_sbrk_r>
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fcb7 	bl	8006540 <_sbrk_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <sbrk_aligned+0x34>
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d007      	beq.n	8005bf0 <sbrk_aligned+0x38>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fcac 	bl	8006540 <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d101      	bne.n	8005bf0 <sbrk_aligned+0x38>
 8005bec:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	200009f0 	.word	0x200009f0

08005bf8 <_malloc_r>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d905      	bls.n	8005c20 <_malloc_r+0x28>
 8005c14:	230c      	movs	r3, #12
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	2600      	movs	r6, #0
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cf4 <_malloc_r+0xfc>
 8005c24:	f000 f868 	bl	8005cf8 <__malloc_lock>
 8005c28:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2c:	461c      	mov	r4, r3
 8005c2e:	bb5c      	cbnz	r4, 8005c88 <_malloc_r+0x90>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4638      	mov	r0, r7
 8005c34:	f7ff ffc0 	bl	8005bb8 <sbrk_aligned>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	d155      	bne.n	8005cea <_malloc_r+0xf2>
 8005c3e:	f8d8 4000 	ldr.w	r4, [r8]
 8005c42:	4626      	mov	r6, r4
 8005c44:	2e00      	cmp	r6, #0
 8005c46:	d145      	bne.n	8005cd4 <_malloc_r+0xdc>
 8005c48:	2c00      	cmp	r4, #0
 8005c4a:	d048      	beq.n	8005cde <_malloc_r+0xe6>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4638      	mov	r0, r7
 8005c52:	eb04 0903 	add.w	r9, r4, r3
 8005c56:	f000 fc73 	bl	8006540 <_sbrk_r>
 8005c5a:	4581      	cmp	r9, r0
 8005c5c:	d13f      	bne.n	8005cde <_malloc_r+0xe6>
 8005c5e:	6821      	ldr	r1, [r4, #0]
 8005c60:	1a6d      	subs	r5, r5, r1
 8005c62:	4629      	mov	r1, r5
 8005c64:	4638      	mov	r0, r7
 8005c66:	f7ff ffa7 	bl	8005bb8 <sbrk_aligned>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d037      	beq.n	8005cde <_malloc_r+0xe6>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	442b      	add	r3, r5
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	f8d8 3000 	ldr.w	r3, [r8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d038      	beq.n	8005cee <_malloc_r+0xf6>
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	42a2      	cmp	r2, r4
 8005c80:	d12b      	bne.n	8005cda <_malloc_r+0xe2>
 8005c82:	2200      	movs	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e00f      	b.n	8005ca8 <_malloc_r+0xb0>
 8005c88:	6822      	ldr	r2, [r4, #0]
 8005c8a:	1b52      	subs	r2, r2, r5
 8005c8c:	d41f      	bmi.n	8005cce <_malloc_r+0xd6>
 8005c8e:	2a0b      	cmp	r2, #11
 8005c90:	d917      	bls.n	8005cc2 <_malloc_r+0xca>
 8005c92:	1961      	adds	r1, r4, r5
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	6025      	str	r5, [r4, #0]
 8005c98:	bf18      	it	ne
 8005c9a:	6059      	strne	r1, [r3, #4]
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	bf08      	it	eq
 8005ca0:	f8c8 1000 	streq.w	r1, [r8]
 8005ca4:	5162      	str	r2, [r4, r5]
 8005ca6:	604b      	str	r3, [r1, #4]
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f104 060b 	add.w	r6, r4, #11
 8005cae:	f000 f829 	bl	8005d04 <__malloc_unlock>
 8005cb2:	f026 0607 	bic.w	r6, r6, #7
 8005cb6:	1d23      	adds	r3, r4, #4
 8005cb8:	1af2      	subs	r2, r6, r3
 8005cba:	d0ae      	beq.n	8005c1a <_malloc_r+0x22>
 8005cbc:	1b9b      	subs	r3, r3, r6
 8005cbe:	50a3      	str	r3, [r4, r2]
 8005cc0:	e7ab      	b.n	8005c1a <_malloc_r+0x22>
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6862      	ldr	r2, [r4, #4]
 8005cc6:	d1dd      	bne.n	8005c84 <_malloc_r+0x8c>
 8005cc8:	f8c8 2000 	str.w	r2, [r8]
 8005ccc:	e7ec      	b.n	8005ca8 <_malloc_r+0xb0>
 8005cce:	4623      	mov	r3, r4
 8005cd0:	6864      	ldr	r4, [r4, #4]
 8005cd2:	e7ac      	b.n	8005c2e <_malloc_r+0x36>
 8005cd4:	4634      	mov	r4, r6
 8005cd6:	6876      	ldr	r6, [r6, #4]
 8005cd8:	e7b4      	b.n	8005c44 <_malloc_r+0x4c>
 8005cda:	4613      	mov	r3, r2
 8005cdc:	e7cc      	b.n	8005c78 <_malloc_r+0x80>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f000 f80e 	bl	8005d04 <__malloc_unlock>
 8005ce8:	e797      	b.n	8005c1a <_malloc_r+0x22>
 8005cea:	6025      	str	r5, [r4, #0]
 8005cec:	e7dc      	b.n	8005ca8 <_malloc_r+0xb0>
 8005cee:	605b      	str	r3, [r3, #4]
 8005cf0:	deff      	udf	#255	; 0xff
 8005cf2:	bf00      	nop
 8005cf4:	200009ec 	.word	0x200009ec

08005cf8 <__malloc_lock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_lock+0x8>)
 8005cfa:	f7ff bf0e 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200009e8 	.word	0x200009e8

08005d04 <__malloc_unlock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__malloc_unlock+0x8>)
 8005d06:	f7ff bf09 	b.w	8005b1c <__retarget_lock_release_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	200009e8 	.word	0x200009e8

08005d10 <__sfputc_r>:
 8005d10:	6893      	ldr	r3, [r2, #8]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	b410      	push	{r4}
 8005d18:	6093      	str	r3, [r2, #8]
 8005d1a:	da08      	bge.n	8005d2e <__sfputc_r+0x1e>
 8005d1c:	6994      	ldr	r4, [r2, #24]
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	db01      	blt.n	8005d26 <__sfputc_r+0x16>
 8005d22:	290a      	cmp	r1, #10
 8005d24:	d103      	bne.n	8005d2e <__sfputc_r+0x1e>
 8005d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2a:	f000 bb73 	b.w	8006414 <__swbuf_r>
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	1c58      	adds	r0, r3, #1
 8005d32:	6010      	str	r0, [r2, #0]
 8005d34:	7019      	strb	r1, [r3, #0]
 8005d36:	4608      	mov	r0, r1
 8005d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <__sfputs_r>:
 8005d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d40:	4606      	mov	r6, r0
 8005d42:	460f      	mov	r7, r1
 8005d44:	4614      	mov	r4, r2
 8005d46:	18d5      	adds	r5, r2, r3
 8005d48:	42ac      	cmp	r4, r5
 8005d4a:	d101      	bne.n	8005d50 <__sfputs_r+0x12>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e007      	b.n	8005d60 <__sfputs_r+0x22>
 8005d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d54:	463a      	mov	r2, r7
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff ffda 	bl	8005d10 <__sfputc_r>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d1f3      	bne.n	8005d48 <__sfputs_r+0xa>
 8005d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d64 <_vfiprintf_r>:
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	460d      	mov	r5, r1
 8005d6a:	b09d      	sub	sp, #116	; 0x74
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	4698      	mov	r8, r3
 8005d70:	4606      	mov	r6, r0
 8005d72:	b118      	cbz	r0, 8005d7c <_vfiprintf_r+0x18>
 8005d74:	6a03      	ldr	r3, [r0, #32]
 8005d76:	b90b      	cbnz	r3, 8005d7c <_vfiprintf_r+0x18>
 8005d78:	f7ff fdca 	bl	8005910 <__sinit>
 8005d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d405      	bmi.n	8005d8e <_vfiprintf_r+0x2a>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	059a      	lsls	r2, r3, #22
 8005d86:	d402      	bmi.n	8005d8e <_vfiprintf_r+0x2a>
 8005d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8a:	f7ff fec6 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	071b      	lsls	r3, r3, #28
 8005d92:	d501      	bpl.n	8005d98 <_vfiprintf_r+0x34>
 8005d94:	692b      	ldr	r3, [r5, #16]
 8005d96:	b99b      	cbnz	r3, 8005dc0 <_vfiprintf_r+0x5c>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f000 fb78 	bl	8006490 <__swsetup_r>
 8005da0:	b170      	cbz	r0, 8005dc0 <_vfiprintf_r+0x5c>
 8005da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da4:	07dc      	lsls	r4, r3, #31
 8005da6:	d504      	bpl.n	8005db2 <_vfiprintf_r+0x4e>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b01d      	add	sp, #116	; 0x74
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	0598      	lsls	r0, r3, #22
 8005db6:	d4f7      	bmi.n	8005da8 <_vfiprintf_r+0x44>
 8005db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dba:	f7ff feaf 	bl	8005b1c <__retarget_lock_release_recursive>
 8005dbe:	e7f3      	b.n	8005da8 <_vfiprintf_r+0x44>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dce:	2330      	movs	r3, #48	; 0x30
 8005dd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f84 <_vfiprintf_r+0x220>
 8005dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dd8:	f04f 0901 	mov.w	r9, #1
 8005ddc:	4623      	mov	r3, r4
 8005dde:	469a      	mov	sl, r3
 8005de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de4:	b10a      	cbz	r2, 8005dea <_vfiprintf_r+0x86>
 8005de6:	2a25      	cmp	r2, #37	; 0x25
 8005de8:	d1f9      	bne.n	8005dde <_vfiprintf_r+0x7a>
 8005dea:	ebba 0b04 	subs.w	fp, sl, r4
 8005dee:	d00b      	beq.n	8005e08 <_vfiprintf_r+0xa4>
 8005df0:	465b      	mov	r3, fp
 8005df2:	4622      	mov	r2, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7ff ffa1 	bl	8005d3e <__sfputs_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f000 80a9 	beq.w	8005f54 <_vfiprintf_r+0x1f0>
 8005e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e04:	445a      	add	r2, fp
 8005e06:	9209      	str	r2, [sp, #36]	; 0x24
 8005e08:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80a1 	beq.w	8005f54 <_vfiprintf_r+0x1f0>
 8005e12:	2300      	movs	r3, #0
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e1c:	f10a 0a01 	add.w	sl, sl, #1
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	9307      	str	r3, [sp, #28]
 8005e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e28:	931a      	str	r3, [sp, #104]	; 0x68
 8005e2a:	4654      	mov	r4, sl
 8005e2c:	2205      	movs	r2, #5
 8005e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e32:	4854      	ldr	r0, [pc, #336]	; (8005f84 <_vfiprintf_r+0x220>)
 8005e34:	f7fa f9ec 	bl	8000210 <memchr>
 8005e38:	9a04      	ldr	r2, [sp, #16]
 8005e3a:	b9d8      	cbnz	r0, 8005e74 <_vfiprintf_r+0x110>
 8005e3c:	06d1      	lsls	r1, r2, #27
 8005e3e:	bf44      	itt	mi
 8005e40:	2320      	movmi	r3, #32
 8005e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e46:	0713      	lsls	r3, r2, #28
 8005e48:	bf44      	itt	mi
 8005e4a:	232b      	movmi	r3, #43	; 0x2b
 8005e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e50:	f89a 3000 	ldrb.w	r3, [sl]
 8005e54:	2b2a      	cmp	r3, #42	; 0x2a
 8005e56:	d015      	beq.n	8005e84 <_vfiprintf_r+0x120>
 8005e58:	9a07      	ldr	r2, [sp, #28]
 8005e5a:	4654      	mov	r4, sl
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f04f 0c0a 	mov.w	ip, #10
 8005e62:	4621      	mov	r1, r4
 8005e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e68:	3b30      	subs	r3, #48	; 0x30
 8005e6a:	2b09      	cmp	r3, #9
 8005e6c:	d94d      	bls.n	8005f0a <_vfiprintf_r+0x1a6>
 8005e6e:	b1b0      	cbz	r0, 8005e9e <_vfiprintf_r+0x13a>
 8005e70:	9207      	str	r2, [sp, #28]
 8005e72:	e014      	b.n	8005e9e <_vfiprintf_r+0x13a>
 8005e74:	eba0 0308 	sub.w	r3, r0, r8
 8005e78:	fa09 f303 	lsl.w	r3, r9, r3
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	46a2      	mov	sl, r4
 8005e82:	e7d2      	b.n	8005e2a <_vfiprintf_r+0xc6>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1d19      	adds	r1, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	9103      	str	r1, [sp, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfbb      	ittet	lt
 8005e90:	425b      	neglt	r3, r3
 8005e92:	f042 0202 	orrlt.w	r2, r2, #2
 8005e96:	9307      	strge	r3, [sp, #28]
 8005e98:	9307      	strlt	r3, [sp, #28]
 8005e9a:	bfb8      	it	lt
 8005e9c:	9204      	strlt	r2, [sp, #16]
 8005e9e:	7823      	ldrb	r3, [r4, #0]
 8005ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ea2:	d10c      	bne.n	8005ebe <_vfiprintf_r+0x15a>
 8005ea4:	7863      	ldrb	r3, [r4, #1]
 8005ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea8:	d134      	bne.n	8005f14 <_vfiprintf_r+0x1b0>
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	9203      	str	r2, [sp, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bfb8      	it	lt
 8005eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eba:	3402      	adds	r4, #2
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f94 <_vfiprintf_r+0x230>
 8005ec2:	7821      	ldrb	r1, [r4, #0]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f7fa f9a2 	bl	8000210 <memchr>
 8005ecc:	b138      	cbz	r0, 8005ede <_vfiprintf_r+0x17a>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	eba0 000a 	sub.w	r0, r0, sl
 8005ed4:	2240      	movs	r2, #64	; 0x40
 8005ed6:	4082      	lsls	r2, r0
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	3401      	adds	r4, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee2:	4829      	ldr	r0, [pc, #164]	; (8005f88 <_vfiprintf_r+0x224>)
 8005ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee8:	2206      	movs	r2, #6
 8005eea:	f7fa f991 	bl	8000210 <memchr>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d03f      	beq.n	8005f72 <_vfiprintf_r+0x20e>
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <_vfiprintf_r+0x228>)
 8005ef4:	bb1b      	cbnz	r3, 8005f3e <_vfiprintf_r+0x1da>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	3307      	adds	r3, #7
 8005efa:	f023 0307 	bic.w	r3, r3, #7
 8005efe:	3308      	adds	r3, #8
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f04:	443b      	add	r3, r7
 8005f06:	9309      	str	r3, [sp, #36]	; 0x24
 8005f08:	e768      	b.n	8005ddc <_vfiprintf_r+0x78>
 8005f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0e:	460c      	mov	r4, r1
 8005f10:	2001      	movs	r0, #1
 8005f12:	e7a6      	b.n	8005e62 <_vfiprintf_r+0xfe>
 8005f14:	2300      	movs	r3, #0
 8005f16:	3401      	adds	r4, #1
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f04f 0c0a 	mov.w	ip, #10
 8005f20:	4620      	mov	r0, r4
 8005f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f26:	3a30      	subs	r2, #48	; 0x30
 8005f28:	2a09      	cmp	r2, #9
 8005f2a:	d903      	bls.n	8005f34 <_vfiprintf_r+0x1d0>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0c6      	beq.n	8005ebe <_vfiprintf_r+0x15a>
 8005f30:	9105      	str	r1, [sp, #20]
 8005f32:	e7c4      	b.n	8005ebe <_vfiprintf_r+0x15a>
 8005f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f38:	4604      	mov	r4, r0
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7f0      	b.n	8005f20 <_vfiprintf_r+0x1bc>
 8005f3e:	ab03      	add	r3, sp, #12
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	462a      	mov	r2, r5
 8005f44:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <_vfiprintf_r+0x22c>)
 8005f46:	a904      	add	r1, sp, #16
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f3af 8000 	nop.w
 8005f4e:	4607      	mov	r7, r0
 8005f50:	1c78      	adds	r0, r7, #1
 8005f52:	d1d6      	bne.n	8005f02 <_vfiprintf_r+0x19e>
 8005f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_vfiprintf_r+0x202>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_vfiprintf_r+0x202>
 8005f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f62:	f7ff fddb 	bl	8005b1c <__retarget_lock_release_recursive>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	065b      	lsls	r3, r3, #25
 8005f6a:	f53f af1d 	bmi.w	8005da8 <_vfiprintf_r+0x44>
 8005f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f70:	e71c      	b.n	8005dac <_vfiprintf_r+0x48>
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <_vfiprintf_r+0x22c>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 f879 	bl	8006074 <_printf_i>
 8005f82:	e7e4      	b.n	8005f4e <_vfiprintf_r+0x1ea>
 8005f84:	080066a4 	.word	0x080066a4
 8005f88:	080066ae 	.word	0x080066ae
 8005f8c:	00000000 	.word	0x00000000
 8005f90:	08005d3f 	.word	0x08005d3f
 8005f94:	080066aa 	.word	0x080066aa

08005f98 <_printf_common>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	4699      	mov	r9, r3
 8005fa0:	688a      	ldr	r2, [r1, #8]
 8005fa2:	690b      	ldr	r3, [r1, #16]
 8005fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	bfb8      	it	lt
 8005fac:	4613      	movlt	r3, r2
 8005fae:	6033      	str	r3, [r6, #0]
 8005fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_printf_common+0x26>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	0699      	lsls	r1, r3, #26
 8005fc2:	bf42      	ittt	mi
 8005fc4:	6833      	ldrmi	r3, [r6, #0]
 8005fc6:	3302      	addmi	r3, #2
 8005fc8:	6033      	strmi	r3, [r6, #0]
 8005fca:	6825      	ldr	r5, [r4, #0]
 8005fcc:	f015 0506 	ands.w	r5, r5, #6
 8005fd0:	d106      	bne.n	8005fe0 <_printf_common+0x48>
 8005fd2:	f104 0a19 	add.w	sl, r4, #25
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	6832      	ldr	r2, [r6, #0]
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	42ab      	cmp	r3, r5
 8005fde:	dc26      	bgt.n	800602e <_printf_common+0x96>
 8005fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fe4:	1e13      	subs	r3, r2, #0
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	bf18      	it	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	0692      	lsls	r2, r2, #26
 8005fee:	d42b      	bmi.n	8006048 <_printf_common+0xb0>
 8005ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c0      	blx	r8
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d01e      	beq.n	800603c <_printf_common+0xa4>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	f003 0306 	and.w	r3, r3, #6
 8006006:	2b04      	cmp	r3, #4
 8006008:	bf02      	ittt	eq
 800600a:	68e5      	ldreq	r5, [r4, #12]
 800600c:	6833      	ldreq	r3, [r6, #0]
 800600e:	1aed      	subeq	r5, r5, r3
 8006010:	68a3      	ldr	r3, [r4, #8]
 8006012:	bf0c      	ite	eq
 8006014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006018:	2500      	movne	r5, #0
 800601a:	4293      	cmp	r3, r2
 800601c:	bfc4      	itt	gt
 800601e:	1a9b      	subgt	r3, r3, r2
 8006020:	18ed      	addgt	r5, r5, r3
 8006022:	2600      	movs	r6, #0
 8006024:	341a      	adds	r4, #26
 8006026:	42b5      	cmp	r5, r6
 8006028:	d11a      	bne.n	8006060 <_printf_common+0xc8>
 800602a:	2000      	movs	r0, #0
 800602c:	e008      	b.n	8006040 <_printf_common+0xa8>
 800602e:	2301      	movs	r3, #1
 8006030:	4652      	mov	r2, sl
 8006032:	4649      	mov	r1, r9
 8006034:	4638      	mov	r0, r7
 8006036:	47c0      	blx	r8
 8006038:	3001      	adds	r0, #1
 800603a:	d103      	bne.n	8006044 <_printf_common+0xac>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	3501      	adds	r5, #1
 8006046:	e7c6      	b.n	8005fd6 <_printf_common+0x3e>
 8006048:	18e1      	adds	r1, r4, r3
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	2030      	movs	r0, #48	; 0x30
 800604e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006052:	4422      	add	r2, r4
 8006054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800605c:	3302      	adds	r3, #2
 800605e:	e7c7      	b.n	8005ff0 <_printf_common+0x58>
 8006060:	2301      	movs	r3, #1
 8006062:	4622      	mov	r2, r4
 8006064:	4649      	mov	r1, r9
 8006066:	4638      	mov	r0, r7
 8006068:	47c0      	blx	r8
 800606a:	3001      	adds	r0, #1
 800606c:	d0e6      	beq.n	800603c <_printf_common+0xa4>
 800606e:	3601      	adds	r6, #1
 8006070:	e7d9      	b.n	8006026 <_printf_common+0x8e>
	...

08006074 <_printf_i>:
 8006074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	7e0f      	ldrb	r7, [r1, #24]
 800607a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800607c:	2f78      	cmp	r7, #120	; 0x78
 800607e:	4691      	mov	r9, r2
 8006080:	4680      	mov	r8, r0
 8006082:	460c      	mov	r4, r1
 8006084:	469a      	mov	sl, r3
 8006086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800608a:	d807      	bhi.n	800609c <_printf_i+0x28>
 800608c:	2f62      	cmp	r7, #98	; 0x62
 800608e:	d80a      	bhi.n	80060a6 <_printf_i+0x32>
 8006090:	2f00      	cmp	r7, #0
 8006092:	f000 80d4 	beq.w	800623e <_printf_i+0x1ca>
 8006096:	2f58      	cmp	r7, #88	; 0x58
 8006098:	f000 80c0 	beq.w	800621c <_printf_i+0x1a8>
 800609c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060a4:	e03a      	b.n	800611c <_printf_i+0xa8>
 80060a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060aa:	2b15      	cmp	r3, #21
 80060ac:	d8f6      	bhi.n	800609c <_printf_i+0x28>
 80060ae:	a101      	add	r1, pc, #4	; (adr r1, 80060b4 <_printf_i+0x40>)
 80060b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b4:	0800610d 	.word	0x0800610d
 80060b8:	08006121 	.word	0x08006121
 80060bc:	0800609d 	.word	0x0800609d
 80060c0:	0800609d 	.word	0x0800609d
 80060c4:	0800609d 	.word	0x0800609d
 80060c8:	0800609d 	.word	0x0800609d
 80060cc:	08006121 	.word	0x08006121
 80060d0:	0800609d 	.word	0x0800609d
 80060d4:	0800609d 	.word	0x0800609d
 80060d8:	0800609d 	.word	0x0800609d
 80060dc:	0800609d 	.word	0x0800609d
 80060e0:	08006225 	.word	0x08006225
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	080061df 	.word	0x080061df
 80060ec:	0800609d 	.word	0x0800609d
 80060f0:	0800609d 	.word	0x0800609d
 80060f4:	08006247 	.word	0x08006247
 80060f8:	0800609d 	.word	0x0800609d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800609d 	.word	0x0800609d
 8006104:	0800609d 	.word	0x0800609d
 8006108:	080061e7 	.word	0x080061e7
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	602a      	str	r2, [r5, #0]
 8006114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800611c:	2301      	movs	r3, #1
 800611e:	e09f      	b.n	8006260 <_printf_i+0x1ec>
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	0607      	lsls	r7, r0, #24
 8006126:	f103 0104 	add.w	r1, r3, #4
 800612a:	6029      	str	r1, [r5, #0]
 800612c:	d501      	bpl.n	8006132 <_printf_i+0xbe>
 800612e:	681e      	ldr	r6, [r3, #0]
 8006130:	e003      	b.n	800613a <_printf_i+0xc6>
 8006132:	0646      	lsls	r6, r0, #25
 8006134:	d5fb      	bpl.n	800612e <_printf_i+0xba>
 8006136:	f9b3 6000 	ldrsh.w	r6, [r3]
 800613a:	2e00      	cmp	r6, #0
 800613c:	da03      	bge.n	8006146 <_printf_i+0xd2>
 800613e:	232d      	movs	r3, #45	; 0x2d
 8006140:	4276      	negs	r6, r6
 8006142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006146:	485a      	ldr	r0, [pc, #360]	; (80062b0 <_printf_i+0x23c>)
 8006148:	230a      	movs	r3, #10
 800614a:	e012      	b.n	8006172 <_printf_i+0xfe>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	6029      	str	r1, [r5, #0]
 8006154:	0605      	lsls	r5, r0, #24
 8006156:	d501      	bpl.n	800615c <_printf_i+0xe8>
 8006158:	681e      	ldr	r6, [r3, #0]
 800615a:	e002      	b.n	8006162 <_printf_i+0xee>
 800615c:	0641      	lsls	r1, r0, #25
 800615e:	d5fb      	bpl.n	8006158 <_printf_i+0xe4>
 8006160:	881e      	ldrh	r6, [r3, #0]
 8006162:	4853      	ldr	r0, [pc, #332]	; (80062b0 <_printf_i+0x23c>)
 8006164:	2f6f      	cmp	r7, #111	; 0x6f
 8006166:	bf0c      	ite	eq
 8006168:	2308      	moveq	r3, #8
 800616a:	230a      	movne	r3, #10
 800616c:	2100      	movs	r1, #0
 800616e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006172:	6865      	ldr	r5, [r4, #4]
 8006174:	60a5      	str	r5, [r4, #8]
 8006176:	2d00      	cmp	r5, #0
 8006178:	bfa2      	ittt	ge
 800617a:	6821      	ldrge	r1, [r4, #0]
 800617c:	f021 0104 	bicge.w	r1, r1, #4
 8006180:	6021      	strge	r1, [r4, #0]
 8006182:	b90e      	cbnz	r6, 8006188 <_printf_i+0x114>
 8006184:	2d00      	cmp	r5, #0
 8006186:	d04b      	beq.n	8006220 <_printf_i+0x1ac>
 8006188:	4615      	mov	r5, r2
 800618a:	fbb6 f1f3 	udiv	r1, r6, r3
 800618e:	fb03 6711 	mls	r7, r3, r1, r6
 8006192:	5dc7      	ldrb	r7, [r0, r7]
 8006194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006198:	4637      	mov	r7, r6
 800619a:	42bb      	cmp	r3, r7
 800619c:	460e      	mov	r6, r1
 800619e:	d9f4      	bls.n	800618a <_printf_i+0x116>
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d10b      	bne.n	80061bc <_printf_i+0x148>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07de      	lsls	r6, r3, #31
 80061a8:	d508      	bpl.n	80061bc <_printf_i+0x148>
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	6861      	ldr	r1, [r4, #4]
 80061ae:	4299      	cmp	r1, r3
 80061b0:	bfde      	ittt	le
 80061b2:	2330      	movle	r3, #48	; 0x30
 80061b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061bc:	1b52      	subs	r2, r2, r5
 80061be:	6122      	str	r2, [r4, #16]
 80061c0:	f8cd a000 	str.w	sl, [sp]
 80061c4:	464b      	mov	r3, r9
 80061c6:	aa03      	add	r2, sp, #12
 80061c8:	4621      	mov	r1, r4
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff fee4 	bl	8005f98 <_printf_common>
 80061d0:	3001      	adds	r0, #1
 80061d2:	d14a      	bne.n	800626a <_printf_i+0x1f6>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	b004      	add	sp, #16
 80061da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f043 0320 	orr.w	r3, r3, #32
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	4833      	ldr	r0, [pc, #204]	; (80062b4 <_printf_i+0x240>)
 80061e8:	2778      	movs	r7, #120	; 0x78
 80061ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6829      	ldr	r1, [r5, #0]
 80061f2:	061f      	lsls	r7, r3, #24
 80061f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80061f8:	d402      	bmi.n	8006200 <_printf_i+0x18c>
 80061fa:	065f      	lsls	r7, r3, #25
 80061fc:	bf48      	it	mi
 80061fe:	b2b6      	uxthmi	r6, r6
 8006200:	07df      	lsls	r7, r3, #31
 8006202:	bf48      	it	mi
 8006204:	f043 0320 	orrmi.w	r3, r3, #32
 8006208:	6029      	str	r1, [r5, #0]
 800620a:	bf48      	it	mi
 800620c:	6023      	strmi	r3, [r4, #0]
 800620e:	b91e      	cbnz	r6, 8006218 <_printf_i+0x1a4>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f023 0320 	bic.w	r3, r3, #32
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	2310      	movs	r3, #16
 800621a:	e7a7      	b.n	800616c <_printf_i+0xf8>
 800621c:	4824      	ldr	r0, [pc, #144]	; (80062b0 <_printf_i+0x23c>)
 800621e:	e7e4      	b.n	80061ea <_printf_i+0x176>
 8006220:	4615      	mov	r5, r2
 8006222:	e7bd      	b.n	80061a0 <_printf_i+0x12c>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	6826      	ldr	r6, [r4, #0]
 8006228:	6961      	ldr	r1, [r4, #20]
 800622a:	1d18      	adds	r0, r3, #4
 800622c:	6028      	str	r0, [r5, #0]
 800622e:	0635      	lsls	r5, r6, #24
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	d501      	bpl.n	8006238 <_printf_i+0x1c4>
 8006234:	6019      	str	r1, [r3, #0]
 8006236:	e002      	b.n	800623e <_printf_i+0x1ca>
 8006238:	0670      	lsls	r0, r6, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0x1c0>
 800623c:	8019      	strh	r1, [r3, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	4615      	mov	r5, r2
 8006244:	e7bc      	b.n	80061c0 <_printf_i+0x14c>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	1d1a      	adds	r2, r3, #4
 800624a:	602a      	str	r2, [r5, #0]
 800624c:	681d      	ldr	r5, [r3, #0]
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	2100      	movs	r1, #0
 8006252:	4628      	mov	r0, r5
 8006254:	f7f9 ffdc 	bl	8000210 <memchr>
 8006258:	b108      	cbz	r0, 800625e <_printf_i+0x1ea>
 800625a:	1b40      	subs	r0, r0, r5
 800625c:	6060      	str	r0, [r4, #4]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	2300      	movs	r3, #0
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006268:	e7aa      	b.n	80061c0 <_printf_i+0x14c>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	462a      	mov	r2, r5
 800626e:	4649      	mov	r1, r9
 8006270:	4640      	mov	r0, r8
 8006272:	47d0      	blx	sl
 8006274:	3001      	adds	r0, #1
 8006276:	d0ad      	beq.n	80061d4 <_printf_i+0x160>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	d413      	bmi.n	80062a6 <_printf_i+0x232>
 800627e:	68e0      	ldr	r0, [r4, #12]
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	4298      	cmp	r0, r3
 8006284:	bfb8      	it	lt
 8006286:	4618      	movlt	r0, r3
 8006288:	e7a6      	b.n	80061d8 <_printf_i+0x164>
 800628a:	2301      	movs	r3, #1
 800628c:	4632      	mov	r2, r6
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	47d0      	blx	sl
 8006294:	3001      	adds	r0, #1
 8006296:	d09d      	beq.n	80061d4 <_printf_i+0x160>
 8006298:	3501      	adds	r5, #1
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	9903      	ldr	r1, [sp, #12]
 800629e:	1a5b      	subs	r3, r3, r1
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dcf2      	bgt.n	800628a <_printf_i+0x216>
 80062a4:	e7eb      	b.n	800627e <_printf_i+0x20a>
 80062a6:	2500      	movs	r5, #0
 80062a8:	f104 0619 	add.w	r6, r4, #25
 80062ac:	e7f5      	b.n	800629a <_printf_i+0x226>
 80062ae:	bf00      	nop
 80062b0:	080066b5 	.word	0x080066b5
 80062b4:	080066c6 	.word	0x080066c6

080062b8 <__sflush_r>:
 80062b8:	898a      	ldrh	r2, [r1, #12]
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	4605      	mov	r5, r0
 80062c0:	0710      	lsls	r0, r2, #28
 80062c2:	460c      	mov	r4, r1
 80062c4:	d458      	bmi.n	8006378 <__sflush_r+0xc0>
 80062c6:	684b      	ldr	r3, [r1, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc05      	bgt.n	80062d8 <__sflush_r+0x20>
 80062cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dc02      	bgt.n	80062d8 <__sflush_r+0x20>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d0f9      	beq.n	80062d2 <__sflush_r+0x1a>
 80062de:	2300      	movs	r3, #0
 80062e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e4:	682f      	ldr	r7, [r5, #0]
 80062e6:	6a21      	ldr	r1, [r4, #32]
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	d032      	beq.n	8006352 <__sflush_r+0x9a>
 80062ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	075a      	lsls	r2, r3, #29
 80062f2:	d505      	bpl.n	8006300 <__sflush_r+0x48>
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	1ac0      	subs	r0, r0, r3
 80062f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062fa:	b10b      	cbz	r3, 8006300 <__sflush_r+0x48>
 80062fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fe:	1ac0      	subs	r0, r0, r3
 8006300:	2300      	movs	r3, #0
 8006302:	4602      	mov	r2, r0
 8006304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006306:	6a21      	ldr	r1, [r4, #32]
 8006308:	4628      	mov	r0, r5
 800630a:	47b0      	blx	r6
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	d106      	bne.n	8006320 <__sflush_r+0x68>
 8006312:	6829      	ldr	r1, [r5, #0]
 8006314:	291d      	cmp	r1, #29
 8006316:	d82b      	bhi.n	8006370 <__sflush_r+0xb8>
 8006318:	4a29      	ldr	r2, [pc, #164]	; (80063c0 <__sflush_r+0x108>)
 800631a:	410a      	asrs	r2, r1
 800631c:	07d6      	lsls	r6, r2, #31
 800631e:	d427      	bmi.n	8006370 <__sflush_r+0xb8>
 8006320:	2200      	movs	r2, #0
 8006322:	6062      	str	r2, [r4, #4]
 8006324:	04d9      	lsls	r1, r3, #19
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	6022      	str	r2, [r4, #0]
 800632a:	d504      	bpl.n	8006336 <__sflush_r+0x7e>
 800632c:	1c42      	adds	r2, r0, #1
 800632e:	d101      	bne.n	8006334 <__sflush_r+0x7c>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b903      	cbnz	r3, 8006336 <__sflush_r+0x7e>
 8006334:	6560      	str	r0, [r4, #84]	; 0x54
 8006336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006338:	602f      	str	r7, [r5, #0]
 800633a:	2900      	cmp	r1, #0
 800633c:	d0c9      	beq.n	80062d2 <__sflush_r+0x1a>
 800633e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006342:	4299      	cmp	r1, r3
 8006344:	d002      	beq.n	800634c <__sflush_r+0x94>
 8006346:	4628      	mov	r0, r5
 8006348:	f7ff fbea 	bl	8005b20 <_free_r>
 800634c:	2000      	movs	r0, #0
 800634e:	6360      	str	r0, [r4, #52]	; 0x34
 8006350:	e7c0      	b.n	80062d4 <__sflush_r+0x1c>
 8006352:	2301      	movs	r3, #1
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	1c41      	adds	r1, r0, #1
 800635a:	d1c8      	bne.n	80062ee <__sflush_r+0x36>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c5      	beq.n	80062ee <__sflush_r+0x36>
 8006362:	2b1d      	cmp	r3, #29
 8006364:	d001      	beq.n	800636a <__sflush_r+0xb2>
 8006366:	2b16      	cmp	r3, #22
 8006368:	d101      	bne.n	800636e <__sflush_r+0xb6>
 800636a:	602f      	str	r7, [r5, #0]
 800636c:	e7b1      	b.n	80062d2 <__sflush_r+0x1a>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	e7ad      	b.n	80062d4 <__sflush_r+0x1c>
 8006378:	690f      	ldr	r7, [r1, #16]
 800637a:	2f00      	cmp	r7, #0
 800637c:	d0a9      	beq.n	80062d2 <__sflush_r+0x1a>
 800637e:	0793      	lsls	r3, r2, #30
 8006380:	680e      	ldr	r6, [r1, #0]
 8006382:	bf08      	it	eq
 8006384:	694b      	ldreq	r3, [r1, #20]
 8006386:	600f      	str	r7, [r1, #0]
 8006388:	bf18      	it	ne
 800638a:	2300      	movne	r3, #0
 800638c:	eba6 0807 	sub.w	r8, r6, r7
 8006390:	608b      	str	r3, [r1, #8]
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	dd9c      	ble.n	80062d2 <__sflush_r+0x1a>
 8006398:	6a21      	ldr	r1, [r4, #32]
 800639a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800639c:	4643      	mov	r3, r8
 800639e:	463a      	mov	r2, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b0      	blx	r6
 80063a4:	2800      	cmp	r0, #0
 80063a6:	dc06      	bgt.n	80063b6 <__sflush_r+0xfe>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e78e      	b.n	80062d4 <__sflush_r+0x1c>
 80063b6:	4407      	add	r7, r0
 80063b8:	eba8 0800 	sub.w	r8, r8, r0
 80063bc:	e7e9      	b.n	8006392 <__sflush_r+0xda>
 80063be:	bf00      	nop
 80063c0:	dfbffffe 	.word	0xdfbffffe

080063c4 <_fflush_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b913      	cbnz	r3, 80063d4 <_fflush_r+0x10>
 80063ce:	2500      	movs	r5, #0
 80063d0:	4628      	mov	r0, r5
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	b118      	cbz	r0, 80063de <_fflush_r+0x1a>
 80063d6:	6a03      	ldr	r3, [r0, #32]
 80063d8:	b90b      	cbnz	r3, 80063de <_fflush_r+0x1a>
 80063da:	f7ff fa99 	bl	8005910 <__sinit>
 80063de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f3      	beq.n	80063ce <_fflush_r+0xa>
 80063e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063e8:	07d0      	lsls	r0, r2, #31
 80063ea:	d404      	bmi.n	80063f6 <_fflush_r+0x32>
 80063ec:	0599      	lsls	r1, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_fflush_r+0x32>
 80063f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063f2:	f7ff fb92 	bl	8005b1a <__retarget_lock_acquire_recursive>
 80063f6:	4628      	mov	r0, r5
 80063f8:	4621      	mov	r1, r4
 80063fa:	f7ff ff5d 	bl	80062b8 <__sflush_r>
 80063fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006400:	07da      	lsls	r2, r3, #31
 8006402:	4605      	mov	r5, r0
 8006404:	d4e4      	bmi.n	80063d0 <_fflush_r+0xc>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	059b      	lsls	r3, r3, #22
 800640a:	d4e1      	bmi.n	80063d0 <_fflush_r+0xc>
 800640c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800640e:	f7ff fb85 	bl	8005b1c <__retarget_lock_release_recursive>
 8006412:	e7dd      	b.n	80063d0 <_fflush_r+0xc>

08006414 <__swbuf_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	460e      	mov	r6, r1
 8006418:	4614      	mov	r4, r2
 800641a:	4605      	mov	r5, r0
 800641c:	b118      	cbz	r0, 8006426 <__swbuf_r+0x12>
 800641e:	6a03      	ldr	r3, [r0, #32]
 8006420:	b90b      	cbnz	r3, 8006426 <__swbuf_r+0x12>
 8006422:	f7ff fa75 	bl	8005910 <__sinit>
 8006426:	69a3      	ldr	r3, [r4, #24]
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	071a      	lsls	r2, r3, #28
 800642e:	d525      	bpl.n	800647c <__swbuf_r+0x68>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	b31b      	cbz	r3, 800647c <__swbuf_r+0x68>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	6922      	ldr	r2, [r4, #16]
 8006438:	1a98      	subs	r0, r3, r2
 800643a:	6963      	ldr	r3, [r4, #20]
 800643c:	b2f6      	uxtb	r6, r6
 800643e:	4283      	cmp	r3, r0
 8006440:	4637      	mov	r7, r6
 8006442:	dc04      	bgt.n	800644e <__swbuf_r+0x3a>
 8006444:	4621      	mov	r1, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f7ff ffbc 	bl	80063c4 <_fflush_r>
 800644c:	b9e0      	cbnz	r0, 8006488 <__swbuf_r+0x74>
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	3b01      	subs	r3, #1
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	6022      	str	r2, [r4, #0]
 800645a:	701e      	strb	r6, [r3, #0]
 800645c:	6962      	ldr	r2, [r4, #20]
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	429a      	cmp	r2, r3
 8006462:	d004      	beq.n	800646e <__swbuf_r+0x5a>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	07db      	lsls	r3, r3, #31
 8006468:	d506      	bpl.n	8006478 <__swbuf_r+0x64>
 800646a:	2e0a      	cmp	r6, #10
 800646c:	d104      	bne.n	8006478 <__swbuf_r+0x64>
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f7ff ffa7 	bl	80063c4 <_fflush_r>
 8006476:	b938      	cbnz	r0, 8006488 <__swbuf_r+0x74>
 8006478:	4638      	mov	r0, r7
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800647c:	4621      	mov	r1, r4
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f806 	bl	8006490 <__swsetup_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	d0d5      	beq.n	8006434 <__swbuf_r+0x20>
 8006488:	f04f 37ff 	mov.w	r7, #4294967295
 800648c:	e7f4      	b.n	8006478 <__swbuf_r+0x64>
	...

08006490 <__swsetup_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4b2a      	ldr	r3, [pc, #168]	; (800653c <__swsetup_r+0xac>)
 8006494:	4605      	mov	r5, r0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	460c      	mov	r4, r1
 800649a:	b118      	cbz	r0, 80064a4 <__swsetup_r+0x14>
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	b90b      	cbnz	r3, 80064a4 <__swsetup_r+0x14>
 80064a0:	f7ff fa36 	bl	8005910 <__sinit>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064aa:	0718      	lsls	r0, r3, #28
 80064ac:	d422      	bmi.n	80064f4 <__swsetup_r+0x64>
 80064ae:	06d9      	lsls	r1, r3, #27
 80064b0:	d407      	bmi.n	80064c2 <__swsetup_r+0x32>
 80064b2:	2309      	movs	r3, #9
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	e034      	b.n	800652c <__swsetup_r+0x9c>
 80064c2:	0758      	lsls	r0, r3, #29
 80064c4:	d512      	bpl.n	80064ec <__swsetup_r+0x5c>
 80064c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c8:	b141      	cbz	r1, 80064dc <__swsetup_r+0x4c>
 80064ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ce:	4299      	cmp	r1, r3
 80064d0:	d002      	beq.n	80064d8 <__swsetup_r+0x48>
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff fb24 	bl	8005b20 <_free_r>
 80064d8:	2300      	movs	r3, #0
 80064da:	6363      	str	r3, [r4, #52]	; 0x34
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	2300      	movs	r3, #0
 80064e6:	6063      	str	r3, [r4, #4]
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f043 0308 	orr.w	r3, r3, #8
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b94b      	cbnz	r3, 800650c <__swsetup_r+0x7c>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006502:	d003      	beq.n	800650c <__swsetup_r+0x7c>
 8006504:	4621      	mov	r1, r4
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f850 	bl	80065ac <__smakebuf_r>
 800650c:	89a0      	ldrh	r0, [r4, #12]
 800650e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006512:	f010 0301 	ands.w	r3, r0, #1
 8006516:	d00a      	beq.n	800652e <__swsetup_r+0x9e>
 8006518:	2300      	movs	r3, #0
 800651a:	60a3      	str	r3, [r4, #8]
 800651c:	6963      	ldr	r3, [r4, #20]
 800651e:	425b      	negs	r3, r3
 8006520:	61a3      	str	r3, [r4, #24]
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	b943      	cbnz	r3, 8006538 <__swsetup_r+0xa8>
 8006526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800652a:	d1c4      	bne.n	80064b6 <__swsetup_r+0x26>
 800652c:	bd38      	pop	{r3, r4, r5, pc}
 800652e:	0781      	lsls	r1, r0, #30
 8006530:	bf58      	it	pl
 8006532:	6963      	ldrpl	r3, [r4, #20]
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	e7f4      	b.n	8006522 <__swsetup_r+0x92>
 8006538:	2000      	movs	r0, #0
 800653a:	e7f7      	b.n	800652c <__swsetup_r+0x9c>
 800653c:	20000064 	.word	0x20000064

08006540 <_sbrk_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d06      	ldr	r5, [pc, #24]	; (800655c <_sbrk_r+0x1c>)
 8006544:	2300      	movs	r3, #0
 8006546:	4604      	mov	r4, r0
 8006548:	4608      	mov	r0, r1
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	f7fb fa1c 	bl	8001988 <_sbrk>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_sbrk_r+0x1a>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_sbrk_r+0x1a>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	200009e4 	.word	0x200009e4

08006560 <__swhatbuf_r>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	460c      	mov	r4, r1
 8006564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006568:	2900      	cmp	r1, #0
 800656a:	b096      	sub	sp, #88	; 0x58
 800656c:	4615      	mov	r5, r2
 800656e:	461e      	mov	r6, r3
 8006570:	da0d      	bge.n	800658e <__swhatbuf_r+0x2e>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	bf0c      	ite	eq
 800657e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006582:	2340      	movne	r3, #64	; 0x40
 8006584:	2000      	movs	r0, #0
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	b016      	add	sp, #88	; 0x58
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	466a      	mov	r2, sp
 8006590:	f000 f848 	bl	8006624 <_fstat_r>
 8006594:	2800      	cmp	r0, #0
 8006596:	dbec      	blt.n	8006572 <__swhatbuf_r+0x12>
 8006598:	9901      	ldr	r1, [sp, #4]
 800659a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800659e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065a2:	4259      	negs	r1, r3
 80065a4:	4159      	adcs	r1, r3
 80065a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065aa:	e7eb      	b.n	8006584 <__swhatbuf_r+0x24>

080065ac <__smakebuf_r>:
 80065ac:	898b      	ldrh	r3, [r1, #12]
 80065ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065b0:	079d      	lsls	r5, r3, #30
 80065b2:	4606      	mov	r6, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	d507      	bpl.n	80065c8 <__smakebuf_r+0x1c>
 80065b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2301      	movs	r3, #1
 80065c2:	6163      	str	r3, [r4, #20]
 80065c4:	b002      	add	sp, #8
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	ab01      	add	r3, sp, #4
 80065ca:	466a      	mov	r2, sp
 80065cc:	f7ff ffc8 	bl	8006560 <__swhatbuf_r>
 80065d0:	9900      	ldr	r1, [sp, #0]
 80065d2:	4605      	mov	r5, r0
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7ff fb0f 	bl	8005bf8 <_malloc_r>
 80065da:	b948      	cbnz	r0, 80065f0 <__smakebuf_r+0x44>
 80065dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e0:	059a      	lsls	r2, r3, #22
 80065e2:	d4ef      	bmi.n	80065c4 <__smakebuf_r+0x18>
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	e7e3      	b.n	80065b8 <__smakebuf_r+0xc>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	6020      	str	r0, [r4, #0]
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	9b00      	ldr	r3, [sp, #0]
 80065fc:	6163      	str	r3, [r4, #20]
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	6120      	str	r0, [r4, #16]
 8006602:	b15b      	cbz	r3, 800661c <__smakebuf_r+0x70>
 8006604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006608:	4630      	mov	r0, r6
 800660a:	f000 f81d 	bl	8006648 <_isatty_r>
 800660e:	b128      	cbz	r0, 800661c <__smakebuf_r+0x70>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	431d      	orrs	r5, r3
 8006620:	81a5      	strh	r5, [r4, #12]
 8006622:	e7cf      	b.n	80065c4 <__smakebuf_r+0x18>

08006624 <_fstat_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	; (8006644 <_fstat_r+0x20>)
 8006628:	2300      	movs	r3, #0
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	4611      	mov	r1, r2
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	f7fb f980 	bl	8001936 <_fstat>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d102      	bne.n	8006640 <_fstat_r+0x1c>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	b103      	cbz	r3, 8006640 <_fstat_r+0x1c>
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	bd38      	pop	{r3, r4, r5, pc}
 8006642:	bf00      	nop
 8006644:	200009e4 	.word	0x200009e4

08006648 <_isatty_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_isatty_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fb f97f 	bl	8001956 <_isatty>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_isatty_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_isatty_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200009e4 	.word	0x200009e4

08006668 <_init>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr

08006674 <_fini>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr
