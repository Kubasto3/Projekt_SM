
TestDistance5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800865c  0800865c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008664  08008664  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800866c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  080086d4  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08008774  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000898  200001a8  08008814  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a40  08008814  00020a40  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017552  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002cf5  00000000  00000000  0003776d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000013a0  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f50  00000000  00000000  0003b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028aa4  00000000  00000000  0003c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00017224  00000000  00000000  000651fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fad78  00000000  00000000  0007c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005d30  00000000  00000000  00177198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0017cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084ec 	.word	0x080084ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ac 	.word	0x200001ac
 800020c:	080084ec 	.word	0x080084ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOF



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 8083 	bne.w	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0)
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11a      	bne.n	8000dd8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f004 f809 	bl	8004dbc <HAL_TIM_ReadCapturedValue>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020a 	bic.w	r2, r2, #10
 8000dc4:	621a      	str	r2, [r3, #32]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0202 	orr.w	r2, r2, #2
 8000dd4:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000dd6:	e063      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d15f      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f003 ffea 	bl	8004dbc <HAL_TIM_ReadCapturedValue>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d907      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00f      	b.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d909      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e30:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb7c 	bl	8000534 <__aeabi_ui2d>
 8000e3c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ea8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbf1 	bl	8000628 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f7ff fd11 	bl	800087c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fdf3 	bl	8000a4c <__aeabi_d2uiz>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e6c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020a 	bic.w	r2, r2, #10
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a12      	ldr	r2, [r2, #32]
 8000e8e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0202 	bic.w	r2, r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	b020c49c 	.word	0xb020c49c
 8000eac:	3fa16872 	.word	0x3fa16872
 8000eb0:	200008e0 	.word	0x200008e0
 8000eb4:	200008d4 	.word	0x200008d4
 8000eb8:	200008d8 	.word	0x200008d8
 8000ebc:	200008dc 	.word	0x200008dc
 8000ec0:	200008e1 	.word	0x200008e1
 8000ec4:	200002ac 	.word	0x200002ac

08000ec8 <delay>:

void delay(uint8_t time){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <delay+0x30>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eda:	bf00      	nop
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <delay+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <delay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200002ac 	.word	0x200002ac

08000efc <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HCSR04_Read+0x38>)
 8000f08:	f001 fe38 	bl	8002b7c <HAL_GPIO_WritePin>
	delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f7ff ffdb 	bl	8000ec8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HCSR04_Read+0x38>)
 8000f1a:	f001 fe2f 	bl	8002b7c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HCSR04_Read+0x3c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	60da      	str	r2, [r3, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021400 	.word	0x40021400
 8000f38:	200002ac 	.word	0x200002ac

08000f3c <__io_putchar>:

int __io_putchar(int ch)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d102      	bne.n	8000f50 <__io_putchar+0x14>
    __io_putchar('\r');
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f7ff fff6 	bl	8000f3c <__io_putchar>
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <__io_putchar+0x2c>)
 8000f5a:	f004 fd7d 	bl	8005a58 <HAL_UART_Transmit>

  return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000344 	.word	0x20000344

08000f6c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_UART_RxCpltCallback+0x30>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d10b      	bne.n	8000f94 <HAL_UART_RxCpltCallback+0x28>
		Target_value = atoi(&Received);
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <HAL_UART_RxCpltCallback+0x34>)
 8000f7e:	f006 faed 	bl	800755c <atoi>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_UART_RxCpltCallback+0x38>)
 8000f88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &Received, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4904      	ldr	r1, [pc, #16]	; (8000fa0 <HAL_UART_RxCpltCallback+0x34>)
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <HAL_UART_RxCpltCallback+0x30>)
 8000f90:	f004 fde5 	bl	8005b5e <HAL_UART_Receive_IT>
	}
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000344 	.word	0x20000344
 8000fa0:	200008e3 	.word	0x200008e3
 8000fa4:	200008e2 	.word	0x200008e2

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 feee 	bl	8001d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f879 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 fa67 	bl	8001488 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fba:	f000 f8dd 	bl	8001178 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fbe:	f000 fa05 	bl	80013cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fc2:	f000 fa33 	bl	800142c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000fc6:	f000 f925 	bl	8001214 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fca:	f000 f97d 	bl	80012c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <main+0xdc>)
 8000fd2:	f003 fa09 	bl	80043e8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, &Received, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	492b      	ldr	r1, [pc, #172]	; (8001088 <main+0xe0>)
 8000fda:	482c      	ldr	r0, [pc, #176]	; (800108c <main+0xe4>)
 8000fdc:	f004 fdbf 	bl	8005b5e <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	482b      	ldr	r0, [pc, #172]	; (8001090 <main+0xe8>)
 8000fe4:	f003 f8ae 	bl	8004144 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4829      	ldr	r0, [pc, #164]	; (8001090 <main+0xe8>)
 8000fec:	f003 f8aa 	bl	8004144 <HAL_TIM_PWM_Start>
  uint8_t State = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HCSR04_Read();
 8000ff4:	f7ff ff82 	bl	8000efc <HCSR04_Read>
	  HAL_Delay(200);
 8000ff8:	20c8      	movs	r0, #200	; 0xc8
 8000ffa:	f000 ff25 	bl	8001e48 <HAL_Delay>
	  printf("value = %u\n", Distance);
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <main+0xec>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4824      	ldr	r0, [pc, #144]	; (8001098 <main+0xf0>)
 8001006:	f006 fbfb 	bl	8007800 <iprintf>

	  if(State == 1){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d111      	bne.n	8001034 <main+0x8c>
		  if(Distance <= Target_value){
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <main+0xec>)
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <main+0xf4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d806      	bhi.n	800102a <main+0x82>
			  TIM3->CCR1 = 0;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <main+0xf8>)
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM3->CCR2 = 140;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0xf8>)
 8001024:	228c      	movs	r2, #140	; 0x8c
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
 8001028:	e004      	b.n	8001034 <main+0x8c>
		  }else{
			  State = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
			  delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f7ff ff4a 	bl	8000ec8 <delay>
		  }
	  }

	  if(State == 0){
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d114      	bne.n	8001064 <main+0xbc>
		  if(Distance >= 25-3-Target_value){
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <main+0xec>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <main+0xf4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f1c3 0316 	rsb	r3, r3, #22
 8001048:	429a      	cmp	r2, r3
 800104a:	db06      	blt.n	800105a <main+0xb2>
			  TIM3->CCR1 = 140;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <main+0xf8>)
 800104e:	228c      	movs	r2, #140	; 0x8c
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM3->CCR2 = 0;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0xf8>)
 8001054:	2200      	movs	r2, #0
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
 8001058:	e004      	b.n	8001064 <main+0xbc>
		  }else{
			  State = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
			  delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f7ff ff32 	bl	8000ec8 <delay>
		  }
	  }


      if (State == 1) {
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d105      	bne.n	8001076 <main+0xce>
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <main+0xfc>)
 8001070:	f001 fd84 	bl	8002b7c <HAL_GPIO_WritePin>
 8001074:	e7be      	b.n	8000ff4 <main+0x4c>
      } else {
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <main+0xfc>)
 800107c:	f001 fd7e 	bl	8002b7c <HAL_GPIO_WritePin>
	  HCSR04_Read();
 8001080:	e7b8      	b.n	8000ff4 <main+0x4c>
 8001082:	bf00      	nop
 8001084:	200002ac 	.word	0x200002ac
 8001088:	200008e3 	.word	0x200008e3
 800108c:	20000344 	.word	0x20000344
 8001090:	200002f8 	.word	0x200002f8
 8001094:	200008e1 	.word	0x200008e1
 8001098:	08008504 	.word	0x08008504
 800109c:	200008e2 	.word	0x200008e2
 80010a0:	40000400 	.word	0x40000400
 80010a4:	40020400 	.word	0x40020400

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fbf7 	bl	80078aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010cc:	f001 feb8 	bl	8002e40 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <SystemClock_Config+0xc8>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <SystemClock_Config+0xcc>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001108:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800111c:	2348      	movs	r3, #72	; 0x48
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001124:	2303      	movs	r3, #3
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fe97 	bl	8002e60 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001138:	f000 fa76 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2102      	movs	r1, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f002 f925 	bl	80033a8 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001164:	f000 fa60 	bl	8001628 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_ETH_Init+0x84>)
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <MX_ETH_Init+0x88>)
 8001180:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_ETH_Init+0x8c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_ETH_Init+0x8c>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_ETH_Init+0x8c>)
 8001190:	22e1      	movs	r2, #225	; 0xe1
 8001192:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_ETH_Init+0x8c>)
 8001196:	2200      	movs	r2, #0
 8001198:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_ETH_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_ETH_Init+0x8c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_ETH_Init+0x84>)
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <MX_ETH_Init+0x8c>)
 80011aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_ETH_Init+0x84>)
 80011ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_ETH_Init+0x84>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <MX_ETH_Init+0x90>)
 80011b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_ETH_Init+0x84>)
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <MX_ETH_Init+0x94>)
 80011be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_ETH_Init+0x84>)
 80011c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_ETH_Init+0x84>)
 80011ca:	f001 f805 	bl	80021d8 <HAL_ETH_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011d4:	f000 fa28 	bl	8001628 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011d8:	2238      	movs	r2, #56	; 0x38
 80011da:	2100      	movs	r1, #0
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ETH_Init+0x98>)
 80011de:	f006 fb64 	bl	80078aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_ETH_Init+0x98>)
 80011e4:	2221      	movs	r2, #33	; 0x21
 80011e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_ETH_Init+0x98>)
 80011ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_ETH_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001fc 	.word	0x200001fc
 8001200:	40028000 	.word	0x40028000
 8001204:	200008e4 	.word	0x200008e4
 8001208:	20000108 	.word	0x20000108
 800120c:	20000068 	.word	0x20000068
 8001210:	200001c4 	.word	0x200001c4

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <MX_TIM1_Init+0xb0>)
 8001236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM1_Init+0xac>)
 800123a:	2247      	movs	r2, #71	; 0x47
 800123c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001246:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800124a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM1_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM1_Init+0xac>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001260:	f003 f86a 	bl	8004338 <HAL_TIM_IC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800126a:	f000 f9dd 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <MX_TIM1_Init+0xac>)
 8001282:	f004 faef 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 f9cc 	bl	8001628 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001294:	2301      	movs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM1_Init+0xac>)
 80012a8:	f003 fb0d 	bl	80048c6 <HAL_TIM_IC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80012b2:	f000 f9b9 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002ac 	.word	0x200002ac
 80012c4:	40010000 	.word	0x40010000

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <MX_TIM3_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <MX_TIM3_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_TIM3_Init+0xfc>)
 8001302:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_TIM3_Init+0xfc>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_TIM3_Init+0xfc>)
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_TIM3_Init+0xfc>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xfc>)
 8001322:	f002 fe57 	bl	8003fd4 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800132c:	f000 f97c 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_TIM3_Init+0xfc>)
 800133e:	f003 fc73 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001348:	f000 f96e 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_TIM3_Init+0xfc>)
 800134e:	f002 fe98 	bl	8004082 <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001358:	f000 f966 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_TIM3_Init+0xfc>)
 800136c:	f004 fa7a 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001376:	f000 f957 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM3_Init+0xfc>)
 8001392:	f003 fb35 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800139c:	f000 f944 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM3_Init+0xfc>)
 80013a8:	f003 fb2a 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80013b2:	f000 f939 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM3_Init+0xfc>)
 80013b8:	f000 fa8a 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	; 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002f8 	.word	0x200002f8
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_USART3_UART_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART3_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART3_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART3_UART_Init+0x58>)
 8001410:	f004 fad4 	bl	80059bc <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 f905 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000344 	.word	0x20000344
 8001428:	40004800 	.word	0x40004800

0800142c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143a:	2206      	movs	r2, #6
 800143c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001440:	2202      	movs	r2, #2
 8001442:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144c:	2202      	movs	r2, #2
 800144e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	2201      	movs	r2, #1
 8001454:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001464:	2201      	movs	r2, #1
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001470:	f001 fb9d 	bl	8002bae <HAL_PCD_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f8d5 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003cc 	.word	0x200003cc

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a56      	ldr	r2, [pc, #344]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a50      	ldr	r2, [pc, #320]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b48      	ldr	r3, [pc, #288]	; (8001614 <MX_GPIO_Init+0x18c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a44      	ldr	r2, [pc, #272]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <MX_GPIO_Init+0x18c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <MX_GPIO_Init+0x18c>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a38      	ldr	r2, [pc, #224]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_GPIO_Init+0x18c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a32      	ldr	r2, [pc, #200]	; (8001614 <MX_GPIO_Init+0x18c>)
 800154c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <MX_GPIO_Init+0x18c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f244 0181 	movw	r1, #16513	; 0x4081
 8001564:	482c      	ldr	r0, [pc, #176]	; (8001618 <MX_GPIO_Init+0x190>)
 8001566:	f001 fb09 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	482a      	ldr	r0, [pc, #168]	; (800161c <MX_GPIO_Init+0x194>)
 8001572:	f001 fb03 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	4829      	ldr	r0, [pc, #164]	; (8001620 <MX_GPIO_Init+0x198>)
 800157c:	f001 fafe 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_GPIO_Init+0x19c>)
 8001598:	f001 f944 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800159c:	f244 0381 	movw	r3, #16513	; 0x4081
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <MX_GPIO_Init+0x190>)
 80015b6:	f001 f935 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <MX_GPIO_Init+0x194>)
 80015d4:	f001 f926 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_GPIO_Init+0x198>)
 80015f0:	f001 f918 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_GPIO_Init+0x198>)
 8001608:	f001 f90c 	bl	8002824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160c:	bf00      	nop
 800160e:	3738      	adds	r7, #56	; 0x38
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40020400 	.word	0x40020400
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40020800 	.word	0x40020800

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x44>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x44>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x44>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x44>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x44>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x44>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_ETH_MspInit+0x158>)
 800169a:	4293      	cmp	r3, r2
 800169c:	f040 8096 	bne.w	80017cc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a3a      	ldr	r2, [pc, #232]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6313      	str	r3, [r2, #48]	; 0x30
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_ETH_MspInit+0x15c>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001748:	2332      	movs	r3, #50	; 0x32
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001758:	230b      	movs	r3, #11
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	481e      	ldr	r0, [pc, #120]	; (80017dc <HAL_ETH_MspInit+0x160>)
 8001764:	f001 f85e 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001768:	2386      	movs	r3, #134	; 0x86
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001778:	230b      	movs	r3, #11
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4817      	ldr	r0, [pc, #92]	; (80017e0 <HAL_ETH_MspInit+0x164>)
 8001784:	f001 f84e 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800179a:	230b      	movs	r3, #11
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	480f      	ldr	r0, [pc, #60]	; (80017e4 <HAL_ETH_MspInit+0x168>)
 80017a6:	f001 f83d 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017bc:	230b      	movs	r3, #11
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <HAL_ETH_MspInit+0x16c>)
 80017c8:	f001 f82c 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3738      	adds	r7, #56	; 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40028000 	.word	0x40028000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40021800 	.word	0x40021800

080017ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <HAL_TIM_IC_MspInit+0x8c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d130      	bne.n	8001870 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_TIM_IC_MspInit+0x90>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001850:	2301      	movs	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_TIM_IC_MspInit+0x94>)
 800185c:	f000 ffe2 	bl	8002824 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	201b      	movs	r0, #27
 8001866:	f000 fbee 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800186a:	201b      	movs	r0, #27
 800186c:	f000 fc07 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40010000 	.word	0x40010000
 800187c:	40023800 	.word	0x40023800
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_TIM_Base_MspInit+0x44>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d113      	bne.n	80018be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_Base_MspInit+0x48>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_TIM_Base_MspInit+0x48>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_TIM_Base_MspInit+0x48>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	201d      	movs	r0, #29
 80018b4:	f000 fbc7 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018b8:	201d      	movs	r0, #29
 80018ba:	f000 fbe0 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_TIM_MspPostInit+0x9c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d137      	bne.n	8001962 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_TIM_MspPostInit+0xa0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001922:	2340      	movs	r3, #64	; 0x40
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001932:	2302      	movs	r3, #2
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <HAL_TIM_MspPostInit+0xa4>)
 800193e:	f000 ff71 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001952:	2302      	movs	r3, #2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <HAL_TIM_MspPostInit+0xa8>)
 800195e:	f000 ff61 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40000400 	.word	0x40000400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020800 	.word	0x40020800

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0aa      	sub	sp, #168	; 0xa8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2284      	movs	r2, #132	; 0x84
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f005 ff84 	bl	80078aa <memset>
  if(huart->Instance==USART3)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_UART_MspInit+0xc4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d144      	bne.n	8001a36 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 ff1a 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019c6:	f7ff fe2f 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0xc8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <HAL_UART_MspInit+0xcc>)
 8001a22:	f000 feff 	bl	8002824 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2027      	movs	r0, #39	; 0x27
 8001a2c:	f000 fb0b 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a30:	2027      	movs	r0, #39	; 0x27
 8001a32:	f000 fb24 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	37a8      	adds	r7, #168	; 0xa8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40004800 	.word	0x40004800
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020c00 	.word	0x40020c00

08001a4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ac      	sub	sp, #176	; 0xb0
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	2284      	movs	r2, #132	; 0x84
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 ff1c 	bl	80078aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7a:	d159      	bne.n	8001b30 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 feb1 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a98:	f7ff fdc6 	bl	8001628 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ab4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <HAL_PCD_MspInit+0xf0>)
 8001adc:	f000 fea2 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4810      	ldr	r0, [pc, #64]	; (8001b3c <HAL_PCD_MspInit+0xf0>)
 8001afc:	f000 fe92 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6453      	str	r3, [r2, #68]	; 0x44
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_PCD_MspInit+0xec>)
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	37b0      	adds	r7, #176	; 0xb0
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f93c 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM1_CC_IRQHandler+0x10>)
 8001b9a:	f002 fd75 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002ac 	.word	0x200002ac

08001ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM3_IRQHandler+0x10>)
 8001bae:	f002 fd6b 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002f8 	.word	0x200002f8

08001bbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <USART3_IRQHandler+0x10>)
 8001bc2:	f004 f811 	bl	8005be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000344 	.word	0x20000344

08001bd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e00a      	b.n	8001bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be2:	f3af 8000 	nop.w
 8001be6:	4601      	mov	r1, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf0      	blt.n	8001be2 <_read+0x12>
  }

  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e009      	b.n	8001c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f989 	bl	8000f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf1      	blt.n	8001c1c <_write+0x12>
  }
  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_close>:

int _close(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f005 fe34 	bl	8007948 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20050000 	.word	0x20050000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	200008ec 	.word	0x200008ec
 8001d14:	20000a40 	.word	0x20000a40

08001d18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d42:	490e      	ldr	r1, [pc, #56]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d58:	4c0b      	ldr	r4, [pc, #44]	; (8001d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d66:	f7ff ffd7 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f005 fdf3 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6e:	f7ff f91b 	bl	8000fa8 <main>
  bx  lr    
 8001d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d80:	0800866c 	.word	0x0800866c
  ldr r2, =_sbss
 8001d84:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001d88:	20000a40 	.word	0x20000a40

08001d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>

08001d8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f000 f94c 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 f805 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9e:	f7ff fc49 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f967 	bl	800209a <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f92f 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	200008f0 	.word	0x200008f0

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200008f0 	.word	0x200008f0

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00
 8001ed4:	05fa0000 	.word	0x05fa0000

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <__NVIC_EnableIRQ+0x38>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f7ff ff8e 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff29 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff3e 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff8e 	bl	8001f84 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5d 	bl	8001f30 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff31 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa2 	bl	8001fec <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff feb6 	bl	8001e30 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d008      	beq.n	80020e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e052      	b.n	800218a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0216 	bic.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002102:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <HAL_DMA_Abort+0x62>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0208 	bic.w	r2, r2, #8
 8002122:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	e013      	b.n	800215e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7ff fe7b 	bl	8001e30 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d90c      	bls.n	800215e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e015      	b.n	800218a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e4      	bne.n	8002136 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	223f      	movs	r2, #63	; 0x3f
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e00c      	b.n	80021ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06a      	b.n	80022c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2223      	movs	r2, #35	; 0x23
 80021f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fa3d 	bl	800167c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_ETH_Init+0xf0>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <HAL_ETH_Init+0xf0>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_ETH_Init+0xf0>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_ETH_Init+0xf4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_ETH_Init+0xf4>)
 8002220:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002224:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_ETH_Init+0xf4>)
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4927      	ldr	r1, [pc, #156]	; (80022cc <HAL_ETH_Init+0xf4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_ETH_Init+0xf4>)
 8002236:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800224e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002250:	f7ff fdee 	bl	8001e30 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002256:	e011      	b.n	800227c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002258:	f7ff fdea 	bl	8001e30 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002266:	d909      	bls.n	800227c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2204      	movs	r2, #4
 800226c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	22e0      	movs	r2, #224	; 0xe0
 8002274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e021      	b.n	80022c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1e4      	bne.n	8002258 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f958 	bl	8002544 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9ff 	bl	8002698 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa55 	bl	800274a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	461a      	mov	r2, r3
 80022a6:	2100      	movs	r1, #0
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9bd 	bl	8002628 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2210      	movs	r2, #16
 80022ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800

080022d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4b51      	ldr	r3, [pc, #324]	; (800242c <ETH_SetMACConfig+0x15c>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	7c1b      	ldrb	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <ETH_SetMACConfig+0x28>
 80022f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022f6:	e000      	b.n	80022fa <ETH_SetMACConfig+0x2a>
 80022f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	7c5b      	ldrb	r3, [r3, #17]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <ETH_SetMACConfig+0x38>
 8002302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002306:	e000      	b.n	800230a <ETH_SetMACConfig+0x3a>
 8002308:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800230a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002310:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	7fdb      	ldrb	r3, [r3, #31]
 8002316:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002318:	431a      	orrs	r2, r3
                        macconf->Speed |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800231e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	7f92      	ldrb	r2, [r2, #30]
 8002324:	2a00      	cmp	r2, #0
 8002326:	d102      	bne.n	800232e <ETH_SetMACConfig+0x5e>
 8002328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232c:	e000      	b.n	8002330 <ETH_SetMACConfig+0x60>
 800232e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	7f1b      	ldrb	r3, [r3, #28]
 8002336:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002338:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800233e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	791b      	ldrb	r3, [r3, #4]
 8002344:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002346:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800234e:	2a00      	cmp	r2, #0
 8002350:	d102      	bne.n	8002358 <ETH_SetMACConfig+0x88>
 8002352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002356:	e000      	b.n	800235a <ETH_SetMACConfig+0x8a>
 8002358:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800235a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	7bdb      	ldrb	r3, [r3, #15]
 8002360:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002362:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002370:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002372:	4313      	orrs	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff fd5c 	bl	8001e48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	d101      	bne.n	80023be <ETH_SetMACConfig+0xee>
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	e000      	b.n	80023c0 <ETH_SetMACConfig+0xf0>
 80023be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023ce:	2a01      	cmp	r2, #1
 80023d0:	d101      	bne.n	80023d6 <ETH_SetMACConfig+0x106>
 80023d2:	2208      	movs	r2, #8
 80023d4:	e000      	b.n	80023d8 <ETH_SetMACConfig+0x108>
 80023d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023e0:	2a01      	cmp	r2, #1
 80023e2:	d101      	bne.n	80023e8 <ETH_SetMACConfig+0x118>
 80023e4:	2204      	movs	r2, #4
 80023e6:	e000      	b.n	80023ea <ETH_SetMACConfig+0x11a>
 80023e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023f2:	2a01      	cmp	r2, #1
 80023f4:	d101      	bne.n	80023fa <ETH_SetMACConfig+0x12a>
 80023f6:	2202      	movs	r2, #2
 80023f8:	e000      	b.n	80023fc <ETH_SetMACConfig+0x12c>
 80023fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023fc:	4313      	orrs	r3, r2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff fd17 	bl	8001e48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	ff20810f 	.word	0xff20810f

08002430 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <ETH_SetDMAConfig+0x110>)
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	7b1b      	ldrb	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <ETH_SetDMAConfig+0x2c>
 8002456:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800245a:	e000      	b.n	800245e <ETH_SetDMAConfig+0x2e>
 800245c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	7b5b      	ldrb	r3, [r3, #13]
 8002462:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002464:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	7f52      	ldrb	r2, [r2, #29]
 800246a:	2a00      	cmp	r2, #0
 800246c:	d102      	bne.n	8002474 <ETH_SetDMAConfig+0x44>
 800246e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002472:	e000      	b.n	8002476 <ETH_SetDMAConfig+0x46>
 8002474:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002476:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7b9b      	ldrb	r3, [r3, #14]
 800247c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800247e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7f1b      	ldrb	r3, [r3, #28]
 800248a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800248c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7f9b      	ldrb	r3, [r3, #30]
 8002492:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002494:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800249a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff fcbe 	bl	8001e48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002502:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002508:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002516:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fc8f 	bl	8001e48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	f8de3f23 	.word	0xf8de3f23

08002544 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0a6      	sub	sp, #152	; 0x98
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002558:	2300      	movs	r3, #0
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002580:	2300      	movs	r3, #0
 8002582:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800258a:	2300      	movs	r3, #0
 800258c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fe86 	bl	80022d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002604:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff08 	bl	8002430 <ETH_SetDMAConfig>
}
 8002620:	bf00      	nop
 8002622:	3798      	adds	r7, #152	; 0x98
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3305      	adds	r3, #5
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	3204      	adds	r2, #4
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <ETH_MACAddressConfig+0x68>)
 800264a:	4413      	add	r3, r2
 800264c:	461a      	mov	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3303      	adds	r3, #3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	061a      	lsls	r2, r3, #24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3302      	adds	r3, #2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3301      	adds	r3, #1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	4313      	orrs	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <ETH_MACAddressConfig+0x6c>)
 800267a:	4413      	add	r3, r2
 800267c:	461a      	mov	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40028040 	.word	0x40028040
 8002694:	40028044 	.word	0x40028044

08002698 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e03e      	b.n	8002724 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	3206      	adds	r2, #6
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d80c      	bhi.n	8002708 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68d9      	ldr	r1, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e004      	b.n	8002712 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d9bd      	bls.n	80026a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	611a      	str	r2, [r3, #16]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e046      	b.n	80027e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002794:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800279c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	3212      	adds	r2, #18
 80027b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d80c      	bhi.n	80027d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6919      	ldr	r1, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	e004      	b.n	80027e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d9b5      	bls.n	8002758 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002816:	60da      	str	r2, [r3, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e175      	b.n	8002b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8164 	bne.w	8002b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x56>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80be 	beq.w	8002b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_GPIO_Init+0x324>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_GPIO_Init+0x324>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029c6:	4a61      	ldr	r2, [pc, #388]	; (8002b4c <HAL_GPIO_Init+0x328>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d037      	beq.n	8002a62 <HAL_GPIO_Init+0x23e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a57      	ldr	r2, [pc, #348]	; (8002b54 <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_GPIO_Init+0x23a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a56      	ldr	r2, [pc, #344]	; (8002b58 <HAL_GPIO_Init+0x334>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02b      	beq.n	8002a5a <HAL_GPIO_Init+0x236>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a55      	ldr	r2, [pc, #340]	; (8002b5c <HAL_GPIO_Init+0x338>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d025      	beq.n	8002a56 <HAL_GPIO_Init+0x232>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <HAL_GPIO_Init+0x33c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01f      	beq.n	8002a52 <HAL_GPIO_Init+0x22e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <HAL_GPIO_Init+0x340>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d019      	beq.n	8002a4e <HAL_GPIO_Init+0x22a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <HAL_GPIO_Init+0x344>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_GPIO_Init+0x226>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a51      	ldr	r2, [pc, #324]	; (8002b6c <HAL_GPIO_Init+0x348>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_GPIO_Init+0x222>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a50      	ldr	r2, [pc, #320]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x21e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_GPIO_Init+0x21a>
 8002a3a:	2309      	movs	r3, #9
 8002a3c:	e012      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a3e:	230a      	movs	r3, #10
 8002a40:	e010      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e00e      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e00c      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00a      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x328>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_GPIO_Init+0x354>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f ae86 	bls.w	8002844 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40021c00 	.word	0x40021c00
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40022400 	.word	0x40022400
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb0:	b08f      	sub	sp, #60	; 0x3c
 8002bb2:	af0a      	add	r7, sp, #40	; 0x28
 8002bb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e116      	b.n	8002dee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe ff36 	bl	8001a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fa10 	bl	8007024 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	687e      	ldr	r6, [r7, #4]
 8002c0c:	466d      	mov	r5, sp
 8002c0e:	f106 0410 	add.w	r4, r6, #16
 8002c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c22:	1d33      	adds	r3, r6, #4
 8002c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c26:	6838      	ldr	r0, [r7, #0]
 8002c28:	f004 f9a4 	bl	8006f74 <USB_CoreInit>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0d7      	b.n	8002dee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 f9fe 	bl	8007046 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e04a      	b.n	8002ce6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	333d      	adds	r3, #61	; 0x3d
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	333c      	adds	r3, #60	; 0x3c
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	b298      	uxth	r0, r3
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3344      	adds	r3, #68	; 0x44
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3340      	adds	r3, #64	; 0x40
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3348      	adds	r3, #72	; 0x48
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334c      	adds	r3, #76	; 0x4c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3354      	adds	r3, #84	; 0x54
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3af      	bcc.n	8002c50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e044      	b.n	8002d80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3b5      	bcc.n	8002cf6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	687e      	ldr	r6, [r7, #4]
 8002d92:	466d      	mov	r5, sp
 8002d94:	f106 0410 	add.w	r4, r6, #16
 8002d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da8:	1d33      	adds	r3, r6, #4
 8002daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	f004 f997 	bl	80070e0 <USB_DevInit>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e014      	b.n	8002dee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f80b 	bl	8002df8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 fb55 	bl	8007496 <USB_DevDisconnect>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002df8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	10000003 	.word	0x10000003

08002e40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40007000 	.word	0x40007000

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e291      	b.n	800339a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8087 	beq.w	8002f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e84:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d00c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e90:	4b93      	ldr	r3, [pc, #588]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d112      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62>
 8002e9c:	4b90      	ldr	r3, [pc, #576]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d06c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x130>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d168      	bne.n	8002f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e26b      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x7a>
 8002ecc:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a83      	ldr	r2, [pc, #524]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e02e      	b.n	8002f38 <HAL_RCC_OscConfig+0xd8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x9c>
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7b      	ldr	r2, [pc, #492]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0xd8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0xc0>
 8002f06:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a72      	ldr	r2, [pc, #456]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xd8>
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6b      	ldr	r2, [pc, #428]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe ff76 	bl	8001e30 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe ff72 	bl	8001e30 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e21f      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xe8>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff62 	bl	8001e30 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe ff5e 	bl	8001e30 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e20b      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x110>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d069      	beq.n	8003072 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9e:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x190>
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x17a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1df      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	493d      	ldr	r1, [pc, #244]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e040      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe ff14 	bl	8001e30 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe ff10 	bl	8001e30 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1bd      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4929      	ldr	r1, [pc, #164]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
 800303e:	e018      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fef0 	bl	8001e30 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe feec 	bl	8001e30 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e199      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d038      	beq.n	80030f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fe fecd 	bl	8001e30 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309a:	f7fe fec9 	bl	8001e30 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e176      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x23a>
 80030b8:	e01a      	b.n	80030f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x280>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe feb3 	bl	8001e30 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe feaf 	bl	8001e30 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d903      	bls.n	80030e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e15c      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
 80030e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a4 	beq.w	8003246 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fe:	4b8b      	ldr	r3, [pc, #556]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a87      	ldr	r2, [pc, #540]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b85      	ldr	r3, [pc, #532]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003126:	4b82      	ldr	r3, [pc, #520]	; (8003330 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d118      	bne.n	8003164 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003132:	4b7f      	ldr	r3, [pc, #508]	; (8003330 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7e      	ldr	r2, [pc, #504]	; (8003330 <HAL_RCC_OscConfig+0x4d0>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313e:	f7fe fe77 	bl	8001e30 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fe fe73 	bl	8001e30 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	; 0x64
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e120      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4b75      	ldr	r3, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x31a>
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	e02d      	b.n	80031d6 <HAL_RCC_OscConfig+0x376>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x33c>
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a69      	ldr	r2, [pc, #420]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a66      	ldr	r2, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003194:	f023 0304 	bic.w	r3, r3, #4
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	e01c      	b.n	80031d6 <HAL_RCC_OscConfig+0x376>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d10c      	bne.n	80031be <HAL_RCC_OscConfig+0x35e>
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
 80031bc:	e00b      	b.n	80031d6 <HAL_RCC_OscConfig+0x376>
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ca:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d015      	beq.n	800320a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7fe fe27 	bl	8001e30 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe fe23 	bl	8001e30 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0ce      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ee      	beq.n	80031e6 <HAL_RCC_OscConfig+0x386>
 8003208:	e014      	b.n	8003234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fe fe11 	bl	8001e30 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe fe0d 	bl	8001e30 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0b8      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ee      	bne.n	8003212 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a4 	beq.w	8003398 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d06b      	beq.n	8003334 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d149      	bne.n	80032f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800326a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fdde 	bl	8001e30 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fdda 	bl	8001e30 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e087      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	4313      	orrs	r3, r2
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fdae 	bl	8001e30 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fdaa 	bl	8001e30 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e057      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x478>
 80032f6:	e04f      	b.n	8003398 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fd94 	bl	8001e30 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fd90 	bl	8001e30 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e03d      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x4cc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x4ac>
 800332a:	e035      	b.n	8003398 <HAL_RCC_OscConfig+0x538>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x544>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d028      	beq.n	8003394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d121      	bne.n	8003394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0d0      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b67      	ldr	r3, [pc, #412]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	4965      	ldr	r1, [pc, #404]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a58      	ldr	r2, [pc, #352]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800342a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494d      	ldr	r1, [pc, #308]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d040      	beq.n	80034cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d115      	bne.n	800348a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e073      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06b      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4936      	ldr	r1, [pc, #216]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349c:	f7fe fcc8 	bl	8001e30 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe fcc4 	bl	8001e30 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e053      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d210      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 020f 	bic.w	r2, r3, #15
 80034e2:	4922      	ldr	r1, [pc, #136]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e032      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	490e      	ldr	r1, [pc, #56]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353a:	f000 f821 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490a      	ldr	r1, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x1cc>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1d0>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1d4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fc24 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00
 8003570:	40023800 	.word	0x40023800
 8003574:	08008510 	.word	0x08008510
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b094      	sub	sp, #80	; 0x50
 8003586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	647b      	str	r3, [r7, #68]	; 0x44
 800358c:	2300      	movs	r3, #0
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x40>
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	f200 80e1 	bhi.w	800376c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x3a>
 80035b2:	e0db      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4b73      	ldr	r3, [pc, #460]	; (8003784 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b8:	e0db      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_GetSysClockFreq+0x208>)
 80035bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035be:	e0d8      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ca:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	2200      	movs	r2, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	2300      	movs	r3, #0
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
 80035ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4621      	mov	r1, r4
 800360c:	1a51      	subs	r1, r2, r1
 800360e:	6139      	str	r1, [r7, #16]
 8003610:	4629      	mov	r1, r5
 8003612:	eb63 0301 	sbc.w	r3, r3, r1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003624:	4659      	mov	r1, fp
 8003626:	018b      	lsls	r3, r1, #6
 8003628:	4651      	mov	r1, sl
 800362a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362e:	4651      	mov	r1, sl
 8003630:	018a      	lsls	r2, r1, #6
 8003632:	4651      	mov	r1, sl
 8003634:	ebb2 0801 	subs.w	r8, r2, r1
 8003638:	4659      	mov	r1, fp
 800363a:	eb63 0901 	sbc.w	r9, r3, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003652:	4690      	mov	r8, r2
 8003654:	4699      	mov	r9, r3
 8003656:	4623      	mov	r3, r4
 8003658:	eb18 0303 	adds.w	r3, r8, r3
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	462b      	mov	r3, r5
 8003660:	eb49 0303 	adc.w	r3, r9, r3
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003672:	4629      	mov	r1, r5
 8003674:	024b      	lsls	r3, r1, #9
 8003676:	4621      	mov	r1, r4
 8003678:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800367c:	4621      	mov	r1, r4
 800367e:	024a      	lsls	r2, r1, #9
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	2200      	movs	r2, #0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003690:	f7fd f9fc 	bl	8000a8c <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	e058      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	2200      	movs	r2, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	4611      	mov	r1, r2
 80036aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	f04f 0000 	mov.w	r0, #0
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	0159      	lsls	r1, r3, #5
 80036c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ca:	0150      	lsls	r0, r2, #5
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4641      	mov	r1, r8
 80036d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036d6:	4649      	mov	r1, r9
 80036d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f0:	ebb2 040a 	subs.w	r4, r2, sl
 80036f4:	eb63 050b 	sbc.w	r5, r3, fp
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	00eb      	lsls	r3, r5, #3
 8003702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003706:	00e2      	lsls	r2, r4, #3
 8003708:	4614      	mov	r4, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4643      	mov	r3, r8
 800370e:	18e3      	adds	r3, r4, r3
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	464b      	mov	r3, r9
 8003714:	eb45 0303 	adc.w	r3, r5, r3
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003726:	4629      	mov	r1, r5
 8003728:	028b      	lsls	r3, r1, #10
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003730:	4621      	mov	r1, r4
 8003732:	028a      	lsls	r2, r1, #10
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	2200      	movs	r2, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	61fa      	str	r2, [r7, #28]
 8003740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003744:	f7fd f9a2 	bl	8000a8c <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetSysClockFreq+0x204>)
 800376e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003774:	4618      	mov	r0, r3
 8003776:	3750      	adds	r7, #80	; 0x50
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	00f42400 	.word	0x00f42400
 8003788:	007a1200 	.word	0x007a1200

0800378c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000000 	.word	0x20000000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08008520 	.word	0x08008520

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffdc 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08008520 	.word	0x08008520

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800381c:	4b69      	ldr	r3, [pc, #420]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a68      	ldr	r2, [pc, #416]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	4964      	ldr	r1, [pc, #400]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d017      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	4959      	ldr	r1, [pc, #356]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800388a:	4b4e      	ldr	r3, [pc, #312]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	494a      	ldr	r1, [pc, #296]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a8:	d101      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 808b 	beq.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6413      	str	r3, [r2, #64]	; 0x40
 80038e4:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038f0:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fe fa98 	bl	8001e30 <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fe fa94 	bl	8001e30 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e357      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d035      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d02e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003956:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a1a      	ldr	r2, [pc, #104]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d114      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe fa5c 	bl	8001e30 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fa58 	bl	8001e30 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e319      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d111      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	4901      	ldr	r1, [pc, #4]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
 80039c2:	e00b      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000
 80039cc:	0ffffcff 	.word	0x0ffffcff
 80039d0:	4baa      	ldr	r3, [pc, #680]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4aa9      	ldr	r2, [pc, #676]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039da:	6093      	str	r3, [r2, #8]
 80039dc:	4ba7      	ldr	r3, [pc, #668]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	49a4      	ldr	r1, [pc, #656]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039fa:	4ba0      	ldr	r3, [pc, #640]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a00:	4a9e      	ldr	r2, [pc, #632]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a0a:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4999      	ldr	r1, [pc, #612]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a28:	4b94      	ldr	r3, [pc, #592]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	4991      	ldr	r1, [pc, #580]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a4a:	4b8c      	ldr	r3, [pc, #560]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a58:	4988      	ldr	r1, [pc, #544]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a6c:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7a:	4980      	ldr	r1, [pc, #512]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a8e:	4b7b      	ldr	r3, [pc, #492]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4977      	ldr	r1, [pc, #476]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab0:	4b72      	ldr	r3, [pc, #456]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	496f      	ldr	r1, [pc, #444]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f023 020c 	bic.w	r2, r3, #12
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	4966      	ldr	r1, [pc, #408]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af4:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	495e      	ldr	r1, [pc, #376]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b16:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	4955      	ldr	r1, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b5a:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4944      	ldr	r1, [pc, #272]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	493c      	ldr	r1, [pc, #240]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	4933      	ldr	r1, [pc, #204]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bce:	492b      	ldr	r1, [pc, #172]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d011      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf0:	4922      	ldr	r1, [pc, #136]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	4912      	ldr	r1, [pc, #72]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c54:	4909      	ldr	r1, [pc, #36]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d006      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80d9 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a01      	ldr	r2, [pc, #4]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c82:	f7fe f8d5 	bl	8001e30 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c8a:	f7fe f8d1 	bl	8001e30 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b64      	cmp	r3, #100	; 0x64
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e194      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c9c:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d021      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cbc:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cca:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	019a      	lsls	r2, r3, #6
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	061b      	lsls	r3, r3, #24
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	071b      	lsls	r3, r3, #28
 8003cf0:	4957      	ldr	r1, [pc, #348]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02e      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d22:	d129      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d24:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d38:	0f1b      	lsrs	r3, r3, #28
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	019a      	lsls	r2, r3, #6
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	071b      	lsls	r3, r3, #28
 8003d58:	493d      	ldr	r1, [pc, #244]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d66:	f023 021f 	bic.w	r2, r3, #31
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	4937      	ldr	r1, [pc, #220]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d84:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8a:	0e1b      	lsrs	r3, r3, #24
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d92:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d98:	0f1b      	lsrs	r3, r3, #28
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	019a      	lsls	r2, r3, #6
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	071b      	lsls	r3, r3, #28
 8003db8:	4925      	ldr	r1, [pc, #148]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d011      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	019a      	lsls	r2, r3, #6
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	061b      	lsls	r3, r3, #24
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	071b      	lsls	r3, r3, #28
 8003de8:	4919      	ldr	r1, [pc, #100]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fe f818 	bl	8001e30 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e04:	f7fe f814 	bl	8001e30 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0d7      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 80cd 	bne.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fd fffb 	bl	8001e30 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e3e:	f7fd fff7 	bl	8001e30 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d903      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0ba      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e54:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e60:	d0ed      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d02e      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12a      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e8a:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e98:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	0f1b      	lsrs	r3, r3, #28
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	019a      	lsls	r2, r3, #6
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	4944      	ldr	r1, [pc, #272]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ec6:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	493d      	ldr	r1, [pc, #244]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d022      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef4:	d11d      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	0e1b      	lsrs	r3, r3, #24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	0f1b      	lsrs	r3, r3, #28
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	019a      	lsls	r2, r3, #6
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	4929      	ldr	r1, [pc, #164]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	0e1b      	lsrs	r3, r3, #24
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	019a      	lsls	r2, r3, #6
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	431a      	orrs	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	4917      	ldr	r1, [pc, #92]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4911      	ldr	r1, [pc, #68]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fd ff48 	bl	8001e30 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fa4:	f7fd ff44 	bl	8001e30 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e007      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc2:	d1ef      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e049      	b.n	800407a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd fc42 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 ff3e 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e049      	b.n	8004128 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f841 	bl	8004130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f000 fee7 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_TIM_PWM_Start+0x24>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e03c      	b.n	80041e2 <HAL_TIM_PWM_Start+0x9e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b04      	cmp	r3, #4
 800416c:	d109      	bne.n	8004182 <HAL_TIM_PWM_Start+0x3e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e02f      	b.n	80041e2 <HAL_TIM_PWM_Start+0x9e>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d109      	bne.n	800419c <HAL_TIM_PWM_Start+0x58>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e022      	b.n	80041e2 <HAL_TIM_PWM_Start+0x9e>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d109      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x72>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e015      	b.n	80041e2 <HAL_TIM_PWM_Start+0x9e>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d109      	bne.n	80041d0 <HAL_TIM_PWM_Start+0x8c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e008      	b.n	80041e2 <HAL_TIM_PWM_Start+0x9e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e092      	b.n	8004310 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <HAL_TIM_PWM_Start+0xb6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f8:	e023      	b.n	8004242 <HAL_TIM_PWM_Start+0xfe>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d104      	bne.n	800420a <HAL_TIM_PWM_Start+0xc6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004208:	e01b      	b.n	8004242 <HAL_TIM_PWM_Start+0xfe>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start+0xd6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004218:	e013      	b.n	8004242 <HAL_TIM_PWM_Start+0xfe>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0xe6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004228:	e00b      	b.n	8004242 <HAL_TIM_PWM_Start+0xfe>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xf6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004238:	e003      	b.n	8004242 <HAL_TIM_PWM_Start+0xfe>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2201      	movs	r2, #1
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fae4 	bl	8005818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a30      	ldr	r2, [pc, #192]	; (8004318 <HAL_TIM_PWM_Start+0x1d4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_PWM_Start+0x120>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <HAL_TIM_PWM_Start+0x1d8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Start+0x124>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Start+0x126>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <HAL_TIM_PWM_Start+0x1d4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d01d      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <HAL_TIM_PWM_Start+0x1dc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a20      	ldr	r2, [pc, #128]	; (8004324 <HAL_TIM_PWM_Start+0x1e0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_TIM_PWM_Start+0x1e4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_TIM_PWM_Start+0x1d8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_TIM_PWM_Start+0x1e8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIM_PWM_Start+0x18a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_TIM_PWM_Start+0x1ec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d115      	bne.n	80042fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_TIM_PWM_Start+0x1f0>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d015      	beq.n	800430c <HAL_TIM_PWM_Start+0x1c8>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d011      	beq.n	800430c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e008      	b.n	800430c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e000      	b.n	800430e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40010000 	.word	0x40010000
 800431c:	40010400 	.word	0x40010400
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40001800 	.word	0x40001800
 8004334:	00010007 	.word	0x00010007

08004338 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e049      	b.n	80043de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd fa44 	bl	80017ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 fd8c 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start_IT+0x1e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e023      	b.n	800444e <HAL_TIM_IC_Start_IT+0x66>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d104      	bne.n	8004416 <HAL_TIM_IC_Start_IT+0x2e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e01b      	b.n	800444e <HAL_TIM_IC_Start_IT+0x66>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IC_Start_IT+0x3e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e013      	b.n	800444e <HAL_TIM_IC_Start_IT+0x66>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b0c      	cmp	r3, #12
 800442a:	d104      	bne.n	8004436 <HAL_TIM_IC_Start_IT+0x4e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e00b      	b.n	800444e <HAL_TIM_IC_Start_IT+0x66>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b10      	cmp	r3, #16
 800443a:	d104      	bne.n	8004446 <HAL_TIM_IC_Start_IT+0x5e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e003      	b.n	800444e <HAL_TIM_IC_Start_IT+0x66>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800444c:	b2db      	uxtb	r3, r3
 800444e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_TIM_IC_Start_IT+0x78>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e013      	b.n	8004488 <HAL_TIM_IC_Start_IT+0xa0>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d104      	bne.n	8004470 <HAL_TIM_IC_Start_IT+0x88>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e00b      	b.n	8004488 <HAL_TIM_IC_Start_IT+0xa0>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d104      	bne.n	8004480 <HAL_TIM_IC_Start_IT+0x98>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e003      	b.n	8004488 <HAL_TIM_IC_Start_IT+0xa0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004486:	b2db      	uxtb	r3, r3
 8004488:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004490:	7b7b      	ldrb	r3, [r7, #13]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e0e2      	b.n	8004660 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_TIM_IC_Start_IT+0xc2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	e023      	b.n	80044f2 <HAL_TIM_IC_Start_IT+0x10a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_IC_Start_IT+0xd2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b8:	e01b      	b.n	80044f2 <HAL_TIM_IC_Start_IT+0x10a>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d104      	bne.n	80044ca <HAL_TIM_IC_Start_IT+0xe2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	e013      	b.n	80044f2 <HAL_TIM_IC_Start_IT+0x10a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d104      	bne.n	80044da <HAL_TIM_IC_Start_IT+0xf2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044d8:	e00b      	b.n	80044f2 <HAL_TIM_IC_Start_IT+0x10a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d104      	bne.n	80044ea <HAL_TIM_IC_Start_IT+0x102>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	e003      	b.n	80044f2 <HAL_TIM_IC_Start_IT+0x10a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_IC_Start_IT+0x11a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004500:	e013      	b.n	800452a <HAL_TIM_IC_Start_IT+0x142>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d104      	bne.n	8004512 <HAL_TIM_IC_Start_IT+0x12a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004510:	e00b      	b.n	800452a <HAL_TIM_IC_Start_IT+0x142>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d104      	bne.n	8004522 <HAL_TIM_IC_Start_IT+0x13a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004520:	e003      	b.n	800452a <HAL_TIM_IC_Start_IT+0x142>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d841      	bhi.n	80045b4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_TIM_IC_Start_IT+0x150>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800456d 	.word	0x0800456d
 800453c:	080045b5 	.word	0x080045b5
 8004540:	080045b5 	.word	0x080045b5
 8004544:	080045b5 	.word	0x080045b5
 8004548:	0800457f 	.word	0x0800457f
 800454c:	080045b5 	.word	0x080045b5
 8004550:	080045b5 	.word	0x080045b5
 8004554:	080045b5 	.word	0x080045b5
 8004558:	08004591 	.word	0x08004591
 800455c:	080045b5 	.word	0x080045b5
 8004560:	080045b5 	.word	0x080045b5
 8004564:	080045b5 	.word	0x080045b5
 8004568:	080045a3 	.word	0x080045a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0202 	orr.w	r2, r2, #2
 800457a:	60da      	str	r2, [r3, #12]
      break;
 800457c:	e01d      	b.n	80045ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0204 	orr.w	r2, r2, #4
 800458c:	60da      	str	r2, [r3, #12]
      break;
 800458e:	e014      	b.n	80045ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	60da      	str	r2, [r3, #12]
      break;
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0210 	orr.w	r2, r2, #16
 80045b0:	60da      	str	r2, [r3, #12]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d14e      	bne.n	800465e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f925 	bl	8005818 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a25      	ldr	r2, [pc, #148]	; (8004668 <HAL_TIM_IC_Start_IT+0x280>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a21      	ldr	r2, [pc, #132]	; (800466c <HAL_TIM_IC_Start_IT+0x284>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_TIM_IC_Start_IT+0x288>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_IC_Start_IT+0x28c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_TIM_IC_Start_IT+0x290>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <HAL_TIM_IC_Start_IT+0x294>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_IC_Start_IT+0x236>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_TIM_IC_Start_IT+0x298>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d115      	bne.n	800464a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_TIM_IC_Start_IT+0x29c>)
 8004626:	4013      	ands	r3, r2
 8004628:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d015      	beq.n	800465c <HAL_TIM_IC_Start_IT+0x274>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d011      	beq.n	800465c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	e008      	b.n	800465c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e000      	b.n	800465e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40010400 	.word	0x40010400
 800467c:	40014000 	.word	0x40014000
 8004680:	40001800 	.word	0x40001800
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0202 	mvn.w	r2, #2
 80046b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fb5c 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fbc0 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fbc7 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0204 	mvn.w	r2, #4
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fb32 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb96 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb9d 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b08      	cmp	r3, #8
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0208 	mvn.w	r2, #8
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2204      	movs	r2, #4
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fb08 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb6c 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb73 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2208      	movs	r2, #8
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc fade 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb42 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb49 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10e      	bne.n	800480c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0201 	mvn.w	r2, #1
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb1c 	bl	8004e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f8ae 	bl	8005994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d10e      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 f8a1 	bl	80059a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 faf7 	bl	8004e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0220 	mvn.w	r2, #32
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f001 f861 	bl	8005980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e088      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11b      	bne.n	800492a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004902:	f000 fdc5 	bl	8005490 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 020c 	bic.w	r2, r2, #12
 8004914:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]
 8004928:	e060      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d11c      	bne.n	800496a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004940:	f000 fe49 	bl	80055d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004952:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
 8004968:	e040      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004980:	f000 fe96 	bl	80056b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 020c 	bic.w	r2, r2, #12
 8004992:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69d9      	ldr	r1, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	61da      	str	r2, [r3, #28]
 80049a6:	e021      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d11c      	bne.n	80049e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80049be:	f000 feb3 	bl	8005728 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e001      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0ff      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b14      	cmp	r3, #20
 8004a2a:	f200 80f0 	bhi.w	8004c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004c0f 	.word	0x08004c0f
 8004a3c:	08004c0f 	.word	0x08004c0f
 8004a40:	08004c0f 	.word	0x08004c0f
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004c0f 	.word	0x08004c0f
 8004a4c:	08004c0f 	.word	0x08004c0f
 8004a50:	08004c0f 	.word	0x08004c0f
 8004a54:	08004b0b 	.word	0x08004b0b
 8004a58:	08004c0f 	.word	0x08004c0f
 8004a5c:	08004c0f 	.word	0x08004c0f
 8004a60:	08004c0f 	.word	0x08004c0f
 8004a64:	08004b4b 	.word	0x08004b4b
 8004a68:	08004c0f 	.word	0x08004c0f
 8004a6c:	08004c0f 	.word	0x08004c0f
 8004a70:	08004c0f 	.word	0x08004c0f
 8004a74:	08004b8d 	.word	0x08004b8d
 8004a78:	08004c0f 	.word	0x08004c0f
 8004a7c:	08004c0f 	.word	0x08004c0f
 8004a80:	08004c0f 	.word	0x08004c0f
 8004a84:	08004bcd 	.word	0x08004bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 faa0 	bl	8004fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e0a5      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 faf2 	bl	80050b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e084      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fb49 	bl	80051a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e064      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb9f 	bl	8005294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e043      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fbd6 	bl	8005344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bca:	e023      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fc08 	bl	80053e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c0c:	e002      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0b4      	b.n	8004dae <HAL_TIM_ConfigClockSource+0x186>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_TIM_ConfigClockSource+0x190>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7c:	d03e      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0xd4>
 8004c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c82:	f200 8087 	bhi.w	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	f000 8086 	beq.w	8004d9a <HAL_TIM_ConfigClockSource+0x172>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	d87f      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b70      	cmp	r3, #112	; 0x70
 8004c96:	d01a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0xa6>
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d87b      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b60      	cmp	r3, #96	; 0x60
 8004c9e:	d050      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x11a>
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d877      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b50      	cmp	r3, #80	; 0x50
 8004ca6:	d03c      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xfa>
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d873      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d058      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x13a>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d86f      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b30      	cmp	r3, #48	; 0x30
 8004cb6:	d064      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b30      	cmp	r3, #48	; 0x30
 8004cba:	d86b      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d060      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d867      	bhi.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d05a      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	e062      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	f000 fd7b 	bl	80057d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	609a      	str	r2, [r3, #8]
      break;
 8004cfa:	e04f      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	f000 fd64 	bl	80057d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1e:	609a      	str	r2, [r3, #8]
      break;
 8004d20:	e03c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fc22 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2150      	movs	r1, #80	; 0x50
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fd31 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e02c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fc7e 	bl	8005650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2160      	movs	r1, #96	; 0x60
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fd21 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8004d60:	e01c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 fc02 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fd11 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8004d80:	e00c      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f000 fd08 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8004d92:	e003      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e000      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	fffeff88 	.word	0xfffeff88

08004dbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d831      	bhi.n	8004e34 <HAL_TIM_ReadCapturedValue+0x78>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004e35 	.word	0x08004e35
 8004de8:	08004e17 	.word	0x08004e17
 8004dec:	08004e35 	.word	0x08004e35
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e35 	.word	0x08004e35
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e2b 	.word	0x08004e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	60fb      	str	r3, [r7, #12]

      break;
 8004e14:	e00f      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	60fb      	str	r3, [r7, #12]

      break;
 8004e1e:	e00a      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	60fb      	str	r3, [r7, #12]

      break;
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	60fb      	str	r3, [r7, #12]

      break;
 8004e32:	e000      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e34:	bf00      	nop
  }

  return tmpreg;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <TIM_Base_SetConfig+0x118>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3b      	ldr	r2, [pc, #236]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3a      	ldr	r2, [pc, #232]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d027      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <TIM_Base_SetConfig+0x118>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d023      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d017      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <TIM_Base_SetConfig+0x128>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <TIM_Base_SetConfig+0x138>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <TIM_Base_SetConfig+0x13c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d108      	bne.n	8004f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xf8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800
 8004fc8:	40001800 	.word	0x40001800
 8004fcc:	40001c00 	.word	0x40001c00
 8004fd0:	40002000 	.word	0x40002000

08004fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0201 	bic.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <TIM_OC1_SetConfig+0xd8>)
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0302 	bic.w	r3, r3, #2
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_OC1_SetConfig+0xdc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC1_SetConfig+0x64>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <TIM_OC1_SetConfig+0xe0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10c      	bne.n	8005052 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0308 	bic.w	r3, r3, #8
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <TIM_OC1_SetConfig+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC1_SetConfig+0x8e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <TIM_OC1_SetConfig+0xe0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d111      	bne.n	8005086 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	621a      	str	r2, [r3, #32]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	fffeff8f 	.word	0xfffeff8f
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40010400 	.word	0x40010400

080050b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0210 	bic.w	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4b2e      	ldr	r3, [pc, #184]	; (800519c <TIM_OC2_SetConfig+0xe4>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0320 	bic.w	r3, r3, #32
 8005102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_OC2_SetConfig+0xe8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC2_SetConfig+0x68>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_OC2_SetConfig+0xec>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10d      	bne.n	800513c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <TIM_OC2_SetConfig+0xe8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC2_SetConfig+0x94>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <TIM_OC2_SetConfig+0xec>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d113      	bne.n	8005174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800515a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	feff8fff 	.word	0xfeff8fff
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400

080051a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <TIM_OC3_SetConfig+0xe0>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <TIM_OC3_SetConfig+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC3_SetConfig+0x66>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a21      	ldr	r2, [pc, #132]	; (8005290 <TIM_OC3_SetConfig+0xe8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10d      	bne.n	800522a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <TIM_OC3_SetConfig+0xe4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC3_SetConfig+0x92>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <TIM_OC3_SetConfig+0xe8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d113      	bne.n	8005262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	fffeff8f 	.word	0xfffeff8f
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <TIM_OC4_SetConfig+0xa4>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a13      	ldr	r2, [pc, #76]	; (800533c <TIM_OC4_SetConfig+0xa8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC4_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <TIM_OC4_SetConfig+0xac>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	feff8fff 	.word	0xfeff8fff
 800533c:	40010000 	.word	0x40010000
 8005340:	40010400 	.word	0x40010400

08005344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <TIM_OC5_SetConfig+0x98>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <TIM_OC5_SetConfig+0x9c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC5_SetConfig+0x5e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <TIM_OC5_SetConfig+0xa0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d109      	bne.n	80053b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	fffeff8f 	.word	0xfffeff8f
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <TIM_OC6_SetConfig+0x9c>)
 8005414:	4013      	ands	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	051b      	lsls	r3, r3, #20
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a13      	ldr	r2, [pc, #76]	; (8005488 <TIM_OC6_SetConfig+0xa0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC6_SetConfig+0x60>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <TIM_OC6_SetConfig+0xa4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d109      	bne.n	800545c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	feff8fff 	.word	0xfeff8fff
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400

08005490 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a28      	ldr	r2, [pc, #160]	; (800555c <TIM_TI1_SetConfig+0xcc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d017      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <TIM_TI1_SetConfig+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a24      	ldr	r2, [pc, #144]	; (8005564 <TIM_TI1_SetConfig+0xd4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a23      	ldr	r2, [pc, #140]	; (8005568 <TIM_TI1_SetConfig+0xd8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <TIM_TI1_SetConfig+0xdc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a21      	ldr	r2, [pc, #132]	; (8005570 <TIM_TI1_SetConfig+0xe0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_TI1_SetConfig+0x66>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a20      	ldr	r2, [pc, #128]	; (8005574 <TIM_TI1_SetConfig+0xe4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <TIM_TI1_SetConfig+0x6a>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <TIM_TI1_SetConfig+0x6c>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e003      	b.n	800551a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	b2db      	uxtb	r3, r3
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f023 030a 	bic.w	r3, r3, #10
 8005534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 030a 	and.w	r3, r3, #10
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 0210 	bic.w	r2, r3, #16
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005602:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	b29b      	uxth	r3, r3
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005628:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f023 0210 	bic.w	r2, r3, #16
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800567a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	031b      	lsls	r3, r3, #12
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800568c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0303 	bic.w	r3, r3, #3
 80056dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005700:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005766:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	031b      	lsls	r3, r3, #12
 800576c:	b29b      	uxth	r3, r3
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800577a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	031b      	lsls	r3, r3, #12
 8005780:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	f043 0307 	orr.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2201      	movs	r2, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e06d      	b.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a30      	ldr	r2, [pc, #192]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a20      	ldr	r2, [pc, #128]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d01d      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1d      	ldr	r2, [pc, #116]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d10c      	bne.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40014000 	.word	0x40014000
 800597c:	40001800 	.word	0x40001800

08005980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e040      	b.n	8005a50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb ffcc 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fbe6 	bl	80061cc <UART_SetConfig>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e022      	b.n	8005a50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fe3e 	bl	8006694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fec5 	bl	80067d8 <UART_CheckIdleState>
 8005a4e:	4603      	mov	r3, r0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d171      	bne.n	8005b54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Transmit+0x24>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e06a      	b.n	8005b56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2221      	movs	r2, #33	; 0x21
 8005a8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8e:	f7fc f9cf 	bl	8001e30 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x68>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac8:	e02c      	b.n	8005b24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 feb6 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e038      	b.n	8005b56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1cc      	bne.n	8005aca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fe83 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e005      	b.n	8005b56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b08a      	sub	sp, #40	; 0x28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d132      	bne.n	8005bdc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_UART_Receive_IT+0x24>
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e02b      	b.n	8005bde <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d018      	beq.n	8005bcc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	69f9      	ldr	r1, [r7, #28]
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fefe 	bl	80069d4 <UART_Start_Receive_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	e000      	b.n	8005bde <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3728      	adds	r7, #40	; 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b0ba      	sub	sp, #232	; 0xe8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c12:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c16:	4013      	ands	r3, r2
 8005c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d115      	bne.n	8005c50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00f      	beq.n	8005c50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8297 	beq.w	8006174 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
      }
      return;
 8005c4e:	e291      	b.n	8006174 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8117 	beq.w	8005e88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c6a:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <HAL_UART_IRQHandler+0x298>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 810a 	beq.w	8005e88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xbc>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2201      	movs	r2, #1
 8005c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xec>
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cca:	f043 0204 	orr.w	r2, r3, #4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <HAL_UART_IRQHandler+0x11c>
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfa:	f043 0202 	orr.w	r2, r3, #2
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d017      	beq.n	8005d40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d36:	f043 0208 	orr.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d012      	beq.n	8005d72 <HAL_UART_IRQHandler+0x18a>
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 81fd 	beq.w	8006178 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d005      	beq.n	8005dca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04f      	beq.n	8005e6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fec8 	bl	8006b60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d141      	bne.n	8005e62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1d9      	bne.n	8005dde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <HAL_UART_IRQHandler+0x29c>)
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fc f9a7 	bl	8002192 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	e00f      	b.n	8005e7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9a0 	bl	80061a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	e00b      	b.n	8005e7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f99c 	bl	80061a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e68:	e007      	b.n	8005e7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f998 	bl	80061a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005e78:	e17e      	b.n	8006178 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	bf00      	nop
    return;
 8005e7c:	e17c      	b.n	8006178 <HAL_UART_IRQHandler+0x590>
 8005e7e:	bf00      	nop
 8005e80:	04000120 	.word	0x04000120
 8005e84:	08006c29 	.word	0x08006c29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 814c 	bne.w	800612a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8145 	beq.w	800612a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 813e 	beq.w	800612a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	f040 80b6 	bne.w	8006032 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ed2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8150 	beq.w	800617c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	f080 8148 	bcs.w	800617c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f00:	f000 8086 	beq.w	8006010 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1da      	bne.n	8005f04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e1      	bne.n	8005f4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3308      	adds	r3, #8
 8005faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e3      	bne.n	8005f8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	f023 0310 	bic.w	r3, r3, #16
 8005fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e4      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	4618      	mov	r0, r3
 800600c:	f7fc f851 	bl	80020b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006022:	b29b      	uxth	r3, r3
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8c2 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006030:	e0a4      	b.n	800617c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800603e:	b29b      	uxth	r3, r3
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8096 	beq.w	8006180 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8091 	beq.w	8006180 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
 8006082:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e4      	bne.n	800605e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3308      	adds	r3, #8
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	623b      	str	r3, [r7, #32]
   return(result);
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060b8:	633a      	str	r2, [r7, #48]	; 0x30
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e3      	bne.n	8006094 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0310 	bic.w	r3, r3, #16
 80060f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	69b9      	ldr	r1, [r7, #24]
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	617b      	str	r3, [r7, #20]
   return(result);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e4      	bne.n	80060e0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800611c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f846 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006128:	e02a      	b.n	8006180 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01c      	beq.n	8006184 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
    }
    return;
 8006152:	e017      	b.n	8006184 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <HAL_UART_IRQHandler+0x59e>
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fd71 	bl	8006c54 <UART_EndTransmit_IT>
    return;
 8006172:	e008      	b.n	8006186 <HAL_UART_IRQHandler+0x59e>
      return;
 8006174:	bf00      	nop
 8006176:	e006      	b.n	8006186 <HAL_UART_IRQHandler+0x59e>
    return;
 8006178:	bf00      	nop
 800617a:	e004      	b.n	8006186 <HAL_UART_IRQHandler+0x59e>
      return;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <HAL_UART_IRQHandler+0x59e>
      return;
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <HAL_UART_IRQHandler+0x59e>
    return;
 8006184:	bf00      	nop
  }

}
 8006186:	37e8      	adds	r7, #232	; 0xe8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4ba6      	ldr	r3, [pc, #664]	; (8006490 <UART_SetConfig+0x2c4>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	6979      	ldr	r1, [r7, #20]
 8006200:	430b      	orrs	r3, r1
 8006202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a94      	ldr	r2, [pc, #592]	; (8006494 <UART_SetConfig+0x2c8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d120      	bne.n	800628a <UART_SetConfig+0xbe>
 8006248:	4b93      	ldr	r3, [pc, #588]	; (8006498 <UART_SetConfig+0x2cc>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d816      	bhi.n	8006284 <UART_SetConfig+0xb8>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x90>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	0800626d 	.word	0x0800626d
 8006260:	08006279 	.word	0x08006279
 8006264:	08006273 	.word	0x08006273
 8006268:	0800627f 	.word	0x0800627f
 800626c:	2301      	movs	r3, #1
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e150      	b.n	8006514 <UART_SetConfig+0x348>
 8006272:	2302      	movs	r3, #2
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e14d      	b.n	8006514 <UART_SetConfig+0x348>
 8006278:	2304      	movs	r3, #4
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e14a      	b.n	8006514 <UART_SetConfig+0x348>
 800627e:	2308      	movs	r3, #8
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e147      	b.n	8006514 <UART_SetConfig+0x348>
 8006284:	2310      	movs	r3, #16
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e144      	b.n	8006514 <UART_SetConfig+0x348>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a83      	ldr	r2, [pc, #524]	; (800649c <UART_SetConfig+0x2d0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d132      	bne.n	80062fa <UART_SetConfig+0x12e>
 8006294:	4b80      	ldr	r3, [pc, #512]	; (8006498 <UART_SetConfig+0x2cc>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	d828      	bhi.n	80062f4 <UART_SetConfig+0x128>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0xdc>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	080062f5 	.word	0x080062f5
 80062b4:	080062f5 	.word	0x080062f5
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	080062f5 	.word	0x080062f5
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	080062e3 	.word	0x080062e3
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062f5 	.word	0x080062f5
 80062d8:	080062ef 	.word	0x080062ef
 80062dc:	2300      	movs	r3, #0
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e118      	b.n	8006514 <UART_SetConfig+0x348>
 80062e2:	2302      	movs	r3, #2
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e115      	b.n	8006514 <UART_SetConfig+0x348>
 80062e8:	2304      	movs	r3, #4
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e112      	b.n	8006514 <UART_SetConfig+0x348>
 80062ee:	2308      	movs	r3, #8
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e10f      	b.n	8006514 <UART_SetConfig+0x348>
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e10c      	b.n	8006514 <UART_SetConfig+0x348>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a68      	ldr	r2, [pc, #416]	; (80064a0 <UART_SetConfig+0x2d4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d120      	bne.n	8006346 <UART_SetConfig+0x17a>
 8006304:	4b64      	ldr	r3, [pc, #400]	; (8006498 <UART_SetConfig+0x2cc>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800630e:	2b30      	cmp	r3, #48	; 0x30
 8006310:	d013      	beq.n	800633a <UART_SetConfig+0x16e>
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d814      	bhi.n	8006340 <UART_SetConfig+0x174>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d009      	beq.n	800632e <UART_SetConfig+0x162>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d810      	bhi.n	8006340 <UART_SetConfig+0x174>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <UART_SetConfig+0x15c>
 8006322:	2b10      	cmp	r3, #16
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x168>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x174>
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e0f2      	b.n	8006514 <UART_SetConfig+0x348>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e0ef      	b.n	8006514 <UART_SetConfig+0x348>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e0ec      	b.n	8006514 <UART_SetConfig+0x348>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e0e9      	b.n	8006514 <UART_SetConfig+0x348>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e0e6      	b.n	8006514 <UART_SetConfig+0x348>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <UART_SetConfig+0x2d8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d120      	bne.n	8006392 <UART_SetConfig+0x1c6>
 8006350:	4b51      	ldr	r3, [pc, #324]	; (8006498 <UART_SetConfig+0x2cc>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800635a:	2bc0      	cmp	r3, #192	; 0xc0
 800635c:	d013      	beq.n	8006386 <UART_SetConfig+0x1ba>
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	d814      	bhi.n	800638c <UART_SetConfig+0x1c0>
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d009      	beq.n	800637a <UART_SetConfig+0x1ae>
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d810      	bhi.n	800638c <UART_SetConfig+0x1c0>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0x1a8>
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d006      	beq.n	8006380 <UART_SetConfig+0x1b4>
 8006372:	e00b      	b.n	800638c <UART_SetConfig+0x1c0>
 8006374:	2300      	movs	r3, #0
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e0cc      	b.n	8006514 <UART_SetConfig+0x348>
 800637a:	2302      	movs	r3, #2
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e0c9      	b.n	8006514 <UART_SetConfig+0x348>
 8006380:	2304      	movs	r3, #4
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e0c6      	b.n	8006514 <UART_SetConfig+0x348>
 8006386:	2308      	movs	r3, #8
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e0c3      	b.n	8006514 <UART_SetConfig+0x348>
 800638c:	2310      	movs	r3, #16
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e0c0      	b.n	8006514 <UART_SetConfig+0x348>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a44      	ldr	r2, [pc, #272]	; (80064a8 <UART_SetConfig+0x2dc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d125      	bne.n	80063e8 <UART_SetConfig+0x21c>
 800639c:	4b3e      	ldr	r3, [pc, #248]	; (8006498 <UART_SetConfig+0x2cc>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063aa:	d017      	beq.n	80063dc <UART_SetConfig+0x210>
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b0:	d817      	bhi.n	80063e2 <UART_SetConfig+0x216>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d00b      	beq.n	80063d0 <UART_SetConfig+0x204>
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063bc:	d811      	bhi.n	80063e2 <UART_SetConfig+0x216>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <UART_SetConfig+0x1fe>
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d006      	beq.n	80063d6 <UART_SetConfig+0x20a>
 80063c8:	e00b      	b.n	80063e2 <UART_SetConfig+0x216>
 80063ca:	2300      	movs	r3, #0
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e0a1      	b.n	8006514 <UART_SetConfig+0x348>
 80063d0:	2302      	movs	r3, #2
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e09e      	b.n	8006514 <UART_SetConfig+0x348>
 80063d6:	2304      	movs	r3, #4
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e09b      	b.n	8006514 <UART_SetConfig+0x348>
 80063dc:	2308      	movs	r3, #8
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e098      	b.n	8006514 <UART_SetConfig+0x348>
 80063e2:	2310      	movs	r3, #16
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e095      	b.n	8006514 <UART_SetConfig+0x348>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2f      	ldr	r2, [pc, #188]	; (80064ac <UART_SetConfig+0x2e0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d125      	bne.n	800643e <UART_SetConfig+0x272>
 80063f2:	4b29      	ldr	r3, [pc, #164]	; (8006498 <UART_SetConfig+0x2cc>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006400:	d017      	beq.n	8006432 <UART_SetConfig+0x266>
 8006402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006406:	d817      	bhi.n	8006438 <UART_SetConfig+0x26c>
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d00b      	beq.n	8006426 <UART_SetConfig+0x25a>
 800640e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006412:	d811      	bhi.n	8006438 <UART_SetConfig+0x26c>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <UART_SetConfig+0x254>
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d006      	beq.n	800642c <UART_SetConfig+0x260>
 800641e:	e00b      	b.n	8006438 <UART_SetConfig+0x26c>
 8006420:	2301      	movs	r3, #1
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e076      	b.n	8006514 <UART_SetConfig+0x348>
 8006426:	2302      	movs	r3, #2
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e073      	b.n	8006514 <UART_SetConfig+0x348>
 800642c:	2304      	movs	r3, #4
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e070      	b.n	8006514 <UART_SetConfig+0x348>
 8006432:	2308      	movs	r3, #8
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e06d      	b.n	8006514 <UART_SetConfig+0x348>
 8006438:	2310      	movs	r3, #16
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e06a      	b.n	8006514 <UART_SetConfig+0x348>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <UART_SetConfig+0x2e4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d138      	bne.n	80064ba <UART_SetConfig+0x2ee>
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <UART_SetConfig+0x2cc>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006456:	d017      	beq.n	8006488 <UART_SetConfig+0x2bc>
 8006458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800645c:	d82a      	bhi.n	80064b4 <UART_SetConfig+0x2e8>
 800645e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006462:	d00b      	beq.n	800647c <UART_SetConfig+0x2b0>
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006468:	d824      	bhi.n	80064b4 <UART_SetConfig+0x2e8>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <UART_SetConfig+0x2aa>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d006      	beq.n	8006482 <UART_SetConfig+0x2b6>
 8006474:	e01e      	b.n	80064b4 <UART_SetConfig+0x2e8>
 8006476:	2300      	movs	r3, #0
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e04b      	b.n	8006514 <UART_SetConfig+0x348>
 800647c:	2302      	movs	r3, #2
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e048      	b.n	8006514 <UART_SetConfig+0x348>
 8006482:	2304      	movs	r3, #4
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e045      	b.n	8006514 <UART_SetConfig+0x348>
 8006488:	2308      	movs	r3, #8
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e042      	b.n	8006514 <UART_SetConfig+0x348>
 800648e:	bf00      	nop
 8006490:	efff69f3 	.word	0xefff69f3
 8006494:	40011000 	.word	0x40011000
 8006498:	40023800 	.word	0x40023800
 800649c:	40004400 	.word	0x40004400
 80064a0:	40004800 	.word	0x40004800
 80064a4:	40004c00 	.word	0x40004c00
 80064a8:	40005000 	.word	0x40005000
 80064ac:	40011400 	.word	0x40011400
 80064b0:	40007800 	.word	0x40007800
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e02c      	b.n	8006514 <UART_SetConfig+0x348>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a72      	ldr	r2, [pc, #456]	; (8006688 <UART_SetConfig+0x4bc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d125      	bne.n	8006510 <UART_SetConfig+0x344>
 80064c4:	4b71      	ldr	r3, [pc, #452]	; (800668c <UART_SetConfig+0x4c0>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064d2:	d017      	beq.n	8006504 <UART_SetConfig+0x338>
 80064d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064d8:	d817      	bhi.n	800650a <UART_SetConfig+0x33e>
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064de:	d00b      	beq.n	80064f8 <UART_SetConfig+0x32c>
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	d811      	bhi.n	800650a <UART_SetConfig+0x33e>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <UART_SetConfig+0x326>
 80064ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ee:	d006      	beq.n	80064fe <UART_SetConfig+0x332>
 80064f0:	e00b      	b.n	800650a <UART_SetConfig+0x33e>
 80064f2:	2300      	movs	r3, #0
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e00d      	b.n	8006514 <UART_SetConfig+0x348>
 80064f8:	2302      	movs	r3, #2
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e00a      	b.n	8006514 <UART_SetConfig+0x348>
 80064fe:	2304      	movs	r3, #4
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e007      	b.n	8006514 <UART_SetConfig+0x348>
 8006504:	2308      	movs	r3, #8
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e004      	b.n	8006514 <UART_SetConfig+0x348>
 800650a:	2310      	movs	r3, #16
 800650c:	77fb      	strb	r3, [r7, #31]
 800650e:	e001      	b.n	8006514 <UART_SetConfig+0x348>
 8006510:	2310      	movs	r3, #16
 8006512:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	d15b      	bne.n	80065d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800651e:	7ffb      	ldrb	r3, [r7, #31]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d828      	bhi.n	8006576 <UART_SetConfig+0x3aa>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x360>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	08006577 	.word	0x08006577
 800653c:	08006567 	.word	0x08006567
 8006540:	08006577 	.word	0x08006577
 8006544:	08006577 	.word	0x08006577
 8006548:	08006577 	.word	0x08006577
 800654c:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fd f928 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8006554:	61b8      	str	r0, [r7, #24]
        break;
 8006556:	e013      	b.n	8006580 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006558:	f7fd f938 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 800655c:	61b8      	str	r0, [r7, #24]
        break;
 800655e:	e00f      	b.n	8006580 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b4b      	ldr	r3, [pc, #300]	; (8006690 <UART_SetConfig+0x4c4>)
 8006562:	61bb      	str	r3, [r7, #24]
        break;
 8006564:	e00c      	b.n	8006580 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd f80b 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800656a:	61b8      	str	r0, [r7, #24]
        break;
 800656c:	e008      	b.n	8006580 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	61bb      	str	r3, [r7, #24]
        break;
 8006574:	e004      	b.n	8006580 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	77bb      	strb	r3, [r7, #30]
        break;
 800657e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d074      	beq.n	8006670 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	005a      	lsls	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d916      	bls.n	80065d0 <UART_SetConfig+0x404>
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d212      	bcs.n	80065d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f023 030f 	bic.w	r3, r3, #15
 80065b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	b29a      	uxth	r2, r3
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	89fa      	ldrh	r2, [r7, #14]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e04f      	b.n	8006670 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77bb      	strb	r3, [r7, #30]
 80065d4:	e04c      	b.n	8006670 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d828      	bhi.n	800662e <UART_SetConfig+0x462>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x418>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	0800662f 	.word	0x0800662f
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
 8006604:	08006627 	.word	0x08006627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fd f8cc 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e013      	b.n	8006638 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fd f8dc 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e00f      	b.n	8006638 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <UART_SetConfig+0x4c4>)
 800661a:	61bb      	str	r3, [r7, #24]
        break;
 800661c:	e00c      	b.n	8006638 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661e:	f7fc ffaf 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8006622:	61b8      	str	r0, [r7, #24]
        break;
 8006624:	e008      	b.n	8006638 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	61bb      	str	r3, [r7, #24]
        break;
 800662c:	e004      	b.n	8006638 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	77bb      	strb	r3, [r7, #30]
        break;
 8006636:	bf00      	nop
    }

    if (pclk != 0U)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	085a      	lsrs	r2, r3, #1
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	441a      	add	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b0f      	cmp	r3, #15
 8006656:	d909      	bls.n	800666c <UART_SetConfig+0x4a0>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665e:	d205      	bcs.n	800666c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	e001      	b.n	8006670 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800667c:	7fbb      	ldrb	r3, [r7, #30]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40007c00 	.word	0x40007c00
 800668c:	40023800 	.word	0x40023800
 8006690:	00f42400 	.word	0x00f42400

08006694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006792:	d10a      	bne.n	80067aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af02      	add	r7, sp, #8
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067e8:	f7fb fb22 	bl	8001e30 <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d10e      	bne.n	800681a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f81b 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e011      	b.n	800683e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b09c      	sub	sp, #112	; 0x70
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	e0a7      	b.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	f000 80a3 	beq.w	80069a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fb fae5 	bl	8001e30 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <UART_WaitOnFlagUntilTimeout+0x32>
 8006872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006874:	2b00      	cmp	r3, #0
 8006876:	d13f      	bne.n	80068f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800688c:	667b      	str	r3, [r7, #100]	; 0x64
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006898:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800689c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e6      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	663b      	str	r3, [r7, #96]	; 0x60
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e068      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d050      	beq.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006914:	d148      	bne.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800691e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
 8006940:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e6      	bne.n	8006920 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	66bb      	str	r3, [r7, #104]	; 0x68
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006972:	623a      	str	r2, [r7, #32]
 8006974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69f9      	ldr	r1, [r7, #28]
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e010      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4013      	ands	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	f43f af48 	beq.w	8006858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3770      	adds	r7, #112	; 0x70
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b097      	sub	sp, #92	; 0x5c
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d10e      	bne.n	8006a26 <UART_Start_Receive_IT+0x52>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d105      	bne.n	8006a1c <UART_Start_Receive_IT+0x48>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a1a:	e02d      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a24:	e028      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10d      	bne.n	8006a4a <UART_Start_Receive_IT+0x76>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <UART_Start_Receive_IT+0x6c>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	22ff      	movs	r2, #255	; 0xff
 8006a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a3e:	e01b      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	227f      	movs	r2, #127	; 0x7f
 8006a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a48:	e016      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a52:	d10d      	bne.n	8006a70 <UART_Start_Receive_IT+0x9c>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <UART_Start_Receive_IT+0x92>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	227f      	movs	r2, #127	; 0x7f
 8006a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a64:	e008      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	223f      	movs	r2, #63	; 0x3f
 8006a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a6e:	e003      	b.n	8006a78 <UART_Start_Receive_IT+0xa4>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2222      	movs	r2, #34	; 0x22
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aa8:	64ba      	str	r2, [r7, #72]	; 0x48
 8006aaa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d107      	bne.n	8006ad6 <UART_Start_Receive_IT+0x102>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <UART_Start_Receive_IT+0x184>)
 8006ad2:	669a      	str	r2, [r3, #104]	; 0x68
 8006ad4:	e002      	b.n	8006adc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a20      	ldr	r2, [pc, #128]	; (8006b5c <UART_Start_Receive_IT+0x188>)
 8006ada:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d019      	beq.n	8006b18 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
 8006b04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <UART_Start_Receive_IT+0x110>
 8006b16:	e018      	b.n	8006b4a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	613b      	str	r3, [r7, #16]
   return(result);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f043 0320 	orr.w	r3, r3, #32
 8006b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69f9      	ldr	r1, [r7, #28]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e6      	bne.n	8006b18 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	375c      	adds	r7, #92	; 0x5c
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	08006e0f 	.word	0x08006e0f
 8006b5c:	08006ca9 	.word	0x08006ca9

08006b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b095      	sub	sp, #84	; 0x54
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	643b      	str	r3, [r7, #64]	; 0x40
 8006b88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d118      	bne.n	8006c08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0310 	bic.w	r3, r3, #16
 8006bea:	647b      	str	r3, [r7, #68]	; 0x44
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6979      	ldr	r1, [r7, #20]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	613b      	str	r3, [r7, #16]
   return(result);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e6      	bne.n	8006bd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c1c:	bf00      	nop
 8006c1e:	3754      	adds	r7, #84	; 0x54
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff faaa 	bl	80061a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6979      	ldr	r1, [r7, #20]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	613b      	str	r3, [r7, #16]
   return(result);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e6      	bne.n	8006c5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fa76 	bl	800618c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca0:	bf00      	nop
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b096      	sub	sp, #88	; 0x58
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc0:	2b22      	cmp	r3, #34	; 0x22
 8006cc2:	f040 8098 	bne.w	8006df6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cd0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006cd4:	b2d9      	uxtb	r1, r3
 8006cd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d17b      	bne.n	8006e06 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e6      	bne.n	8006d0e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d60:	633a      	str	r2, [r7, #48]	; 0x30
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d12e      	bne.n	8006dee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0310 	bic.w	r3, r3, #16
 8006daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d103      	bne.n	8006dde <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff f9e4 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dec:	e00b      	b.n	8006e06 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fa f8bc 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006df4:	e007      	b.n	8006e06 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0208 	orr.w	r2, r2, #8
 8006e04:	619a      	str	r2, [r3, #24]
}
 8006e06:	bf00      	nop
 8006e08:	3758      	adds	r7, #88	; 0x58
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b096      	sub	sp, #88	; 0x58
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e26:	2b22      	cmp	r3, #34	; 0x22
 8006e28:	f040 8098 	bne.w	8006f5c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e44:	4013      	ands	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d17b      	bne.n	8006f6c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e92:	643b      	str	r3, [r7, #64]	; 0x40
 8006e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d12e      	bne.n	8006f54 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0310 	bic.w	r3, r3, #16
 8006f10:	647b      	str	r3, [r7, #68]	; 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	613b      	str	r3, [r7, #16]
   return(result);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d103      	bne.n	8006f44 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2210      	movs	r2, #16
 8006f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff f931 	bl	80061b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f52:	e00b      	b.n	8006f6c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7fa f809 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006f5a:	e007      	b.n	8006f6c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0208 	orr.w	r2, r2, #8
 8006f6a:	619a      	str	r2, [r3, #24]
}
 8006f6c:	bf00      	nop
 8006f6e:	3758      	adds	r7, #88	; 0x58
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f74:	b084      	sub	sp, #16
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	f107 001c 	add.w	r0, r7, #28
 8006f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d120      	bne.n	8006fce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	4b20      	ldr	r3, [pc, #128]	; (8007020 <USB_CoreInit+0xac>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d105      	bne.n	8006fc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa96 	bl	80074f4 <USB_CoreReset>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e010      	b.n	8006ff0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa8a 	bl	80074f4 <USB_CoreReset>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10b      	bne.n	800700e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f043 0206 	orr.w	r2, r3, #6
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701a:	b004      	add	sp, #16
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	ffbdffbf 	.word	0xffbdffbf

08007024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f023 0201 	bic.w	r2, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d115      	bne.n	8007094 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007074:	2001      	movs	r0, #1
 8007076:	f7fa fee7 	bl	8001e48 <HAL_Delay>
      ms++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fa29 	bl	80074d8 <USB_GetMode>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d01e      	beq.n	80070ca <USB_SetCurrentMode+0x84>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b31      	cmp	r3, #49	; 0x31
 8007090:	d9f0      	bls.n	8007074 <USB_SetCurrentMode+0x2e>
 8007092:	e01a      	b.n	80070ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d115      	bne.n	80070c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070a6:	2001      	movs	r0, #1
 80070a8:	f7fa fece 	bl	8001e48 <HAL_Delay>
      ms++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa10 	bl	80074d8 <USB_GetMode>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <USB_SetCurrentMode+0x84>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b31      	cmp	r3, #49	; 0x31
 80070c2:	d9f0      	bls.n	80070a6 <USB_SetCurrentMode+0x60>
 80070c4:	e001      	b.n	80070ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e005      	b.n	80070d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b32      	cmp	r3, #50	; 0x32
 80070ce:	d101      	bne.n	80070d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070e0:	b084      	sub	sp, #16
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	e009      	b.n	8007114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3340      	adds	r3, #64	; 0x40
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	2200      	movs	r2, #0
 800710c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3301      	adds	r3, #1
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b0e      	cmp	r3, #14
 8007118:	d9f2      	bls.n	8007100 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d11c      	bne.n	800715a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712e:	f043 0302 	orr.w	r3, r3, #2
 8007132:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e005      	b.n	8007166 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800716c:	461a      	mov	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	4619      	mov	r1, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	461a      	mov	r2, r3
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b01      	cmp	r3, #1
 800718a:	d10c      	bne.n	80071a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f965 	bl	8007464 <USB_SetDevSpeed>
 800719a:	e008      	b.n	80071ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800719c:	2101      	movs	r1, #1
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f960 	bl	8007464 <USB_SetDevSpeed>
 80071a4:	e003      	b.n	80071ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071a6:	2103      	movs	r1, #3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f95b 	bl	8007464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ae:	2110      	movs	r1, #16
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8f3 	bl	800739c <USB_FlushTxFifo>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f91f 	bl	8007404 <USB_FlushRxFifo>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	461a      	mov	r2, r3
 80071d8:	2300      	movs	r3, #0
 80071da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	e043      	b.n	8007282 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800720c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007210:	d118      	bne.n	8007244 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	461a      	mov	r2, r3
 8007226:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	e013      	b.n	8007256 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	461a      	mov	r2, r3
 800723c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e008      	b.n	8007256 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	461a      	mov	r2, r3
 8007252:	2300      	movs	r3, #0
 8007254:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	461a      	mov	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	461a      	mov	r2, r3
 8007276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800727a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	3301      	adds	r3, #1
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3b7      	bcc.n	80071fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	e043      	b.n	8007318 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a6:	d118      	bne.n	80072da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ba:	461a      	mov	r2, r3
 80072bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e013      	b.n	80072ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	461a      	mov	r2, r3
 80072d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	e008      	b.n	80072ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	461a      	mov	r2, r3
 800730c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007310:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3301      	adds	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d3b7      	bcc.n	8007290 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007332:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007340:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f043 0210 	orr.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <USB_DevInit+0x2b4>)
 800735a:	4313      	orrs	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f043 0208 	orr.w	r2, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d105      	bne.n	8007384 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <USB_DevInit+0x2b8>)
 800737e:	4313      	orrs	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007390:	b004      	add	sp, #16
 8007392:	4770      	bx	lr
 8007394:	803c3800 	.word	0x803c3800
 8007398:	40000004 	.word	0x40000004

0800739c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a13      	ldr	r2, [pc, #76]	; (8007400 <USB_FlushTxFifo+0x64>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d901      	bls.n	80073bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e01b      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	daf2      	bge.n	80073aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	f043 0220 	orr.w	r2, r3, #32
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a08      	ldr	r2, [pc, #32]	; (8007400 <USB_FlushTxFifo+0x64>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e006      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d0f0      	beq.n	80073d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	00030d40 	.word	0x00030d40

08007404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4a11      	ldr	r2, [pc, #68]	; (8007460 <USB_FlushRxFifo+0x5c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e018      	b.n	8007454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	daf2      	bge.n	8007410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2210      	movs	r2, #16
 8007432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a08      	ldr	r2, [pc, #32]	; (8007460 <USB_FlushRxFifo+0x5c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e006      	b.n	8007454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0310 	and.w	r3, r3, #16
 800744e:	2b10      	cmp	r3, #16
 8007450:	d0f0      	beq.n	8007434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	00030d40 	.word	0x00030d40

08007464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b0:	f023 0303 	bic.w	r3, r3, #3
 80074b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0301 	and.w	r3, r3, #1
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a13      	ldr	r2, [pc, #76]	; (8007558 <USB_CoreReset+0x64>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e01b      	b.n	800754a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	daf2      	bge.n	8007500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f043 0201 	orr.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <USB_CoreReset+0x64>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d901      	bls.n	800753c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d0f0      	beq.n	800752a <USB_CoreReset+0x36>

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	00030d40 	.word	0x00030d40

0800755c <atoi>:
 800755c:	220a      	movs	r2, #10
 800755e:	2100      	movs	r1, #0
 8007560:	f000 b882 	b.w	8007668 <strtol>

08007564 <_strtol_l.constprop.0>:
 8007564:	2b01      	cmp	r3, #1
 8007566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756a:	d001      	beq.n	8007570 <_strtol_l.constprop.0+0xc>
 800756c:	2b24      	cmp	r3, #36	; 0x24
 800756e:	d906      	bls.n	800757e <_strtol_l.constprop.0+0x1a>
 8007570:	f000 f9ea 	bl	8007948 <__errno>
 8007574:	2316      	movs	r3, #22
 8007576:	6003      	str	r3, [r0, #0]
 8007578:	2000      	movs	r0, #0
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007664 <_strtol_l.constprop.0+0x100>
 8007582:	460d      	mov	r5, r1
 8007584:	462e      	mov	r6, r5
 8007586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800758a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800758e:	f017 0708 	ands.w	r7, r7, #8
 8007592:	d1f7      	bne.n	8007584 <_strtol_l.constprop.0+0x20>
 8007594:	2c2d      	cmp	r4, #45	; 0x2d
 8007596:	d132      	bne.n	80075fe <_strtol_l.constprop.0+0x9a>
 8007598:	782c      	ldrb	r4, [r5, #0]
 800759a:	2701      	movs	r7, #1
 800759c:	1cb5      	adds	r5, r6, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d05b      	beq.n	800765a <_strtol_l.constprop.0+0xf6>
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d109      	bne.n	80075ba <_strtol_l.constprop.0+0x56>
 80075a6:	2c30      	cmp	r4, #48	; 0x30
 80075a8:	d107      	bne.n	80075ba <_strtol_l.constprop.0+0x56>
 80075aa:	782c      	ldrb	r4, [r5, #0]
 80075ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80075b0:	2c58      	cmp	r4, #88	; 0x58
 80075b2:	d14d      	bne.n	8007650 <_strtol_l.constprop.0+0xec>
 80075b4:	786c      	ldrb	r4, [r5, #1]
 80075b6:	2310      	movs	r3, #16
 80075b8:	3502      	adds	r5, #2
 80075ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80075be:	f108 38ff 	add.w	r8, r8, #4294967295
 80075c2:	f04f 0e00 	mov.w	lr, #0
 80075c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80075ca:	4676      	mov	r6, lr
 80075cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80075d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075d4:	f1bc 0f09 	cmp.w	ip, #9
 80075d8:	d816      	bhi.n	8007608 <_strtol_l.constprop.0+0xa4>
 80075da:	4664      	mov	r4, ip
 80075dc:	42a3      	cmp	r3, r4
 80075de:	dd24      	ble.n	800762a <_strtol_l.constprop.0+0xc6>
 80075e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80075e4:	d008      	beq.n	80075f8 <_strtol_l.constprop.0+0x94>
 80075e6:	45b1      	cmp	r9, r6
 80075e8:	d31c      	bcc.n	8007624 <_strtol_l.constprop.0+0xc0>
 80075ea:	d101      	bne.n	80075f0 <_strtol_l.constprop.0+0x8c>
 80075ec:	45a2      	cmp	sl, r4
 80075ee:	db19      	blt.n	8007624 <_strtol_l.constprop.0+0xc0>
 80075f0:	fb06 4603 	mla	r6, r6, r3, r4
 80075f4:	f04f 0e01 	mov.w	lr, #1
 80075f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075fc:	e7e8      	b.n	80075d0 <_strtol_l.constprop.0+0x6c>
 80075fe:	2c2b      	cmp	r4, #43	; 0x2b
 8007600:	bf04      	itt	eq
 8007602:	782c      	ldrbeq	r4, [r5, #0]
 8007604:	1cb5      	addeq	r5, r6, #2
 8007606:	e7ca      	b.n	800759e <_strtol_l.constprop.0+0x3a>
 8007608:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800760c:	f1bc 0f19 	cmp.w	ip, #25
 8007610:	d801      	bhi.n	8007616 <_strtol_l.constprop.0+0xb2>
 8007612:	3c37      	subs	r4, #55	; 0x37
 8007614:	e7e2      	b.n	80075dc <_strtol_l.constprop.0+0x78>
 8007616:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800761a:	f1bc 0f19 	cmp.w	ip, #25
 800761e:	d804      	bhi.n	800762a <_strtol_l.constprop.0+0xc6>
 8007620:	3c57      	subs	r4, #87	; 0x57
 8007622:	e7db      	b.n	80075dc <_strtol_l.constprop.0+0x78>
 8007624:	f04f 3eff 	mov.w	lr, #4294967295
 8007628:	e7e6      	b.n	80075f8 <_strtol_l.constprop.0+0x94>
 800762a:	f1be 3fff 	cmp.w	lr, #4294967295
 800762e:	d105      	bne.n	800763c <_strtol_l.constprop.0+0xd8>
 8007630:	2322      	movs	r3, #34	; 0x22
 8007632:	6003      	str	r3, [r0, #0]
 8007634:	4646      	mov	r6, r8
 8007636:	b942      	cbnz	r2, 800764a <_strtol_l.constprop.0+0xe6>
 8007638:	4630      	mov	r0, r6
 800763a:	e79e      	b.n	800757a <_strtol_l.constprop.0+0x16>
 800763c:	b107      	cbz	r7, 8007640 <_strtol_l.constprop.0+0xdc>
 800763e:	4276      	negs	r6, r6
 8007640:	2a00      	cmp	r2, #0
 8007642:	d0f9      	beq.n	8007638 <_strtol_l.constprop.0+0xd4>
 8007644:	f1be 0f00 	cmp.w	lr, #0
 8007648:	d000      	beq.n	800764c <_strtol_l.constprop.0+0xe8>
 800764a:	1e69      	subs	r1, r5, #1
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	e7f3      	b.n	8007638 <_strtol_l.constprop.0+0xd4>
 8007650:	2430      	movs	r4, #48	; 0x30
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1b1      	bne.n	80075ba <_strtol_l.constprop.0+0x56>
 8007656:	2308      	movs	r3, #8
 8007658:	e7af      	b.n	80075ba <_strtol_l.constprop.0+0x56>
 800765a:	2c30      	cmp	r4, #48	; 0x30
 800765c:	d0a5      	beq.n	80075aa <_strtol_l.constprop.0+0x46>
 800765e:	230a      	movs	r3, #10
 8007660:	e7ab      	b.n	80075ba <_strtol_l.constprop.0+0x56>
 8007662:	bf00      	nop
 8007664:	08008529 	.word	0x08008529

08007668 <strtol>:
 8007668:	4613      	mov	r3, r2
 800766a:	460a      	mov	r2, r1
 800766c:	4601      	mov	r1, r0
 800766e:	4802      	ldr	r0, [pc, #8]	; (8007678 <strtol+0x10>)
 8007670:	6800      	ldr	r0, [r0, #0]
 8007672:	f7ff bf77 	b.w	8007564 <_strtol_l.constprop.0>
 8007676:	bf00      	nop
 8007678:	20000064 	.word	0x20000064

0800767c <std>:
 800767c:	2300      	movs	r3, #0
 800767e:	b510      	push	{r4, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	e9c0 3300 	strd	r3, r3, [r0]
 8007686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800768a:	6083      	str	r3, [r0, #8]
 800768c:	8181      	strh	r1, [r0, #12]
 800768e:	6643      	str	r3, [r0, #100]	; 0x64
 8007690:	81c2      	strh	r2, [r0, #14]
 8007692:	6183      	str	r3, [r0, #24]
 8007694:	4619      	mov	r1, r3
 8007696:	2208      	movs	r2, #8
 8007698:	305c      	adds	r0, #92	; 0x5c
 800769a:	f000 f906 	bl	80078aa <memset>
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <std+0x58>)
 80076a0:	6263      	str	r3, [r4, #36]	; 0x24
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <std+0x5c>)
 80076a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <std+0x60>)
 80076a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076aa:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <std+0x64>)
 80076ac:	6323      	str	r3, [r4, #48]	; 0x30
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <std+0x68>)
 80076b0:	6224      	str	r4, [r4, #32]
 80076b2:	429c      	cmp	r4, r3
 80076b4:	d006      	beq.n	80076c4 <std+0x48>
 80076b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80076ba:	4294      	cmp	r4, r2
 80076bc:	d002      	beq.n	80076c4 <std+0x48>
 80076be:	33d0      	adds	r3, #208	; 0xd0
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d105      	bne.n	80076d0 <std+0x54>
 80076c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076cc:	f000 b966 	b.w	800799c <__retarget_lock_init_recursive>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	08007825 	.word	0x08007825
 80076d8:	08007847 	.word	0x08007847
 80076dc:	0800787f 	.word	0x0800787f
 80076e0:	080078a3 	.word	0x080078a3
 80076e4:	200008f4 	.word	0x200008f4

080076e8 <stdio_exit_handler>:
 80076e8:	4a02      	ldr	r2, [pc, #8]	; (80076f4 <stdio_exit_handler+0xc>)
 80076ea:	4903      	ldr	r1, [pc, #12]	; (80076f8 <stdio_exit_handler+0x10>)
 80076ec:	4803      	ldr	r0, [pc, #12]	; (80076fc <stdio_exit_handler+0x14>)
 80076ee:	f000 b869 	b.w	80077c4 <_fwalk_sglue>
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
 80076f8:	08008249 	.word	0x08008249
 80076fc:	20000018 	.word	0x20000018

08007700 <cleanup_stdio>:
 8007700:	6841      	ldr	r1, [r0, #4]
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <cleanup_stdio+0x34>)
 8007704:	4299      	cmp	r1, r3
 8007706:	b510      	push	{r4, lr}
 8007708:	4604      	mov	r4, r0
 800770a:	d001      	beq.n	8007710 <cleanup_stdio+0x10>
 800770c:	f000 fd9c 	bl	8008248 <_fflush_r>
 8007710:	68a1      	ldr	r1, [r4, #8]
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <cleanup_stdio+0x38>)
 8007714:	4299      	cmp	r1, r3
 8007716:	d002      	beq.n	800771e <cleanup_stdio+0x1e>
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fd95 	bl	8008248 <_fflush_r>
 800771e:	68e1      	ldr	r1, [r4, #12]
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <cleanup_stdio+0x3c>)
 8007722:	4299      	cmp	r1, r3
 8007724:	d004      	beq.n	8007730 <cleanup_stdio+0x30>
 8007726:	4620      	mov	r0, r4
 8007728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772c:	f000 bd8c 	b.w	8008248 <_fflush_r>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	200008f4 	.word	0x200008f4
 8007738:	2000095c 	.word	0x2000095c
 800773c:	200009c4 	.word	0x200009c4

08007740 <global_stdio_init.part.0>:
 8007740:	b510      	push	{r4, lr}
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <global_stdio_init.part.0+0x30>)
 8007744:	4c0b      	ldr	r4, [pc, #44]	; (8007774 <global_stdio_init.part.0+0x34>)
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <global_stdio_init.part.0+0x38>)
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	4620      	mov	r0, r4
 800774c:	2200      	movs	r2, #0
 800774e:	2104      	movs	r1, #4
 8007750:	f7ff ff94 	bl	800767c <std>
 8007754:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007758:	2201      	movs	r2, #1
 800775a:	2109      	movs	r1, #9
 800775c:	f7ff ff8e 	bl	800767c <std>
 8007760:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007764:	2202      	movs	r2, #2
 8007766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776a:	2112      	movs	r1, #18
 800776c:	f7ff bf86 	b.w	800767c <std>
 8007770:	20000a2c 	.word	0x20000a2c
 8007774:	200008f4 	.word	0x200008f4
 8007778:	080076e9 	.word	0x080076e9

0800777c <__sfp_lock_acquire>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__sfp_lock_acquire+0x8>)
 800777e:	f000 b90e 	b.w	800799e <__retarget_lock_acquire_recursive>
 8007782:	bf00      	nop
 8007784:	20000a35 	.word	0x20000a35

08007788 <__sfp_lock_release>:
 8007788:	4801      	ldr	r0, [pc, #4]	; (8007790 <__sfp_lock_release+0x8>)
 800778a:	f000 b909 	b.w	80079a0 <__retarget_lock_release_recursive>
 800778e:	bf00      	nop
 8007790:	20000a35 	.word	0x20000a35

08007794 <__sinit>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4604      	mov	r4, r0
 8007798:	f7ff fff0 	bl	800777c <__sfp_lock_acquire>
 800779c:	6a23      	ldr	r3, [r4, #32]
 800779e:	b11b      	cbz	r3, 80077a8 <__sinit+0x14>
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f7ff bff0 	b.w	8007788 <__sfp_lock_release>
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <__sinit+0x28>)
 80077aa:	6223      	str	r3, [r4, #32]
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <__sinit+0x2c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f5      	bne.n	80077a0 <__sinit+0xc>
 80077b4:	f7ff ffc4 	bl	8007740 <global_stdio_init.part.0>
 80077b8:	e7f2      	b.n	80077a0 <__sinit+0xc>
 80077ba:	bf00      	nop
 80077bc:	08007701 	.word	0x08007701
 80077c0:	20000a2c 	.word	0x20000a2c

080077c4 <_fwalk_sglue>:
 80077c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c8:	4607      	mov	r7, r0
 80077ca:	4688      	mov	r8, r1
 80077cc:	4614      	mov	r4, r2
 80077ce:	2600      	movs	r6, #0
 80077d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077d4:	f1b9 0901 	subs.w	r9, r9, #1
 80077d8:	d505      	bpl.n	80077e6 <_fwalk_sglue+0x22>
 80077da:	6824      	ldr	r4, [r4, #0]
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d1f7      	bne.n	80077d0 <_fwalk_sglue+0xc>
 80077e0:	4630      	mov	r0, r6
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d907      	bls.n	80077fc <_fwalk_sglue+0x38>
 80077ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f0:	3301      	adds	r3, #1
 80077f2:	d003      	beq.n	80077fc <_fwalk_sglue+0x38>
 80077f4:	4629      	mov	r1, r5
 80077f6:	4638      	mov	r0, r7
 80077f8:	47c0      	blx	r8
 80077fa:	4306      	orrs	r6, r0
 80077fc:	3568      	adds	r5, #104	; 0x68
 80077fe:	e7e9      	b.n	80077d4 <_fwalk_sglue+0x10>

08007800 <iprintf>:
 8007800:	b40f      	push	{r0, r1, r2, r3}
 8007802:	b507      	push	{r0, r1, r2, lr}
 8007804:	4906      	ldr	r1, [pc, #24]	; (8007820 <iprintf+0x20>)
 8007806:	ab04      	add	r3, sp, #16
 8007808:	6808      	ldr	r0, [r1, #0]
 800780a:	f853 2b04 	ldr.w	r2, [r3], #4
 800780e:	6881      	ldr	r1, [r0, #8]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	f000 f9e9 	bl	8007be8 <_vfiprintf_r>
 8007816:	b003      	add	sp, #12
 8007818:	f85d eb04 	ldr.w	lr, [sp], #4
 800781c:	b004      	add	sp, #16
 800781e:	4770      	bx	lr
 8007820:	20000064 	.word	0x20000064

08007824 <__sread>:
 8007824:	b510      	push	{r4, lr}
 8007826:	460c      	mov	r4, r1
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	f000 f868 	bl	8007900 <_read_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	bfab      	itete	ge
 8007834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007836:	89a3      	ldrhlt	r3, [r4, #12]
 8007838:	181b      	addge	r3, r3, r0
 800783a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800783e:	bfac      	ite	ge
 8007840:	6563      	strge	r3, [r4, #84]	; 0x54
 8007842:	81a3      	strhlt	r3, [r4, #12]
 8007844:	bd10      	pop	{r4, pc}

08007846 <__swrite>:
 8007846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784a:	461f      	mov	r7, r3
 800784c:	898b      	ldrh	r3, [r1, #12]
 800784e:	05db      	lsls	r3, r3, #23
 8007850:	4605      	mov	r5, r0
 8007852:	460c      	mov	r4, r1
 8007854:	4616      	mov	r6, r2
 8007856:	d505      	bpl.n	8007864 <__swrite+0x1e>
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	2302      	movs	r3, #2
 800785e:	2200      	movs	r2, #0
 8007860:	f000 f83c 	bl	80078dc <_lseek_r>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800786a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	4628      	mov	r0, r5
 8007876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	f000 b853 	b.w	8007924 <_write_r>

0800787e <__sseek>:
 800787e:	b510      	push	{r4, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007886:	f000 f829 	bl	80078dc <_lseek_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	bf15      	itete	ne
 8007890:	6560      	strne	r0, [r4, #84]	; 0x54
 8007892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strheq	r3, [r4, #12]
 800789c:	bf18      	it	ne
 800789e:	81a3      	strhne	r3, [r4, #12]
 80078a0:	bd10      	pop	{r4, pc}

080078a2 <__sclose>:
 80078a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a6:	f000 b809 	b.w	80078bc <_close_r>

080078aa <memset>:
 80078aa:	4402      	add	r2, r0
 80078ac:	4603      	mov	r3, r0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d100      	bne.n	80078b4 <memset+0xa>
 80078b2:	4770      	bx	lr
 80078b4:	f803 1b01 	strb.w	r1, [r3], #1
 80078b8:	e7f9      	b.n	80078ae <memset+0x4>
	...

080078bc <_close_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	; (80078d8 <_close_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7fa f9bb 	bl	8001c42 <_close>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_close_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_close_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20000a30 	.word	0x20000a30

080078dc <_lseek_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_lseek_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7fa f9d0 	bl	8001c90 <_lseek>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_lseek_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_lseek_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000a30 	.word	0x20000a30

08007900 <_read_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	; (8007920 <_read_r+0x20>)
 8007904:	4604      	mov	r4, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	602a      	str	r2, [r5, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7fa f95e 	bl	8001bd0 <_read>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_read_r+0x1e>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_read_r+0x1e>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000a30 	.word	0x20000a30

08007924 <_write_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	; (8007944 <_write_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fa f969 	bl	8001c0a <_write>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_write_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_write_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000a30 	.word	0x20000a30

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000064 	.word	0x20000064

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f000 fdc0 	bl	80084ec <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	08008664 	.word	0x08008664
 8007990:	08008664 	.word	0x08008664
 8007994:	08008664 	.word	0x08008664
 8007998:	08008668 	.word	0x08008668

0800799c <__retarget_lock_init_recursive>:
 800799c:	4770      	bx	lr

0800799e <__retarget_lock_acquire_recursive>:
 800799e:	4770      	bx	lr

080079a0 <__retarget_lock_release_recursive>:
 80079a0:	4770      	bx	lr
	...

080079a4 <_free_r>:
 80079a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a6:	2900      	cmp	r1, #0
 80079a8:	d044      	beq.n	8007a34 <_free_r+0x90>
 80079aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ae:	9001      	str	r0, [sp, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f1a1 0404 	sub.w	r4, r1, #4
 80079b6:	bfb8      	it	lt
 80079b8:	18e4      	addlt	r4, r4, r3
 80079ba:	f000 f8df 	bl	8007b7c <__malloc_lock>
 80079be:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <_free_r+0x94>)
 80079c0:	9801      	ldr	r0, [sp, #4]
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	b933      	cbnz	r3, 80079d4 <_free_r+0x30>
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	b003      	add	sp, #12
 80079cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079d0:	f000 b8da 	b.w	8007b88 <__malloc_unlock>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d908      	bls.n	80079ea <_free_r+0x46>
 80079d8:	6825      	ldr	r5, [r4, #0]
 80079da:	1961      	adds	r1, r4, r5
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1949      	addeq	r1, r1, r5
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	e7ed      	b.n	80079c6 <_free_r+0x22>
 80079ea:	461a      	mov	r2, r3
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b10b      	cbz	r3, 80079f4 <_free_r+0x50>
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d9fa      	bls.n	80079ea <_free_r+0x46>
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	1855      	adds	r5, r2, r1
 80079f8:	42a5      	cmp	r5, r4
 80079fa:	d10b      	bne.n	8007a14 <_free_r+0x70>
 80079fc:	6824      	ldr	r4, [r4, #0]
 80079fe:	4421      	add	r1, r4
 8007a00:	1854      	adds	r4, r2, r1
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	d1e0      	bne.n	80079ca <_free_r+0x26>
 8007a08:	681c      	ldr	r4, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	440c      	add	r4, r1
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	e7da      	b.n	80079ca <_free_r+0x26>
 8007a14:	d902      	bls.n	8007a1c <_free_r+0x78>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	e7d6      	b.n	80079ca <_free_r+0x26>
 8007a1c:	6825      	ldr	r5, [r4, #0]
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf04      	itt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	6063      	str	r3, [r4, #4]
 8007a2a:	bf04      	itt	eq
 8007a2c:	1949      	addeq	r1, r1, r5
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	6054      	str	r4, [r2, #4]
 8007a32:	e7ca      	b.n	80079ca <_free_r+0x26>
 8007a34:	b003      	add	sp, #12
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	20000a38 	.word	0x20000a38

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0e      	ldr	r6, [pc, #56]	; (8007a78 <sbrk_aligned+0x3c>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f000 fcbc 	bl	80083c4 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fcb7 	bl	80083c4 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d00a      	beq.n	8007a70 <sbrk_aligned+0x34>
 8007a5a:	1cc4      	adds	r4, r0, #3
 8007a5c:	f024 0403 	bic.w	r4, r4, #3
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d007      	beq.n	8007a74 <sbrk_aligned+0x38>
 8007a64:	1a21      	subs	r1, r4, r0
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fcac 	bl	80083c4 <_sbrk_r>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d101      	bne.n	8007a74 <sbrk_aligned+0x38>
 8007a70:	f04f 34ff 	mov.w	r4, #4294967295
 8007a74:	4620      	mov	r0, r4
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	20000a3c 	.word	0x20000a3c

08007a7c <_malloc_r>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	1ccd      	adds	r5, r1, #3
 8007a82:	f025 0503 	bic.w	r5, r5, #3
 8007a86:	3508      	adds	r5, #8
 8007a88:	2d0c      	cmp	r5, #12
 8007a8a:	bf38      	it	cc
 8007a8c:	250c      	movcc	r5, #12
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	db01      	blt.n	8007a98 <_malloc_r+0x1c>
 8007a94:	42a9      	cmp	r1, r5
 8007a96:	d905      	bls.n	8007aa4 <_malloc_r+0x28>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b78 <_malloc_r+0xfc>
 8007aa8:	f000 f868 	bl	8007b7c <__malloc_lock>
 8007aac:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab0:	461c      	mov	r4, r3
 8007ab2:	bb5c      	cbnz	r4, 8007b0c <_malloc_r+0x90>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ffc0 	bl	8007a3c <sbrk_aligned>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	4604      	mov	r4, r0
 8007ac0:	d155      	bne.n	8007b6e <_malloc_r+0xf2>
 8007ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac6:	4626      	mov	r6, r4
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	d145      	bne.n	8007b58 <_malloc_r+0xdc>
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d048      	beq.n	8007b62 <_malloc_r+0xe6>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	eb04 0903 	add.w	r9, r4, r3
 8007ada:	f000 fc73 	bl	80083c4 <_sbrk_r>
 8007ade:	4581      	cmp	r9, r0
 8007ae0:	d13f      	bne.n	8007b62 <_malloc_r+0xe6>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	1a6d      	subs	r5, r5, r1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff ffa7 	bl	8007a3c <sbrk_aligned>
 8007aee:	3001      	adds	r0, #1
 8007af0:	d037      	beq.n	8007b62 <_malloc_r+0xe6>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	442b      	add	r3, r5
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	f8d8 3000 	ldr.w	r3, [r8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d038      	beq.n	8007b72 <_malloc_r+0xf6>
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	42a2      	cmp	r2, r4
 8007b04:	d12b      	bne.n	8007b5e <_malloc_r+0xe2>
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	e00f      	b.n	8007b2c <_malloc_r+0xb0>
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	1b52      	subs	r2, r2, r5
 8007b10:	d41f      	bmi.n	8007b52 <_malloc_r+0xd6>
 8007b12:	2a0b      	cmp	r2, #11
 8007b14:	d917      	bls.n	8007b46 <_malloc_r+0xca>
 8007b16:	1961      	adds	r1, r4, r5
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	bf18      	it	ne
 8007b1e:	6059      	strne	r1, [r3, #4]
 8007b20:	6863      	ldr	r3, [r4, #4]
 8007b22:	bf08      	it	eq
 8007b24:	f8c8 1000 	streq.w	r1, [r8]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f000 f829 	bl	8007b88 <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0ae      	beq.n	8007a9e <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7ab      	b.n	8007a9e <_malloc_r+0x22>
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	d1dd      	bne.n	8007b08 <_malloc_r+0x8c>
 8007b4c:	f8c8 2000 	str.w	r2, [r8]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xb0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7ac      	b.n	8007ab2 <_malloc_r+0x36>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b4      	b.n	8007ac8 <_malloc_r+0x4c>
 8007b5e:	4613      	mov	r3, r2
 8007b60:	e7cc      	b.n	8007afc <_malloc_r+0x80>
 8007b62:	230c      	movs	r3, #12
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f80e 	bl	8007b88 <__malloc_unlock>
 8007b6c:	e797      	b.n	8007a9e <_malloc_r+0x22>
 8007b6e:	6025      	str	r5, [r4, #0]
 8007b70:	e7dc      	b.n	8007b2c <_malloc_r+0xb0>
 8007b72:	605b      	str	r3, [r3, #4]
 8007b74:	deff      	udf	#255	; 0xff
 8007b76:	bf00      	nop
 8007b78:	20000a38 	.word	0x20000a38

08007b7c <__malloc_lock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__malloc_lock+0x8>)
 8007b7e:	f7ff bf0e 	b.w	800799e <__retarget_lock_acquire_recursive>
 8007b82:	bf00      	nop
 8007b84:	20000a34 	.word	0x20000a34

08007b88 <__malloc_unlock>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__malloc_unlock+0x8>)
 8007b8a:	f7ff bf09 	b.w	80079a0 <__retarget_lock_release_recursive>
 8007b8e:	bf00      	nop
 8007b90:	20000a34 	.word	0x20000a34

08007b94 <__sfputc_r>:
 8007b94:	6893      	ldr	r3, [r2, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	b410      	push	{r4}
 8007b9c:	6093      	str	r3, [r2, #8]
 8007b9e:	da08      	bge.n	8007bb2 <__sfputc_r+0x1e>
 8007ba0:	6994      	ldr	r4, [r2, #24]
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	db01      	blt.n	8007baa <__sfputc_r+0x16>
 8007ba6:	290a      	cmp	r1, #10
 8007ba8:	d103      	bne.n	8007bb2 <__sfputc_r+0x1e>
 8007baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bae:	f000 bb73 	b.w	8008298 <__swbuf_r>
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	1c58      	adds	r0, r3, #1
 8007bb6:	6010      	str	r0, [r2, #0]
 8007bb8:	7019      	strb	r1, [r3, #0]
 8007bba:	4608      	mov	r0, r1
 8007bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <__sfputs_r>:
 8007bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	18d5      	adds	r5, r2, r3
 8007bcc:	42ac      	cmp	r4, r5
 8007bce:	d101      	bne.n	8007bd4 <__sfputs_r+0x12>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e007      	b.n	8007be4 <__sfputs_r+0x22>
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	463a      	mov	r2, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ffda 	bl	8007b94 <__sfputc_r>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d1f3      	bne.n	8007bcc <__sfputs_r+0xa>
 8007be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be8 <_vfiprintf_r>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	460d      	mov	r5, r1
 8007bee:	b09d      	sub	sp, #116	; 0x74
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	4698      	mov	r8, r3
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	b118      	cbz	r0, 8007c00 <_vfiprintf_r+0x18>
 8007bf8:	6a03      	ldr	r3, [r0, #32]
 8007bfa:	b90b      	cbnz	r3, 8007c00 <_vfiprintf_r+0x18>
 8007bfc:	f7ff fdca 	bl	8007794 <__sinit>
 8007c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c02:	07d9      	lsls	r1, r3, #31
 8007c04:	d405      	bmi.n	8007c12 <_vfiprintf_r+0x2a>
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	059a      	lsls	r2, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_vfiprintf_r+0x2a>
 8007c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c0e:	f7ff fec6 	bl	800799e <__retarget_lock_acquire_recursive>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	071b      	lsls	r3, r3, #28
 8007c16:	d501      	bpl.n	8007c1c <_vfiprintf_r+0x34>
 8007c18:	692b      	ldr	r3, [r5, #16]
 8007c1a:	b99b      	cbnz	r3, 8007c44 <_vfiprintf_r+0x5c>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f000 fb78 	bl	8008314 <__swsetup_r>
 8007c24:	b170      	cbz	r0, 8007c44 <_vfiprintf_r+0x5c>
 8007c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c28:	07dc      	lsls	r4, r3, #31
 8007c2a:	d504      	bpl.n	8007c36 <_vfiprintf_r+0x4e>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b01d      	add	sp, #116	; 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	0598      	lsls	r0, r3, #22
 8007c3a:	d4f7      	bmi.n	8007c2c <_vfiprintf_r+0x44>
 8007c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c3e:	f7ff feaf 	bl	80079a0 <__retarget_lock_release_recursive>
 8007c42:	e7f3      	b.n	8007c2c <_vfiprintf_r+0x44>
 8007c44:	2300      	movs	r3, #0
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c52:	2330      	movs	r3, #48	; 0x30
 8007c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e08 <_vfiprintf_r+0x220>
 8007c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c5c:	f04f 0901 	mov.w	r9, #1
 8007c60:	4623      	mov	r3, r4
 8007c62:	469a      	mov	sl, r3
 8007c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c68:	b10a      	cbz	r2, 8007c6e <_vfiprintf_r+0x86>
 8007c6a:	2a25      	cmp	r2, #37	; 0x25
 8007c6c:	d1f9      	bne.n	8007c62 <_vfiprintf_r+0x7a>
 8007c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c72:	d00b      	beq.n	8007c8c <_vfiprintf_r+0xa4>
 8007c74:	465b      	mov	r3, fp
 8007c76:	4622      	mov	r2, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ffa1 	bl	8007bc2 <__sfputs_r>
 8007c80:	3001      	adds	r0, #1
 8007c82:	f000 80a9 	beq.w	8007dd8 <_vfiprintf_r+0x1f0>
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c88:	445a      	add	r2, fp
 8007c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a1 	beq.w	8007dd8 <_vfiprintf_r+0x1f0>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca0:	f10a 0a01 	add.w	sl, sl, #1
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cac:	931a      	str	r3, [sp, #104]	; 0x68
 8007cae:	4654      	mov	r4, sl
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb6:	4854      	ldr	r0, [pc, #336]	; (8007e08 <_vfiprintf_r+0x220>)
 8007cb8:	f7f8 faaa 	bl	8000210 <memchr>
 8007cbc:	9a04      	ldr	r2, [sp, #16]
 8007cbe:	b9d8      	cbnz	r0, 8007cf8 <_vfiprintf_r+0x110>
 8007cc0:	06d1      	lsls	r1, r2, #27
 8007cc2:	bf44      	itt	mi
 8007cc4:	2320      	movmi	r3, #32
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	0713      	lsls	r3, r2, #28
 8007ccc:	bf44      	itt	mi
 8007cce:	232b      	movmi	r3, #43	; 0x2b
 8007cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d015      	beq.n	8007d08 <_vfiprintf_r+0x120>
 8007cdc:	9a07      	ldr	r2, [sp, #28]
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cec:	3b30      	subs	r3, #48	; 0x30
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d94d      	bls.n	8007d8e <_vfiprintf_r+0x1a6>
 8007cf2:	b1b0      	cbz	r0, 8007d22 <_vfiprintf_r+0x13a>
 8007cf4:	9207      	str	r2, [sp, #28]
 8007cf6:	e014      	b.n	8007d22 <_vfiprintf_r+0x13a>
 8007cf8:	eba0 0308 	sub.w	r3, r0, r8
 8007cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	46a2      	mov	sl, r4
 8007d06:	e7d2      	b.n	8007cae <_vfiprintf_r+0xc6>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1d19      	adds	r1, r3, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	9103      	str	r1, [sp, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfbb      	ittet	lt
 8007d14:	425b      	neglt	r3, r3
 8007d16:	f042 0202 	orrlt.w	r2, r2, #2
 8007d1a:	9307      	strge	r3, [sp, #28]
 8007d1c:	9307      	strlt	r3, [sp, #28]
 8007d1e:	bfb8      	it	lt
 8007d20:	9204      	strlt	r2, [sp, #16]
 8007d22:	7823      	ldrb	r3, [r4, #0]
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d10c      	bne.n	8007d42 <_vfiprintf_r+0x15a>
 8007d28:	7863      	ldrb	r3, [r4, #1]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d134      	bne.n	8007d98 <_vfiprintf_r+0x1b0>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	9203      	str	r2, [sp, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d3e:	3402      	adds	r4, #2
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e18 <_vfiprintf_r+0x230>
 8007d46:	7821      	ldrb	r1, [r4, #0]
 8007d48:	2203      	movs	r2, #3
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	f7f8 fa60 	bl	8000210 <memchr>
 8007d50:	b138      	cbz	r0, 8007d62 <_vfiprintf_r+0x17a>
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	eba0 000a 	sub.w	r0, r0, sl
 8007d58:	2240      	movs	r2, #64	; 0x40
 8007d5a:	4082      	lsls	r2, r0
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4829      	ldr	r0, [pc, #164]	; (8007e0c <_vfiprintf_r+0x224>)
 8007d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d6c:	2206      	movs	r2, #6
 8007d6e:	f7f8 fa4f 	bl	8000210 <memchr>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d03f      	beq.n	8007df6 <_vfiprintf_r+0x20e>
 8007d76:	4b26      	ldr	r3, [pc, #152]	; (8007e10 <_vfiprintf_r+0x228>)
 8007d78:	bb1b      	cbnz	r3, 8007dc2 <_vfiprintf_r+0x1da>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	3308      	adds	r3, #8
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	443b      	add	r3, r7
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	e768      	b.n	8007c60 <_vfiprintf_r+0x78>
 8007d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d92:	460c      	mov	r4, r1
 8007d94:	2001      	movs	r0, #1
 8007d96:	e7a6      	b.n	8007ce6 <_vfiprintf_r+0xfe>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	3401      	adds	r4, #1
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f04f 0c0a 	mov.w	ip, #10
 8007da4:	4620      	mov	r0, r4
 8007da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007daa:	3a30      	subs	r2, #48	; 0x30
 8007dac:	2a09      	cmp	r2, #9
 8007dae:	d903      	bls.n	8007db8 <_vfiprintf_r+0x1d0>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0c6      	beq.n	8007d42 <_vfiprintf_r+0x15a>
 8007db4:	9105      	str	r1, [sp, #20]
 8007db6:	e7c4      	b.n	8007d42 <_vfiprintf_r+0x15a>
 8007db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e7f0      	b.n	8007da4 <_vfiprintf_r+0x1bc>
 8007dc2:	ab03      	add	r3, sp, #12
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <_vfiprintf_r+0x22c>)
 8007dca:	a904      	add	r1, sp, #16
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f3af 8000 	nop.w
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	1c78      	adds	r0, r7, #1
 8007dd6:	d1d6      	bne.n	8007d86 <_vfiprintf_r+0x19e>
 8007dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dda:	07d9      	lsls	r1, r3, #31
 8007ddc:	d405      	bmi.n	8007dea <_vfiprintf_r+0x202>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	059a      	lsls	r2, r3, #22
 8007de2:	d402      	bmi.n	8007dea <_vfiprintf_r+0x202>
 8007de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de6:	f7ff fddb 	bl	80079a0 <__retarget_lock_release_recursive>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	065b      	lsls	r3, r3, #25
 8007dee:	f53f af1d 	bmi.w	8007c2c <_vfiprintf_r+0x44>
 8007df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df4:	e71c      	b.n	8007c30 <_vfiprintf_r+0x48>
 8007df6:	ab03      	add	r3, sp, #12
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_vfiprintf_r+0x22c>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f879 	bl	8007ef8 <_printf_i>
 8007e06:	e7e4      	b.n	8007dd2 <_vfiprintf_r+0x1ea>
 8007e08:	08008629 	.word	0x08008629
 8007e0c:	08008633 	.word	0x08008633
 8007e10:	00000000 	.word	0x00000000
 8007e14:	08007bc3 	.word	0x08007bc3
 8007e18:	0800862f 	.word	0x0800862f

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4699      	mov	r9, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e68:	1e13      	subs	r3, r2, #0
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	6922      	ldr	r2, [r4, #16]
 8007e86:	f003 0306 	and.w	r3, r3, #6
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	bf02      	ittt	eq
 8007e8e:	68e5      	ldreq	r5, [r4, #12]
 8007e90:	6833      	ldreq	r3, [r6, #0]
 8007e92:	1aed      	subeq	r5, r5, r3
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c0      	blx	r8
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	; 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	7e0f      	ldrb	r7, [r1, #24]
 8007efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f00:	2f78      	cmp	r7, #120	; 0x78
 8007f02:	4691      	mov	r9, r2
 8007f04:	4680      	mov	r8, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	; 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d4 	beq.w	80080c2 <_printf_i+0x1ca>
 8007f1a:	2f58      	cmp	r7, #88	; 0x58
 8007f1c:	f000 80c0 	beq.w	80080a0 <_printf_i+0x1a8>
 8007f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a101      	add	r1, pc, #4	; (adr r1, 8007f38 <_printf_i+0x40>)
 8007f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080a9 	.word	0x080080a9
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08008063 	.word	0x08008063
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080cb 	.word	0x080080cb
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fd1 	.word	0x08007fd1
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	0800806b 	.word	0x0800806b
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09f      	b.n	80080e4 <_printf_i+0x1ec>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	0607      	lsls	r7, r0, #24
 8007faa:	f103 0104 	add.w	r1, r3, #4
 8007fae:	6029      	str	r1, [r5, #0]
 8007fb0:	d501      	bpl.n	8007fb6 <_printf_i+0xbe>
 8007fb2:	681e      	ldr	r6, [r3, #0]
 8007fb4:	e003      	b.n	8007fbe <_printf_i+0xc6>
 8007fb6:	0646      	lsls	r6, r0, #25
 8007fb8:	d5fb      	bpl.n	8007fb2 <_printf_i+0xba>
 8007fba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	da03      	bge.n	8007fca <_printf_i+0xd2>
 8007fc2:	232d      	movs	r3, #45	; 0x2d
 8007fc4:	4276      	negs	r6, r6
 8007fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fca:	485a      	ldr	r0, [pc, #360]	; (8008134 <_printf_i+0x23c>)
 8007fcc:	230a      	movs	r3, #10
 8007fce:	e012      	b.n	8007ff6 <_printf_i+0xfe>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	1d19      	adds	r1, r3, #4
 8007fd6:	6029      	str	r1, [r5, #0]
 8007fd8:	0605      	lsls	r5, r0, #24
 8007fda:	d501      	bpl.n	8007fe0 <_printf_i+0xe8>
 8007fdc:	681e      	ldr	r6, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <_printf_i+0xee>
 8007fe0:	0641      	lsls	r1, r0, #25
 8007fe2:	d5fb      	bpl.n	8007fdc <_printf_i+0xe4>
 8007fe4:	881e      	ldrh	r6, [r3, #0]
 8007fe6:	4853      	ldr	r0, [pc, #332]	; (8008134 <_printf_i+0x23c>)
 8007fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8007fea:	bf0c      	ite	eq
 8007fec:	2308      	moveq	r3, #8
 8007fee:	230a      	movne	r3, #10
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ff6:	6865      	ldr	r5, [r4, #4]
 8007ff8:	60a5      	str	r5, [r4, #8]
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	bfa2      	ittt	ge
 8007ffe:	6821      	ldrge	r1, [r4, #0]
 8008000:	f021 0104 	bicge.w	r1, r1, #4
 8008004:	6021      	strge	r1, [r4, #0]
 8008006:	b90e      	cbnz	r6, 800800c <_printf_i+0x114>
 8008008:	2d00      	cmp	r5, #0
 800800a:	d04b      	beq.n	80080a4 <_printf_i+0x1ac>
 800800c:	4615      	mov	r5, r2
 800800e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008012:	fb03 6711 	mls	r7, r3, r1, r6
 8008016:	5dc7      	ldrb	r7, [r0, r7]
 8008018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800801c:	4637      	mov	r7, r6
 800801e:	42bb      	cmp	r3, r7
 8008020:	460e      	mov	r6, r1
 8008022:	d9f4      	bls.n	800800e <_printf_i+0x116>
 8008024:	2b08      	cmp	r3, #8
 8008026:	d10b      	bne.n	8008040 <_printf_i+0x148>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	07de      	lsls	r6, r3, #31
 800802c:	d508      	bpl.n	8008040 <_printf_i+0x148>
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6861      	ldr	r1, [r4, #4]
 8008032:	4299      	cmp	r1, r3
 8008034:	bfde      	ittt	le
 8008036:	2330      	movle	r3, #48	; 0x30
 8008038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800803c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008040:	1b52      	subs	r2, r2, r5
 8008042:	6122      	str	r2, [r4, #16]
 8008044:	f8cd a000 	str.w	sl, [sp]
 8008048:	464b      	mov	r3, r9
 800804a:	aa03      	add	r2, sp, #12
 800804c:	4621      	mov	r1, r4
 800804e:	4640      	mov	r0, r8
 8008050:	f7ff fee4 	bl	8007e1c <_printf_common>
 8008054:	3001      	adds	r0, #1
 8008056:	d14a      	bne.n	80080ee <_printf_i+0x1f6>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	b004      	add	sp, #16
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	f043 0320 	orr.w	r3, r3, #32
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	4833      	ldr	r0, [pc, #204]	; (8008138 <_printf_i+0x240>)
 800806c:	2778      	movs	r7, #120	; 0x78
 800806e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	6829      	ldr	r1, [r5, #0]
 8008076:	061f      	lsls	r7, r3, #24
 8008078:	f851 6b04 	ldr.w	r6, [r1], #4
 800807c:	d402      	bmi.n	8008084 <_printf_i+0x18c>
 800807e:	065f      	lsls	r7, r3, #25
 8008080:	bf48      	it	mi
 8008082:	b2b6      	uxthmi	r6, r6
 8008084:	07df      	lsls	r7, r3, #31
 8008086:	bf48      	it	mi
 8008088:	f043 0320 	orrmi.w	r3, r3, #32
 800808c:	6029      	str	r1, [r5, #0]
 800808e:	bf48      	it	mi
 8008090:	6023      	strmi	r3, [r4, #0]
 8008092:	b91e      	cbnz	r6, 800809c <_printf_i+0x1a4>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	f023 0320 	bic.w	r3, r3, #32
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	2310      	movs	r3, #16
 800809e:	e7a7      	b.n	8007ff0 <_printf_i+0xf8>
 80080a0:	4824      	ldr	r0, [pc, #144]	; (8008134 <_printf_i+0x23c>)
 80080a2:	e7e4      	b.n	800806e <_printf_i+0x176>
 80080a4:	4615      	mov	r5, r2
 80080a6:	e7bd      	b.n	8008024 <_printf_i+0x12c>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	6826      	ldr	r6, [r4, #0]
 80080ac:	6961      	ldr	r1, [r4, #20]
 80080ae:	1d18      	adds	r0, r3, #4
 80080b0:	6028      	str	r0, [r5, #0]
 80080b2:	0635      	lsls	r5, r6, #24
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	d501      	bpl.n	80080bc <_printf_i+0x1c4>
 80080b8:	6019      	str	r1, [r3, #0]
 80080ba:	e002      	b.n	80080c2 <_printf_i+0x1ca>
 80080bc:	0670      	lsls	r0, r6, #25
 80080be:	d5fb      	bpl.n	80080b8 <_printf_i+0x1c0>
 80080c0:	8019      	strh	r1, [r3, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	4615      	mov	r5, r2
 80080c8:	e7bc      	b.n	8008044 <_printf_i+0x14c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	1d1a      	adds	r2, r3, #4
 80080ce:	602a      	str	r2, [r5, #0]
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	6862      	ldr	r2, [r4, #4]
 80080d4:	2100      	movs	r1, #0
 80080d6:	4628      	mov	r0, r5
 80080d8:	f7f8 f89a 	bl	8000210 <memchr>
 80080dc:	b108      	cbz	r0, 80080e2 <_printf_i+0x1ea>
 80080de:	1b40      	subs	r0, r0, r5
 80080e0:	6060      	str	r0, [r4, #4]
 80080e2:	6863      	ldr	r3, [r4, #4]
 80080e4:	6123      	str	r3, [r4, #16]
 80080e6:	2300      	movs	r3, #0
 80080e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ec:	e7aa      	b.n	8008044 <_printf_i+0x14c>
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4649      	mov	r1, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	47d0      	blx	sl
 80080f8:	3001      	adds	r0, #1
 80080fa:	d0ad      	beq.n	8008058 <_printf_i+0x160>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	d413      	bmi.n	800812a <_printf_i+0x232>
 8008102:	68e0      	ldr	r0, [r4, #12]
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	4298      	cmp	r0, r3
 8008108:	bfb8      	it	lt
 800810a:	4618      	movlt	r0, r3
 800810c:	e7a6      	b.n	800805c <_printf_i+0x164>
 800810e:	2301      	movs	r3, #1
 8008110:	4632      	mov	r2, r6
 8008112:	4649      	mov	r1, r9
 8008114:	4640      	mov	r0, r8
 8008116:	47d0      	blx	sl
 8008118:	3001      	adds	r0, #1
 800811a:	d09d      	beq.n	8008058 <_printf_i+0x160>
 800811c:	3501      	adds	r5, #1
 800811e:	68e3      	ldr	r3, [r4, #12]
 8008120:	9903      	ldr	r1, [sp, #12]
 8008122:	1a5b      	subs	r3, r3, r1
 8008124:	42ab      	cmp	r3, r5
 8008126:	dcf2      	bgt.n	800810e <_printf_i+0x216>
 8008128:	e7eb      	b.n	8008102 <_printf_i+0x20a>
 800812a:	2500      	movs	r5, #0
 800812c:	f104 0619 	add.w	r6, r4, #25
 8008130:	e7f5      	b.n	800811e <_printf_i+0x226>
 8008132:	bf00      	nop
 8008134:	0800863a 	.word	0x0800863a
 8008138:	0800864b 	.word	0x0800864b

0800813c <__sflush_r>:
 800813c:	898a      	ldrh	r2, [r1, #12]
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	0710      	lsls	r0, r2, #28
 8008146:	460c      	mov	r4, r1
 8008148:	d458      	bmi.n	80081fc <__sflush_r+0xc0>
 800814a:	684b      	ldr	r3, [r1, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc05      	bgt.n	800815c <__sflush_r+0x20>
 8008150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc02      	bgt.n	800815c <__sflush_r+0x20>
 8008156:	2000      	movs	r0, #0
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800815e:	2e00      	cmp	r6, #0
 8008160:	d0f9      	beq.n	8008156 <__sflush_r+0x1a>
 8008162:	2300      	movs	r3, #0
 8008164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008168:	682f      	ldr	r7, [r5, #0]
 800816a:	6a21      	ldr	r1, [r4, #32]
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	d032      	beq.n	80081d6 <__sflush_r+0x9a>
 8008170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	075a      	lsls	r2, r3, #29
 8008176:	d505      	bpl.n	8008184 <__sflush_r+0x48>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	1ac0      	subs	r0, r0, r3
 800817c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817e:	b10b      	cbz	r3, 8008184 <__sflush_r+0x48>
 8008180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008182:	1ac0      	subs	r0, r0, r3
 8008184:	2300      	movs	r3, #0
 8008186:	4602      	mov	r2, r0
 8008188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800818a:	6a21      	ldr	r1, [r4, #32]
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	d106      	bne.n	80081a4 <__sflush_r+0x68>
 8008196:	6829      	ldr	r1, [r5, #0]
 8008198:	291d      	cmp	r1, #29
 800819a:	d82b      	bhi.n	80081f4 <__sflush_r+0xb8>
 800819c:	4a29      	ldr	r2, [pc, #164]	; (8008244 <__sflush_r+0x108>)
 800819e:	410a      	asrs	r2, r1
 80081a0:	07d6      	lsls	r6, r2, #31
 80081a2:	d427      	bmi.n	80081f4 <__sflush_r+0xb8>
 80081a4:	2200      	movs	r2, #0
 80081a6:	6062      	str	r2, [r4, #4]
 80081a8:	04d9      	lsls	r1, r3, #19
 80081aa:	6922      	ldr	r2, [r4, #16]
 80081ac:	6022      	str	r2, [r4, #0]
 80081ae:	d504      	bpl.n	80081ba <__sflush_r+0x7e>
 80081b0:	1c42      	adds	r2, r0, #1
 80081b2:	d101      	bne.n	80081b8 <__sflush_r+0x7c>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b903      	cbnz	r3, 80081ba <__sflush_r+0x7e>
 80081b8:	6560      	str	r0, [r4, #84]	; 0x54
 80081ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081bc:	602f      	str	r7, [r5, #0]
 80081be:	2900      	cmp	r1, #0
 80081c0:	d0c9      	beq.n	8008156 <__sflush_r+0x1a>
 80081c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c6:	4299      	cmp	r1, r3
 80081c8:	d002      	beq.n	80081d0 <__sflush_r+0x94>
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff fbea 	bl	80079a4 <_free_r>
 80081d0:	2000      	movs	r0, #0
 80081d2:	6360      	str	r0, [r4, #52]	; 0x34
 80081d4:	e7c0      	b.n	8008158 <__sflush_r+0x1c>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c41      	adds	r1, r0, #1
 80081de:	d1c8      	bne.n	8008172 <__sflush_r+0x36>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c5      	beq.n	8008172 <__sflush_r+0x36>
 80081e6:	2b1d      	cmp	r3, #29
 80081e8:	d001      	beq.n	80081ee <__sflush_r+0xb2>
 80081ea:	2b16      	cmp	r3, #22
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0xb6>
 80081ee:	602f      	str	r7, [r5, #0]
 80081f0:	e7b1      	b.n	8008156 <__sflush_r+0x1a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	e7ad      	b.n	8008158 <__sflush_r+0x1c>
 80081fc:	690f      	ldr	r7, [r1, #16]
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d0a9      	beq.n	8008156 <__sflush_r+0x1a>
 8008202:	0793      	lsls	r3, r2, #30
 8008204:	680e      	ldr	r6, [r1, #0]
 8008206:	bf08      	it	eq
 8008208:	694b      	ldreq	r3, [r1, #20]
 800820a:	600f      	str	r7, [r1, #0]
 800820c:	bf18      	it	ne
 800820e:	2300      	movne	r3, #0
 8008210:	eba6 0807 	sub.w	r8, r6, r7
 8008214:	608b      	str	r3, [r1, #8]
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dd9c      	ble.n	8008156 <__sflush_r+0x1a>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008220:	4643      	mov	r3, r8
 8008222:	463a      	mov	r2, r7
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	2800      	cmp	r0, #0
 800822a:	dc06      	bgt.n	800823a <__sflush_r+0xfe>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e78e      	b.n	8008158 <__sflush_r+0x1c>
 800823a:	4407      	add	r7, r0
 800823c:	eba8 0800 	sub.w	r8, r8, r0
 8008240:	e7e9      	b.n	8008216 <__sflush_r+0xda>
 8008242:	bf00      	nop
 8008244:	dfbffffe 	.word	0xdfbffffe

08008248 <_fflush_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b913      	cbnz	r3, 8008258 <_fflush_r+0x10>
 8008252:	2500      	movs	r5, #0
 8008254:	4628      	mov	r0, r5
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	b118      	cbz	r0, 8008262 <_fflush_r+0x1a>
 800825a:	6a03      	ldr	r3, [r0, #32]
 800825c:	b90b      	cbnz	r3, 8008262 <_fflush_r+0x1a>
 800825e:	f7ff fa99 	bl	8007794 <__sinit>
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f3      	beq.n	8008252 <_fflush_r+0xa>
 800826a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800826c:	07d0      	lsls	r0, r2, #31
 800826e:	d404      	bmi.n	800827a <_fflush_r+0x32>
 8008270:	0599      	lsls	r1, r3, #22
 8008272:	d402      	bmi.n	800827a <_fflush_r+0x32>
 8008274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008276:	f7ff fb92 	bl	800799e <__retarget_lock_acquire_recursive>
 800827a:	4628      	mov	r0, r5
 800827c:	4621      	mov	r1, r4
 800827e:	f7ff ff5d 	bl	800813c <__sflush_r>
 8008282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008284:	07da      	lsls	r2, r3, #31
 8008286:	4605      	mov	r5, r0
 8008288:	d4e4      	bmi.n	8008254 <_fflush_r+0xc>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	059b      	lsls	r3, r3, #22
 800828e:	d4e1      	bmi.n	8008254 <_fflush_r+0xc>
 8008290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008292:	f7ff fb85 	bl	80079a0 <__retarget_lock_release_recursive>
 8008296:	e7dd      	b.n	8008254 <_fflush_r+0xc>

08008298 <__swbuf_r>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	460e      	mov	r6, r1
 800829c:	4614      	mov	r4, r2
 800829e:	4605      	mov	r5, r0
 80082a0:	b118      	cbz	r0, 80082aa <__swbuf_r+0x12>
 80082a2:	6a03      	ldr	r3, [r0, #32]
 80082a4:	b90b      	cbnz	r3, 80082aa <__swbuf_r+0x12>
 80082a6:	f7ff fa75 	bl	8007794 <__sinit>
 80082aa:	69a3      	ldr	r3, [r4, #24]
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	071a      	lsls	r2, r3, #28
 80082b2:	d525      	bpl.n	8008300 <__swbuf_r+0x68>
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	b31b      	cbz	r3, 8008300 <__swbuf_r+0x68>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	6922      	ldr	r2, [r4, #16]
 80082bc:	1a98      	subs	r0, r3, r2
 80082be:	6963      	ldr	r3, [r4, #20]
 80082c0:	b2f6      	uxtb	r6, r6
 80082c2:	4283      	cmp	r3, r0
 80082c4:	4637      	mov	r7, r6
 80082c6:	dc04      	bgt.n	80082d2 <__swbuf_r+0x3a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7ff ffbc 	bl	8008248 <_fflush_r>
 80082d0:	b9e0      	cbnz	r0, 800830c <__swbuf_r+0x74>
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	701e      	strb	r6, [r3, #0]
 80082e0:	6962      	ldr	r2, [r4, #20]
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d004      	beq.n	80082f2 <__swbuf_r+0x5a>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	07db      	lsls	r3, r3, #31
 80082ec:	d506      	bpl.n	80082fc <__swbuf_r+0x64>
 80082ee:	2e0a      	cmp	r6, #10
 80082f0:	d104      	bne.n	80082fc <__swbuf_r+0x64>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff ffa7 	bl	8008248 <_fflush_r>
 80082fa:	b938      	cbnz	r0, 800830c <__swbuf_r+0x74>
 80082fc:	4638      	mov	r0, r7
 80082fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008300:	4621      	mov	r1, r4
 8008302:	4628      	mov	r0, r5
 8008304:	f000 f806 	bl	8008314 <__swsetup_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	d0d5      	beq.n	80082b8 <__swbuf_r+0x20>
 800830c:	f04f 37ff 	mov.w	r7, #4294967295
 8008310:	e7f4      	b.n	80082fc <__swbuf_r+0x64>
	...

08008314 <__swsetup_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <__swsetup_r+0xac>)
 8008318:	4605      	mov	r5, r0
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	460c      	mov	r4, r1
 800831e:	b118      	cbz	r0, 8008328 <__swsetup_r+0x14>
 8008320:	6a03      	ldr	r3, [r0, #32]
 8008322:	b90b      	cbnz	r3, 8008328 <__swsetup_r+0x14>
 8008324:	f7ff fa36 	bl	8007794 <__sinit>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800832e:	0718      	lsls	r0, r3, #28
 8008330:	d422      	bmi.n	8008378 <__swsetup_r+0x64>
 8008332:	06d9      	lsls	r1, r3, #27
 8008334:	d407      	bmi.n	8008346 <__swsetup_r+0x32>
 8008336:	2309      	movs	r3, #9
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e034      	b.n	80083b0 <__swsetup_r+0x9c>
 8008346:	0758      	lsls	r0, r3, #29
 8008348:	d512      	bpl.n	8008370 <__swsetup_r+0x5c>
 800834a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800834c:	b141      	cbz	r1, 8008360 <__swsetup_r+0x4c>
 800834e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008352:	4299      	cmp	r1, r3
 8008354:	d002      	beq.n	800835c <__swsetup_r+0x48>
 8008356:	4628      	mov	r0, r5
 8008358:	f7ff fb24 	bl	80079a4 <_free_r>
 800835c:	2300      	movs	r3, #0
 800835e:	6363      	str	r3, [r4, #52]	; 0x34
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	2300      	movs	r3, #0
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f043 0308 	orr.w	r3, r3, #8
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	b94b      	cbnz	r3, 8008390 <__swsetup_r+0x7c>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008386:	d003      	beq.n	8008390 <__swsetup_r+0x7c>
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f850 	bl	8008430 <__smakebuf_r>
 8008390:	89a0      	ldrh	r0, [r4, #12]
 8008392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008396:	f010 0301 	ands.w	r3, r0, #1
 800839a:	d00a      	beq.n	80083b2 <__swsetup_r+0x9e>
 800839c:	2300      	movs	r3, #0
 800839e:	60a3      	str	r3, [r4, #8]
 80083a0:	6963      	ldr	r3, [r4, #20]
 80083a2:	425b      	negs	r3, r3
 80083a4:	61a3      	str	r3, [r4, #24]
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	b943      	cbnz	r3, 80083bc <__swsetup_r+0xa8>
 80083aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083ae:	d1c4      	bne.n	800833a <__swsetup_r+0x26>
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	0781      	lsls	r1, r0, #30
 80083b4:	bf58      	it	pl
 80083b6:	6963      	ldrpl	r3, [r4, #20]
 80083b8:	60a3      	str	r3, [r4, #8]
 80083ba:	e7f4      	b.n	80083a6 <__swsetup_r+0x92>
 80083bc:	2000      	movs	r0, #0
 80083be:	e7f7      	b.n	80083b0 <__swsetup_r+0x9c>
 80083c0:	20000064 	.word	0x20000064

080083c4 <_sbrk_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d06      	ldr	r5, [pc, #24]	; (80083e0 <_sbrk_r+0x1c>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	f7f9 fc6c 	bl	8001cac <_sbrk>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_sbrk_r+0x1a>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_sbrk_r+0x1a>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	20000a30 	.word	0x20000a30

080083e4 <__swhatbuf_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460c      	mov	r4, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	2900      	cmp	r1, #0
 80083ee:	b096      	sub	sp, #88	; 0x58
 80083f0:	4615      	mov	r5, r2
 80083f2:	461e      	mov	r6, r3
 80083f4:	da0d      	bge.n	8008412 <__swhatbuf_r+0x2e>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083fc:	f04f 0100 	mov.w	r1, #0
 8008400:	bf0c      	ite	eq
 8008402:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008406:	2340      	movne	r3, #64	; 0x40
 8008408:	2000      	movs	r0, #0
 800840a:	6031      	str	r1, [r6, #0]
 800840c:	602b      	str	r3, [r5, #0]
 800840e:	b016      	add	sp, #88	; 0x58
 8008410:	bd70      	pop	{r4, r5, r6, pc}
 8008412:	466a      	mov	r2, sp
 8008414:	f000 f848 	bl	80084a8 <_fstat_r>
 8008418:	2800      	cmp	r0, #0
 800841a:	dbec      	blt.n	80083f6 <__swhatbuf_r+0x12>
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008422:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008426:	4259      	negs	r1, r3
 8008428:	4159      	adcs	r1, r3
 800842a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842e:	e7eb      	b.n	8008408 <__swhatbuf_r+0x24>

08008430 <__smakebuf_r>:
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008434:	079d      	lsls	r5, r3, #30
 8008436:	4606      	mov	r6, r0
 8008438:	460c      	mov	r4, r1
 800843a:	d507      	bpl.n	800844c <__smakebuf_r+0x1c>
 800843c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2301      	movs	r3, #1
 8008446:	6163      	str	r3, [r4, #20]
 8008448:	b002      	add	sp, #8
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	ab01      	add	r3, sp, #4
 800844e:	466a      	mov	r2, sp
 8008450:	f7ff ffc8 	bl	80083e4 <__swhatbuf_r>
 8008454:	9900      	ldr	r1, [sp, #0]
 8008456:	4605      	mov	r5, r0
 8008458:	4630      	mov	r0, r6
 800845a:	f7ff fb0f 	bl	8007a7c <_malloc_r>
 800845e:	b948      	cbnz	r0, 8008474 <__smakebuf_r+0x44>
 8008460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008464:	059a      	lsls	r2, r3, #22
 8008466:	d4ef      	bmi.n	8008448 <__smakebuf_r+0x18>
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	e7e3      	b.n	800843c <__smakebuf_r+0xc>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	6163      	str	r3, [r4, #20]
 8008482:	9b01      	ldr	r3, [sp, #4]
 8008484:	6120      	str	r0, [r4, #16]
 8008486:	b15b      	cbz	r3, 80084a0 <__smakebuf_r+0x70>
 8008488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 f81d 	bl	80084cc <_isatty_r>
 8008492:	b128      	cbz	r0, 80084a0 <__smakebuf_r+0x70>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	431d      	orrs	r5, r3
 80084a4:	81a5      	strh	r5, [r4, #12]
 80084a6:	e7cf      	b.n	8008448 <__smakebuf_r+0x18>

080084a8 <_fstat_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d07      	ldr	r5, [pc, #28]	; (80084c8 <_fstat_r+0x20>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	f7f9 fbd0 	bl	8001c5a <_fstat>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d102      	bne.n	80084c4 <_fstat_r+0x1c>
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	b103      	cbz	r3, 80084c4 <_fstat_r+0x1c>
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop
 80084c8:	20000a30 	.word	0x20000a30

080084cc <_isatty_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d06      	ldr	r5, [pc, #24]	; (80084e8 <_isatty_r+0x1c>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	f7f9 fbcf 	bl	8001c7a <_isatty>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_isatty_r+0x1a>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_isatty_r+0x1a>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	20000a30 	.word	0x20000a30

080084ec <_init>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr

080084f8 <_fini>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr
